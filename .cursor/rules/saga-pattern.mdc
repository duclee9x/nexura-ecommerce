---
description: 
globs: 
alwaysApply: false
---
# Saga Pattern Implementation

## Overview
The saga pattern is used for managing distributed transactions across multiple services. The implementation is demonstrated in [create-saga-order.ts](mdc:src/orchestrator-service/src/services/orchestrator/create-saga-order.ts).

## Structure
1. Saga Steps
   - Each step should have a forward and compensate action
   - Forward actions implement the main business logic
   - Compensate actions handle rollback logic
   - Steps should be idempotent

2. State Management
   - Track saga state throughout the transaction
   - Store compensation data (e.g., reservationId)
   - Handle partial failures gracefully
   - Implement proper error handling

## Implementation Guidelines
- Define clear step boundaries
- Implement proper compensation logic
- Handle all error cases
- Use proper TypeScript types
- Follow the single responsibility principle

## Error Handling
- Implement compensation for each step
- Handle service-specific errors
- Provide clear error messages
- Track saga state for debugging
- Handle timeout and network errors

## Best Practices
- Keep steps atomic and independent
- Implement proper logging
- Handle partial failures gracefully
- Use proper TypeScript types
- Follow SOLID principles
- Document compensation logic

