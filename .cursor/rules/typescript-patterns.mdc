---
description: 
globs: 
alwaysApply: false
---
# TypeScript Patterns and Code Organization

## Type Safety
- Use strict TypeScript configuration
- Define interfaces for all request/response objects
- Avoid using `any` type - prefer explicit typing
- Use type inference where possible for cleaner code
- Implement proper error types and handling

## Service Organization
1. Gateway Layer
   - Service clients in [serviceClient.ts](mdc:src/orchestrator-service/src/gateway/services/serviceClient.ts)
   - Base adapters in [baseAdapter.ts](mdc:src/orchestrator-service/src/gateway/services/baseAdapter.ts)
   - Keep service configuration separate from implementation

2. Service Layer
   - Implement business logic in service-specific files
   - Use saga pattern for distributed transactions
   - Handle errors and compensation logic
   - Follow single responsibility principle

## Code Style
- Use early returns for validation and error cases
- Implement proper error handling with typed errors
- Use async/await for asynchronous operations
- Keep functions focused and single-purpose
- Use descriptive variable and function names

## Interface Guidelines
- Define interfaces in proto files when possible
- Use TypeScript interfaces for internal types
- Follow consistent naming conventions
- Include proper JSDoc comments for complex types
- Use readonly properties where appropriate

## Best Practices
- Implement proper error handling
- Use dependency injection for services
- Keep business logic separate from communication layer
- Follow SOLID principles
- Use proper TypeScript features (generics, unions, etc.)

