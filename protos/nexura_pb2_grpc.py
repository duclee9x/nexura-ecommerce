# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import src.proto.nexura_pb2 as nexura__pb2


class AddressServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCountries = channel.unary_unary(
                '/nexuraTelemetry.AddressService/GetCountries',
                request_serializer=nexura__pb2.Empty.SerializeToString,
                response_deserializer=nexura__pb2.GetCountriesResponse.FromString,
                )
        self.GetProvincesByCountry = channel.unary_unary(
                '/nexuraTelemetry.AddressService/GetProvincesByCountry',
                request_serializer=nexura__pb2.GetProvincesByCountryRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetProvincesResponse.FromString,
                )
        self.GetDistrictsByProvince = channel.unary_unary(
                '/nexuraTelemetry.AddressService/GetDistrictsByProvince',
                request_serializer=nexura__pb2.GetDistrictsByProvinceRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetDistrictsResponse.FromString,
                )
        self.GetWardsByDistrict = channel.unary_unary(
                '/nexuraTelemetry.AddressService/GetWardsByDistrict',
                request_serializer=nexura__pb2.GetWardsByDistrictRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetWardsResponse.FromString,
                )
        self.AddAddress = channel.unary_unary(
                '/nexuraTelemetry.AddressService/AddAddress',
                request_serializer=nexura__pb2.AddAddressRequest.SerializeToString,
                response_deserializer=nexura__pb2.AddressResponse.FromString,
                )
        self.UpdateAddress = channel.unary_unary(
                '/nexuraTelemetry.AddressService/UpdateAddress',
                request_serializer=nexura__pb2.UpdateAddressRequest.SerializeToString,
                response_deserializer=nexura__pb2.AddressResponse.FromString,
                )
        self.DeleteAddress = channel.unary_unary(
                '/nexuraTelemetry.AddressService/DeleteAddress',
                request_serializer=nexura__pb2.DeleteAddressRequest.SerializeToString,
                response_deserializer=nexura__pb2.DeleteAddressResponse.FromString,
                )
        self.GetAddresses = channel.unary_unary(
                '/nexuraTelemetry.AddressService/GetAddresses',
                request_serializer=nexura__pb2.GetAddressesRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetAddressesResponse.FromString,
                )


class AddressServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCountries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProvincesByCountry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistrictsByProvince(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWardsByDistrict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAddress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAddresses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddressServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCountries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCountries,
                    request_deserializer=nexura__pb2.Empty.FromString,
                    response_serializer=nexura__pb2.GetCountriesResponse.SerializeToString,
            ),
            'GetProvincesByCountry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProvincesByCountry,
                    request_deserializer=nexura__pb2.GetProvincesByCountryRequest.FromString,
                    response_serializer=nexura__pb2.GetProvincesResponse.SerializeToString,
            ),
            'GetDistrictsByProvince': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistrictsByProvince,
                    request_deserializer=nexura__pb2.GetDistrictsByProvinceRequest.FromString,
                    response_serializer=nexura__pb2.GetDistrictsResponse.SerializeToString,
            ),
            'GetWardsByDistrict': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWardsByDistrict,
                    request_deserializer=nexura__pb2.GetWardsByDistrictRequest.FromString,
                    response_serializer=nexura__pb2.GetWardsResponse.SerializeToString,
            ),
            'AddAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAddress,
                    request_deserializer=nexura__pb2.AddAddressRequest.FromString,
                    response_serializer=nexura__pb2.AddressResponse.SerializeToString,
            ),
            'UpdateAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAddress,
                    request_deserializer=nexura__pb2.UpdateAddressRequest.FromString,
                    response_serializer=nexura__pb2.AddressResponse.SerializeToString,
            ),
            'DeleteAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAddress,
                    request_deserializer=nexura__pb2.DeleteAddressRequest.FromString,
                    response_serializer=nexura__pb2.DeleteAddressResponse.SerializeToString,
            ),
            'GetAddresses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAddresses,
                    request_deserializer=nexura__pb2.GetAddressesRequest.FromString,
                    response_serializer=nexura__pb2.GetAddressesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.AddressService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AddressService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCountries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/GetCountries',
            nexura__pb2.Empty.SerializeToString,
            nexura__pb2.GetCountriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProvincesByCountry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/GetProvincesByCountry',
            nexura__pb2.GetProvincesByCountryRequest.SerializeToString,
            nexura__pb2.GetProvincesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistrictsByProvince(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/GetDistrictsByProvince',
            nexura__pb2.GetDistrictsByProvinceRequest.SerializeToString,
            nexura__pb2.GetDistrictsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWardsByDistrict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/GetWardsByDistrict',
            nexura__pb2.GetWardsByDistrictRequest.SerializeToString,
            nexura__pb2.GetWardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/AddAddress',
            nexura__pb2.AddAddressRequest.SerializeToString,
            nexura__pb2.AddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/UpdateAddress',
            nexura__pb2.UpdateAddressRequest.SerializeToString,
            nexura__pb2.AddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/DeleteAddress',
            nexura__pb2.DeleteAddressRequest.SerializeToString,
            nexura__pb2.DeleteAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAddresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AddressService/GetAddresses',
            nexura__pb2.GetAddressesRequest.SerializeToString,
            nexura__pb2.GetAddressesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UserServiceStub(object):
    """-----------------User service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUser = channel.unary_unary(
                '/nexuraTelemetry.UserService/GetUser',
                request_serializer=nexura__pb2.GetUserRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetUserResponse.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/nexuraTelemetry.UserService/UpdateUser',
                request_serializer=nexura__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=nexura__pb2.UpdateUserResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/nexuraTelemetry.UserService/DeleteUser',
                request_serializer=nexura__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=nexura__pb2.DeleteUserResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/nexuraTelemetry.UserService/RegisterUser',
                request_serializer=nexura__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=nexura__pb2.RegisterUserResponse.FromString,
                )
        self.LoginUser = channel.unary_unary(
                '/nexuraTelemetry.UserService/LoginUser',
                request_serializer=nexura__pb2.LoginUserRequest.SerializeToString,
                response_deserializer=nexura__pb2.LoginUserResponse.FromString,
                )
        self.ForgotPassword = channel.unary_unary(
                '/nexuraTelemetry.UserService/ForgotPassword',
                request_serializer=nexura__pb2.ForgotPasswordRequest.SerializeToString,
                response_deserializer=nexura__pb2.ForgotPasswordResponse.FromString,
                )
        self.ValidateOTP = channel.unary_unary(
                '/nexuraTelemetry.UserService/ValidateOTP',
                request_serializer=nexura__pb2.ValidateOTPRequest.SerializeToString,
                response_deserializer=nexura__pb2.ValidateOTPResponse.FromString,
                )
        self.ResetPassword = channel.unary_unary(
                '/nexuraTelemetry.UserService/ResetPassword',
                request_serializer=nexura__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=nexura__pb2.ResetPasswordResponse.FromString,
                )
        self.VerifyAccount = channel.unary_unary(
                '/nexuraTelemetry.UserService/VerifyAccount',
                request_serializer=nexura__pb2.VerifyAccountRequest.SerializeToString,
                response_deserializer=nexura__pb2.VerifyAccountResponse.FromString,
                )


class UserServiceServicer(object):
    """-----------------User service-----------------

    """

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForgotPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateOTP(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=nexura__pb2.GetUserRequest.FromString,
                    response_serializer=nexura__pb2.GetUserResponse.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=nexura__pb2.UpdateUserRequest.FromString,
                    response_serializer=nexura__pb2.UpdateUserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=nexura__pb2.DeleteUserRequest.FromString,
                    response_serializer=nexura__pb2.DeleteUserResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=nexura__pb2.RegisterUserRequest.FromString,
                    response_serializer=nexura__pb2.RegisterUserResponse.SerializeToString,
            ),
            'LoginUser': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginUser,
                    request_deserializer=nexura__pb2.LoginUserRequest.FromString,
                    response_serializer=nexura__pb2.LoginUserResponse.SerializeToString,
            ),
            'ForgotPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ForgotPassword,
                    request_deserializer=nexura__pb2.ForgotPasswordRequest.FromString,
                    response_serializer=nexura__pb2.ForgotPasswordResponse.SerializeToString,
            ),
            'ValidateOTP': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateOTP,
                    request_deserializer=nexura__pb2.ValidateOTPRequest.FromString,
                    response_serializer=nexura__pb2.ValidateOTPResponse.SerializeToString,
            ),
            'ResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetPassword,
                    request_deserializer=nexura__pb2.ResetPasswordRequest.FromString,
                    response_serializer=nexura__pb2.ResetPasswordResponse.SerializeToString,
            ),
            'VerifyAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAccount,
                    request_deserializer=nexura__pb2.VerifyAccountRequest.FromString,
                    response_serializer=nexura__pb2.VerifyAccountResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """-----------------User service-----------------

    """

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/GetUser',
            nexura__pb2.GetUserRequest.SerializeToString,
            nexura__pb2.GetUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/UpdateUser',
            nexura__pb2.UpdateUserRequest.SerializeToString,
            nexura__pb2.UpdateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/DeleteUser',
            nexura__pb2.DeleteUserRequest.SerializeToString,
            nexura__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/RegisterUser',
            nexura__pb2.RegisterUserRequest.SerializeToString,
            nexura__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/LoginUser',
            nexura__pb2.LoginUserRequest.SerializeToString,
            nexura__pb2.LoginUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ForgotPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/ForgotPassword',
            nexura__pb2.ForgotPasswordRequest.SerializeToString,
            nexura__pb2.ForgotPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValidateOTP(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/ValidateOTP',
            nexura__pb2.ValidateOTPRequest.SerializeToString,
            nexura__pb2.ValidateOTPResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/ResetPassword',
            nexura__pb2.ResetPasswordRequest.SerializeToString,
            nexura__pb2.ResetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.UserService/VerifyAccount',
            nexura__pb2.VerifyAccountRequest.SerializeToString,
            nexura__pb2.VerifyAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CartServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCart = channel.unary_unary(
                '/nexuraTelemetry.CartService/GetCart',
                request_serializer=nexura__pb2.GetCartRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetCartResponse.FromString,
                )
        self.AddItem = channel.unary_unary(
                '/nexuraTelemetry.CartService/AddItem',
                request_serializer=nexura__pb2.AddItemRequest.SerializeToString,
                response_deserializer=nexura__pb2.AddItemResponse.FromString,
                )
        self.UpdateItem = channel.unary_unary(
                '/nexuraTelemetry.CartService/UpdateItem',
                request_serializer=nexura__pb2.UpdateItemRequest.SerializeToString,
                response_deserializer=nexura__pb2.UpdateItemResponse.FromString,
                )
        self.RemoveItem = channel.unary_unary(
                '/nexuraTelemetry.CartService/RemoveItem',
                request_serializer=nexura__pb2.RemoveItemRequest.SerializeToString,
                response_deserializer=nexura__pb2.RemoveItemResponse.FromString,
                )
        self.ClearCart = channel.unary_unary(
                '/nexuraTelemetry.CartService/ClearCart',
                request_serializer=nexura__pb2.ClearCartRequest.SerializeToString,
                response_deserializer=nexura__pb2.ClearCartResponse.FromString,
                )
        self.ReserveItems = channel.unary_unary(
                '/nexuraTelemetry.CartService/ReserveItems',
                request_serializer=nexura__pb2.ReserveItemsRequest.SerializeToString,
                response_deserializer=nexura__pb2.ReserveItemsResponse.FromString,
                )
        self.ReleaseItems = channel.unary_unary(
                '/nexuraTelemetry.CartService/ReleaseItems',
                request_serializer=nexura__pb2.ReleaseItemsRequest.SerializeToString,
                response_deserializer=nexura__pb2.ReleaseItemsResponse.FromString,
                )


class CartServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CartServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCart,
                    request_deserializer=nexura__pb2.GetCartRequest.FromString,
                    response_serializer=nexura__pb2.GetCartResponse.SerializeToString,
            ),
            'AddItem': grpc.unary_unary_rpc_method_handler(
                    servicer.AddItem,
                    request_deserializer=nexura__pb2.AddItemRequest.FromString,
                    response_serializer=nexura__pb2.AddItemResponse.SerializeToString,
            ),
            'UpdateItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateItem,
                    request_deserializer=nexura__pb2.UpdateItemRequest.FromString,
                    response_serializer=nexura__pb2.UpdateItemResponse.SerializeToString,
            ),
            'RemoveItem': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveItem,
                    request_deserializer=nexura__pb2.RemoveItemRequest.FromString,
                    response_serializer=nexura__pb2.RemoveItemResponse.SerializeToString,
            ),
            'ClearCart': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCart,
                    request_deserializer=nexura__pb2.ClearCartRequest.FromString,
                    response_serializer=nexura__pb2.ClearCartResponse.SerializeToString,
            ),
            'ReserveItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveItems,
                    request_deserializer=nexura__pb2.ReserveItemsRequest.FromString,
                    response_serializer=nexura__pb2.ReserveItemsResponse.SerializeToString,
            ),
            'ReleaseItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseItems,
                    request_deserializer=nexura__pb2.ReleaseItemsRequest.FromString,
                    response_serializer=nexura__pb2.ReleaseItemsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.CartService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CartService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/GetCart',
            nexura__pb2.GetCartRequest.SerializeToString,
            nexura__pb2.GetCartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/AddItem',
            nexura__pb2.AddItemRequest.SerializeToString,
            nexura__pb2.AddItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/UpdateItem',
            nexura__pb2.UpdateItemRequest.SerializeToString,
            nexura__pb2.UpdateItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/RemoveItem',
            nexura__pb2.RemoveItemRequest.SerializeToString,
            nexura__pb2.RemoveItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/ClearCart',
            nexura__pb2.ClearCartRequest.SerializeToString,
            nexura__pb2.ClearCartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/ReserveItems',
            nexura__pb2.ReserveItemsRequest.SerializeToString,
            nexura__pb2.ReserveItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CartService/ReleaseItems',
            nexura__pb2.ReleaseItemsRequest.SerializeToString,
            nexura__pb2.ReleaseItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RecommendationServiceStub(object):
    """---------------Recommendation service----------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListRecommendations = channel.unary_unary(
                '/nexuraTelemetry.RecommendationService/ListRecommendations',
                request_serializer=nexura__pb2.ListRecommendationsRequest.SerializeToString,
                response_deserializer=nexura__pb2.ListRecommendationsResponse.FromString,
                )


class RecommendationServiceServicer(object):
    """---------------Recommendation service----------

    """

    def ListRecommendations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecommendationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecommendations,
                    request_deserializer=nexura__pb2.ListRecommendationsRequest.FromString,
                    response_serializer=nexura__pb2.ListRecommendationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.RecommendationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RecommendationService(object):
    """---------------Recommendation service----------

    """

    @staticmethod
    def ListRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.RecommendationService/ListRecommendations',
            nexura__pb2.ListRecommendationsRequest.SerializeToString,
            nexura__pb2.ListRecommendationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ProductCatalogServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProduct = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/CreateProduct',
                request_serializer=nexura__pb2.CreateProductRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateProductResponse.FromString,
                )
        self.UpdateProduct = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/UpdateProduct',
                request_serializer=nexura__pb2.UpdateProductRequest.SerializeToString,
                response_deserializer=nexura__pb2.UpdateProductResponse.FromString,
                )
        self.DeleteProduct = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/DeleteProduct',
                request_serializer=nexura__pb2.DeleteProductRequest.SerializeToString,
                response_deserializer=nexura__pb2.DeleteProductResponse.FromString,
                )
        self.CreateVariant = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/CreateVariant',
                request_serializer=nexura__pb2.CreateVariantRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateVariantResponse.FromString,
                )
        self.GetProductById = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetProductById',
                request_serializer=nexura__pb2.GetProductByIdRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetProductResponse.FromString,
                )
        self.GetProductBySlug = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetProductBySlug',
                request_serializer=nexura__pb2.GetProductBySlugRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetProductResponse.FromString,
                )
        self.ListProducts = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/ListProducts',
                request_serializer=nexura__pb2.ListProductsRequest.SerializeToString,
                response_deserializer=nexura__pb2.ListProductsResponse.FromString,
                )
        self.CreateBrand = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/CreateBrand',
                request_serializer=nexura__pb2.CreateBrandRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateBrandResponse.FromString,
                )
        self.NewBrand = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/NewBrand',
                request_serializer=nexura__pb2.NewBrandRequest.SerializeToString,
                response_deserializer=nexura__pb2.NewBrandResponse.FromString,
                )
        self.RemoveBrand = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/RemoveBrand',
                request_serializer=nexura__pb2.RemoveBrandRequest.SerializeToString,
                response_deserializer=nexura__pb2.RemoveBrandResponse.FromString,
                )
        self.GetAllBrand = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetAllBrand',
                request_serializer=nexura__pb2.Empty.SerializeToString,
                response_deserializer=nexura__pb2.GetAllBrandResponse.FromString,
                )
        self.GetVariantsForCart = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetVariantsForCart',
                request_serializer=nexura__pb2.GetVariantsForCartRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetVariantsForCartResponse.FromString,
                )
        self.CreateCategory = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/CreateCategory',
                request_serializer=nexura__pb2.CreateCategoryRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateCategoryResponse.FromString,
                )
        self.UpdateCategory = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/UpdateCategory',
                request_serializer=nexura__pb2.UpdateCategoryRequest.SerializeToString,
                response_deserializer=nexura__pb2.UpdateCategoryResponse.FromString,
                )
        self.DeleteCategory = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/DeleteCategory',
                request_serializer=nexura__pb2.DeleteCategoryRequest.SerializeToString,
                response_deserializer=nexura__pb2.DeleteCategoryResponse.FromString,
                )
        self.GetAllCategory = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetAllCategory',
                request_serializer=nexura__pb2.Empty.SerializeToString,
                response_deserializer=nexura__pb2.GetAllCategoryResponse.FromString,
                )
        self.GetProductAttributes = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetProductAttributes',
                request_serializer=nexura__pb2.GetProductAttributesRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetProductAttributesResponse.FromString,
                )
        self.UpdateProductAttributes = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/UpdateProductAttributes',
                request_serializer=nexura__pb2.UpdateProductAttributesRequest.SerializeToString,
                response_deserializer=nexura__pb2.UpdateProductAttributesResponse.FromString,
                )
        self.DeleteProductAttributes = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/DeleteProductAttributes',
                request_serializer=nexura__pb2.DeleteProductAttributesRequest.SerializeToString,
                response_deserializer=nexura__pb2.DeleteProductAttributesResponse.FromString,
                )
        self.CreateProductAttribute = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/CreateProductAttribute',
                request_serializer=nexura__pb2.CreateProductAttributeRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateProductAttributeResponse.FromString,
                )
        self.GetWarehouses = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/GetWarehouses',
                request_serializer=nexura__pb2.Empty.SerializeToString,
                response_deserializer=nexura__pb2.GetWarehousesResponse.FromString,
                )
        self.ReserveStock = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/ReserveStock',
                request_serializer=nexura__pb2.ReserveStockRequest.SerializeToString,
                response_deserializer=nexura__pb2.ReserveStockResponse.FromString,
                )
        self.ReleaseStock = channel.unary_unary(
                '/nexuraTelemetry.ProductCatalogService/ReleaseStock',
                request_serializer=nexura__pb2.ReleaseStockRequest.SerializeToString,
                response_deserializer=nexura__pb2.ReleaseStockResponse.FromString,
                )


class ProductCatalogServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVariant(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductBySlug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllBrand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVariantsForCart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllCategory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProductAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteProductAttributes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProductAttribute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWarehouses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductCatalogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProduct,
                    request_deserializer=nexura__pb2.CreateProductRequest.FromString,
                    response_serializer=nexura__pb2.CreateProductResponse.SerializeToString,
            ),
            'UpdateProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProduct,
                    request_deserializer=nexura__pb2.UpdateProductRequest.FromString,
                    response_serializer=nexura__pb2.UpdateProductResponse.SerializeToString,
            ),
            'DeleteProduct': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProduct,
                    request_deserializer=nexura__pb2.DeleteProductRequest.FromString,
                    response_serializer=nexura__pb2.DeleteProductResponse.SerializeToString,
            ),
            'CreateVariant': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVariant,
                    request_deserializer=nexura__pb2.CreateVariantRequest.FromString,
                    response_serializer=nexura__pb2.CreateVariantResponse.SerializeToString,
            ),
            'GetProductById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductById,
                    request_deserializer=nexura__pb2.GetProductByIdRequest.FromString,
                    response_serializer=nexura__pb2.GetProductResponse.SerializeToString,
            ),
            'GetProductBySlug': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductBySlug,
                    request_deserializer=nexura__pb2.GetProductBySlugRequest.FromString,
                    response_serializer=nexura__pb2.GetProductResponse.SerializeToString,
            ),
            'ListProducts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListProducts,
                    request_deserializer=nexura__pb2.ListProductsRequest.FromString,
                    response_serializer=nexura__pb2.ListProductsResponse.SerializeToString,
            ),
            'CreateBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBrand,
                    request_deserializer=nexura__pb2.CreateBrandRequest.FromString,
                    response_serializer=nexura__pb2.CreateBrandResponse.SerializeToString,
            ),
            'NewBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.NewBrand,
                    request_deserializer=nexura__pb2.NewBrandRequest.FromString,
                    response_serializer=nexura__pb2.NewBrandResponse.SerializeToString,
            ),
            'RemoveBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveBrand,
                    request_deserializer=nexura__pb2.RemoveBrandRequest.FromString,
                    response_serializer=nexura__pb2.RemoveBrandResponse.SerializeToString,
            ),
            'GetAllBrand': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllBrand,
                    request_deserializer=nexura__pb2.Empty.FromString,
                    response_serializer=nexura__pb2.GetAllBrandResponse.SerializeToString,
            ),
            'GetVariantsForCart': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVariantsForCart,
                    request_deserializer=nexura__pb2.GetVariantsForCartRequest.FromString,
                    response_serializer=nexura__pb2.GetVariantsForCartResponse.SerializeToString,
            ),
            'CreateCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCategory,
                    request_deserializer=nexura__pb2.CreateCategoryRequest.FromString,
                    response_serializer=nexura__pb2.CreateCategoryResponse.SerializeToString,
            ),
            'UpdateCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCategory,
                    request_deserializer=nexura__pb2.UpdateCategoryRequest.FromString,
                    response_serializer=nexura__pb2.UpdateCategoryResponse.SerializeToString,
            ),
            'DeleteCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCategory,
                    request_deserializer=nexura__pb2.DeleteCategoryRequest.FromString,
                    response_serializer=nexura__pb2.DeleteCategoryResponse.SerializeToString,
            ),
            'GetAllCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllCategory,
                    request_deserializer=nexura__pb2.Empty.FromString,
                    response_serializer=nexura__pb2.GetAllCategoryResponse.SerializeToString,
            ),
            'GetProductAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductAttributes,
                    request_deserializer=nexura__pb2.GetProductAttributesRequest.FromString,
                    response_serializer=nexura__pb2.GetProductAttributesResponse.SerializeToString,
            ),
            'UpdateProductAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProductAttributes,
                    request_deserializer=nexura__pb2.UpdateProductAttributesRequest.FromString,
                    response_serializer=nexura__pb2.UpdateProductAttributesResponse.SerializeToString,
            ),
            'DeleteProductAttributes': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteProductAttributes,
                    request_deserializer=nexura__pb2.DeleteProductAttributesRequest.FromString,
                    response_serializer=nexura__pb2.DeleteProductAttributesResponse.SerializeToString,
            ),
            'CreateProductAttribute': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProductAttribute,
                    request_deserializer=nexura__pb2.CreateProductAttributeRequest.FromString,
                    response_serializer=nexura__pb2.CreateProductAttributeResponse.SerializeToString,
            ),
            'GetWarehouses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWarehouses,
                    request_deserializer=nexura__pb2.Empty.FromString,
                    response_serializer=nexura__pb2.GetWarehousesResponse.SerializeToString,
            ),
            'ReserveStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveStock,
                    request_deserializer=nexura__pb2.ReserveStockRequest.FromString,
                    response_serializer=nexura__pb2.ReserveStockResponse.SerializeToString,
            ),
            'ReleaseStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseStock,
                    request_deserializer=nexura__pb2.ReleaseStockRequest.FromString,
                    response_serializer=nexura__pb2.ReleaseStockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.ProductCatalogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProductCatalogService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/CreateProduct',
            nexura__pb2.CreateProductRequest.SerializeToString,
            nexura__pb2.CreateProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/UpdateProduct',
            nexura__pb2.UpdateProductRequest.SerializeToString,
            nexura__pb2.UpdateProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/DeleteProduct',
            nexura__pb2.DeleteProductRequest.SerializeToString,
            nexura__pb2.DeleteProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVariant(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/CreateVariant',
            nexura__pb2.CreateVariantRequest.SerializeToString,
            nexura__pb2.CreateVariantResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetProductById',
            nexura__pb2.GetProductByIdRequest.SerializeToString,
            nexura__pb2.GetProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductBySlug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetProductBySlug',
            nexura__pb2.GetProductBySlugRequest.SerializeToString,
            nexura__pb2.GetProductResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/ListProducts',
            nexura__pb2.ListProductsRequest.SerializeToString,
            nexura__pb2.ListProductsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/CreateBrand',
            nexura__pb2.CreateBrandRequest.SerializeToString,
            nexura__pb2.CreateBrandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/NewBrand',
            nexura__pb2.NewBrandRequest.SerializeToString,
            nexura__pb2.NewBrandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/RemoveBrand',
            nexura__pb2.RemoveBrandRequest.SerializeToString,
            nexura__pb2.RemoveBrandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllBrand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetAllBrand',
            nexura__pb2.Empty.SerializeToString,
            nexura__pb2.GetAllBrandResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetVariantsForCart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetVariantsForCart',
            nexura__pb2.GetVariantsForCartRequest.SerializeToString,
            nexura__pb2.GetVariantsForCartResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/CreateCategory',
            nexura__pb2.CreateCategoryRequest.SerializeToString,
            nexura__pb2.CreateCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/UpdateCategory',
            nexura__pb2.UpdateCategoryRequest.SerializeToString,
            nexura__pb2.UpdateCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/DeleteCategory',
            nexura__pb2.DeleteCategoryRequest.SerializeToString,
            nexura__pb2.DeleteCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetAllCategory',
            nexura__pb2.Empty.SerializeToString,
            nexura__pb2.GetAllCategoryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetProductAttributes',
            nexura__pb2.GetProductAttributesRequest.SerializeToString,
            nexura__pb2.GetProductAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProductAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/UpdateProductAttributes',
            nexura__pb2.UpdateProductAttributesRequest.SerializeToString,
            nexura__pb2.UpdateProductAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteProductAttributes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/DeleteProductAttributes',
            nexura__pb2.DeleteProductAttributesRequest.SerializeToString,
            nexura__pb2.DeleteProductAttributesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProductAttribute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/CreateProductAttribute',
            nexura__pb2.CreateProductAttributeRequest.SerializeToString,
            nexura__pb2.CreateProductAttributeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWarehouses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/GetWarehouses',
            nexura__pb2.Empty.SerializeToString,
            nexura__pb2.GetWarehousesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/ReserveStock',
            nexura__pb2.ReserveStockRequest.SerializeToString,
            nexura__pb2.ReserveStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ProductCatalogService/ReleaseStock',
            nexura__pb2.ReleaseStockRequest.SerializeToString,
            nexura__pb2.ReleaseStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ShippingServiceStub(object):
    """---------------Shipping Service----------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetQuote = channel.unary_unary(
                '/nexuraTelemetry.ShippingService/GetQuote',
                request_serializer=nexura__pb2.GetQuoteRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetQuoteResponse.FromString,
                )
        self.ShipOrder = channel.unary_unary(
                '/nexuraTelemetry.ShippingService/ShipOrder',
                request_serializer=nexura__pb2.ShipOrderRequest.SerializeToString,
                response_deserializer=nexura__pb2.ShipOrderResponse.FromString,
                )
        self.CancelShipment = channel.unary_unary(
                '/nexuraTelemetry.ShippingService/CancelShipment',
                request_serializer=nexura__pb2.CancelShipmentRequest.SerializeToString,
                response_deserializer=nexura__pb2.CancelShipmentResponse.FromString,
                )


class ShippingServiceServicer(object):
    """---------------Shipping Service----------

    """

    def GetQuote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShipOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelShipment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShippingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetQuote': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuote,
                    request_deserializer=nexura__pb2.GetQuoteRequest.FromString,
                    response_serializer=nexura__pb2.GetQuoteResponse.SerializeToString,
            ),
            'ShipOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ShipOrder,
                    request_deserializer=nexura__pb2.ShipOrderRequest.FromString,
                    response_serializer=nexura__pb2.ShipOrderResponse.SerializeToString,
            ),
            'CancelShipment': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelShipment,
                    request_deserializer=nexura__pb2.CancelShipmentRequest.FromString,
                    response_serializer=nexura__pb2.CancelShipmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.ShippingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ShippingService(object):
    """---------------Shipping Service----------

    """

    @staticmethod
    def GetQuote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ShippingService/GetQuote',
            nexura__pb2.GetQuoteRequest.SerializeToString,
            nexura__pb2.GetQuoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShipOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ShippingService/ShipOrder',
            nexura__pb2.ShipOrderRequest.SerializeToString,
            nexura__pb2.ShipOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelShipment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.ShippingService/CancelShipment',
            nexura__pb2.CancelShipmentRequest.SerializeToString,
            nexura__pb2.CancelShipmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CurrencyServiceStub(object):
    """-----------------Currency service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSupportedCurrencies = channel.unary_unary(
                '/nexuraTelemetry.CurrencyService/GetSupportedCurrencies',
                request_serializer=nexura__pb2.Empty.SerializeToString,
                response_deserializer=nexura__pb2.GetSupportedCurrenciesResponse.FromString,
                )
        self.Convert = channel.unary_unary(
                '/nexuraTelemetry.CurrencyService/Convert',
                request_serializer=nexura__pb2.CurrencyConversionRequest.SerializeToString,
                response_deserializer=nexura__pb2.Money.FromString,
                )


class CurrencyServiceServicer(object):
    """-----------------Currency service-----------------

    """

    def GetSupportedCurrencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Convert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CurrencyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSupportedCurrencies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedCurrencies,
                    request_deserializer=nexura__pb2.Empty.FromString,
                    response_serializer=nexura__pb2.GetSupportedCurrenciesResponse.SerializeToString,
            ),
            'Convert': grpc.unary_unary_rpc_method_handler(
                    servicer.Convert,
                    request_deserializer=nexura__pb2.CurrencyConversionRequest.FromString,
                    response_serializer=nexura__pb2.Money.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.CurrencyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CurrencyService(object):
    """-----------------Currency service-----------------

    """

    @staticmethod
    def GetSupportedCurrencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CurrencyService/GetSupportedCurrencies',
            nexura__pb2.Empty.SerializeToString,
            nexura__pb2.GetSupportedCurrenciesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Convert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.CurrencyService/Convert',
            nexura__pb2.CurrencyConversionRequest.SerializeToString,
            nexura__pb2.Money.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EmailServiceStub(object):
    """-------------Email service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendOrderConfirmation = channel.unary_unary(
                '/nexuraTelemetry.EmailService/SendOrderConfirmation',
                request_serializer=nexura__pb2.SendOrderConfirmationRequest.SerializeToString,
                response_deserializer=nexura__pb2.Empty.FromString,
                )
        self.SendOTPResetPassword = channel.unary_unary(
                '/nexuraTelemetry.EmailService/SendOTPResetPassword',
                request_serializer=nexura__pb2.SendOTPResetPasswordRequest.SerializeToString,
                response_deserializer=nexura__pb2.SendOTPResetPasswordResponse.FromString,
                )
        self.SendWelcomeEmail = channel.unary_unary(
                '/nexuraTelemetry.EmailService/SendWelcomeEmail',
                request_serializer=nexura__pb2.SendWelcomeEmailRequest.SerializeToString,
                response_deserializer=nexura__pb2.SendWelcomeEmailResponse.FromString,
                )


class EmailServiceServicer(object):
    """-------------Email service-----------------

    """

    def SendOrderConfirmation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendOTPResetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendWelcomeEmail(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmailServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendOrderConfirmation': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOrderConfirmation,
                    request_deserializer=nexura__pb2.SendOrderConfirmationRequest.FromString,
                    response_serializer=nexura__pb2.Empty.SerializeToString,
            ),
            'SendOTPResetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SendOTPResetPassword,
                    request_deserializer=nexura__pb2.SendOTPResetPasswordRequest.FromString,
                    response_serializer=nexura__pb2.SendOTPResetPasswordResponse.SerializeToString,
            ),
            'SendWelcomeEmail': grpc.unary_unary_rpc_method_handler(
                    servicer.SendWelcomeEmail,
                    request_deserializer=nexura__pb2.SendWelcomeEmailRequest.FromString,
                    response_serializer=nexura__pb2.SendWelcomeEmailResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.EmailService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmailService(object):
    """-------------Email service-----------------

    """

    @staticmethod
    def SendOrderConfirmation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.EmailService/SendOrderConfirmation',
            nexura__pb2.SendOrderConfirmationRequest.SerializeToString,
            nexura__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendOTPResetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.EmailService/SendOTPResetPassword',
            nexura__pb2.SendOTPResetPasswordRequest.SerializeToString,
            nexura__pb2.SendOTPResetPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendWelcomeEmail(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.EmailService/SendWelcomeEmail',
            nexura__pb2.SendWelcomeEmailRequest.SerializeToString,
            nexura__pb2.SendWelcomeEmailResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdServiceStub(object):
    """------------Ad service------------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAds = channel.unary_unary(
                '/nexuraTelemetry.AdService/GetAds',
                request_serializer=nexura__pb2.AdRequest.SerializeToString,
                response_deserializer=nexura__pb2.AdResponse.FromString,
                )


class AdServiceServicer(object):
    """------------Ad service------------------

    """

    def GetAds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAds,
                    request_deserializer=nexura__pb2.AdRequest.FromString,
                    response_serializer=nexura__pb2.AdResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.AdService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdService(object):
    """------------Ad service------------------

    """

    @staticmethod
    def GetAds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.AdService/GetAds',
            nexura__pb2.AdRequest.SerializeToString,
            nexura__pb2.AdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HealthServiceStub(object):
    """Health service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/nexuraTelemetry.HealthService/Check',
                request_serializer=nexura__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=nexura__pb2.HealthCheckResponse.FromString,
                )
        self.Watch = channel.unary_stream(
                '/nexuraTelemetry.HealthService/Watch',
                request_serializer=nexura__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=nexura__pb2.HealthCheckResponse.FromString,
                )


class HealthServiceServicer(object):
    """Health service definition
    """

    def Check(self, request, context):
        """Check is the health checking method for all services
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Watch(self, request, context):
        """Watch is for watching health status changes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=nexura__pb2.HealthCheckRequest.FromString,
                    response_serializer=nexura__pb2.HealthCheckResponse.SerializeToString,
            ),
            'Watch': grpc.unary_stream_rpc_method_handler(
                    servicer.Watch,
                    request_deserializer=nexura__pb2.HealthCheckRequest.FromString,
                    response_serializer=nexura__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.HealthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """Health service definition
    """

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.HealthService/Check',
            nexura__pb2.HealthCheckRequest.SerializeToString,
            nexura__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/nexuraTelemetry.HealthService/Watch',
            nexura__pb2.HealthCheckRequest.SerializeToString,
            nexura__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrderServiceStub(object):
    """---------------Order service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/nexuraTelemetry.OrderService/CreateOrder',
                request_serializer=nexura__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=nexura__pb2.CreateOrderResponse.FromString,
                )
        self.GetOrderStatus = channel.unary_unary(
                '/nexuraTelemetry.OrderService/GetOrderStatus',
                request_serializer=nexura__pb2.GetOrderStatusRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetOrderStatusResponse.FromString,
                )
        self.CancelOrder = channel.unary_unary(
                '/nexuraTelemetry.OrderService/CancelOrder',
                request_serializer=nexura__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=nexura__pb2.CancelOrderResponse.FromString,
                )


class OrderServiceServicer(object):
    """---------------Order service-----------------

    """

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=nexura__pb2.CreateOrderRequest.FromString,
                    response_serializer=nexura__pb2.CreateOrderResponse.SerializeToString,
            ),
            'GetOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrderStatus,
                    request_deserializer=nexura__pb2.GetOrderStatusRequest.FromString,
                    response_serializer=nexura__pb2.GetOrderStatusResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=nexura__pb2.CancelOrderRequest.FromString,
                    response_serializer=nexura__pb2.CancelOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """---------------Order service-----------------

    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.OrderService/CreateOrder',
            nexura__pb2.CreateOrderRequest.SerializeToString,
            nexura__pb2.CreateOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.OrderService/GetOrderStatus',
            nexura__pb2.GetOrderStatusRequest.SerializeToString,
            nexura__pb2.GetOrderStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.OrderService/CancelOrder',
            nexura__pb2.CancelOrderRequest.SerializeToString,
            nexura__pb2.CancelOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PaymentServiceStub(object):
    """---------------Payment service-----------------

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitiatePayment = channel.unary_unary(
                '/nexuraTelemetry.PaymentService/InitiatePayment',
                request_serializer=nexura__pb2.InitiatePaymentRequest.SerializeToString,
                response_deserializer=nexura__pb2.InitiatePaymentResponse.FromString,
                )
        self.VerifyPayment = channel.unary_unary(
                '/nexuraTelemetry.PaymentService/VerifyPayment',
                request_serializer=nexura__pb2.VerifyPaymentRequest.SerializeToString,
                response_deserializer=nexura__pb2.VerifyPaymentResponse.FromString,
                )
        self.CancelPayment = channel.unary_unary(
                '/nexuraTelemetry.PaymentService/CancelPayment',
                request_serializer=nexura__pb2.CancelPaymentRequest.SerializeToString,
                response_deserializer=nexura__pb2.CancelPaymentResponse.FromString,
                )
        self.RefundPayment = channel.unary_unary(
                '/nexuraTelemetry.PaymentService/RefundPayment',
                request_serializer=nexura__pb2.RefundPaymentRequest.SerializeToString,
                response_deserializer=nexura__pb2.RefundPaymentResponse.FromString,
                )
        self.GetPaymentStatus = channel.unary_unary(
                '/nexuraTelemetry.PaymentService/GetPaymentStatus',
                request_serializer=nexura__pb2.GetPaymentStatusRequest.SerializeToString,
                response_deserializer=nexura__pb2.GetPaymentStatusResponse.FromString,
                )


class PaymentServiceServicer(object):
    """---------------Payment service-----------------

    """

    def InitiatePayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitiatePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiatePayment,
                    request_deserializer=nexura__pb2.InitiatePaymentRequest.FromString,
                    response_serializer=nexura__pb2.InitiatePaymentResponse.SerializeToString,
            ),
            'VerifyPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyPayment,
                    request_deserializer=nexura__pb2.VerifyPaymentRequest.FromString,
                    response_serializer=nexura__pb2.VerifyPaymentResponse.SerializeToString,
            ),
            'CancelPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelPayment,
                    request_deserializer=nexura__pb2.CancelPaymentRequest.FromString,
                    response_serializer=nexura__pb2.CancelPaymentResponse.SerializeToString,
            ),
            'RefundPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundPayment,
                    request_deserializer=nexura__pb2.RefundPaymentRequest.FromString,
                    response_serializer=nexura__pb2.RefundPaymentResponse.SerializeToString,
            ),
            'GetPaymentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentStatus,
                    request_deserializer=nexura__pb2.GetPaymentStatusRequest.FromString,
                    response_serializer=nexura__pb2.GetPaymentStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nexuraTelemetry.PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """---------------Payment service-----------------

    """

    @staticmethod
    def InitiatePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.PaymentService/InitiatePayment',
            nexura__pb2.InitiatePaymentRequest.SerializeToString,
            nexura__pb2.InitiatePaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.PaymentService/VerifyPayment',
            nexura__pb2.VerifyPaymentRequest.SerializeToString,
            nexura__pb2.VerifyPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.PaymentService/CancelPayment',
            nexura__pb2.CancelPaymentRequest.SerializeToString,
            nexura__pb2.CancelPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.PaymentService/RefundPayment',
            nexura__pb2.RefundPaymentRequest.SerializeToString,
            nexura__pb2.RefundPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPaymentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/nexuraTelemetry.PaymentService/GetPaymentStatus',
            nexura__pb2.GetPaymentStatusRequest.SerializeToString,
            nexura__pb2.GetPaymentStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
