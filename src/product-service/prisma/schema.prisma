// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "dist/client"
  output   = "../src/db/prisma-client"
}

datasource db {
  provider = "mongodb"
  // url      = env("PRODUCT_SERVICE_DB_URL")
  url      = "mongodb+srv://mailrac96:tZPlrTOzAprA7bAY@product-serivce-db.tdhp5q9.mongodb.net/product-serivce-db?retryWrites=true&w=majority"
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String    @db.String
  costPrice   Float
  basePrice   Float
  sku         String    @unique
  barcode     String?
  featured    Boolean   @default(false)
  status      String    @default("draft")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  taxable     Boolean   @default(true)
  shippable   Boolean   @default(true)
  categories  String[]  @db.ObjectId

  // Relations
  categoryIds  String[]  @db.ObjectId
  images       ProductImage[]
  variants     ProductVariant[]
  attributes   ProductAttribute[]
  sizeCharts   SizeChart[]
  brand        Brand?    @relation(fields: [brandId], references: [id])
  brandId      String?   @db.ObjectId
  dimensions   ProductDimension?
  seo          ProductSEO?
  productTags  ProductTag[]
  relatedFrom  RelatedProduct[] @relation("FromProduct")
  relatedTo    RelatedProduct[] @relation("ToProduct")
  wishlists    Wishlist[]       @relation("ProductWishlists")
  @@index([id, slug, status])
}

model RelatedProduct {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  fromProduct    Product  @relation("FromProduct", fields: [fromProductId], references: [id])
  fromProductId  String   @db.ObjectId
  toProduct      Product  @relation("ToProduct", fields: [toProductId], references: [id])
  toProductId    String   @db.ObjectId

  @@unique([fromProductId, toProductId]) // prevent duplicates
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  blurhash  String
  isMain    Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@index([productId])
}

model Wishlist {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  product   Product  @relation("ProductWishlists", fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // Prevent duplicate wishlist items
  @@index([userId])
  @@index([productId])
}

model Stock {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int      @default(0)
  reserved  Int      @default(0)
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String   @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  items     ReservationItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ReservationItem {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity      Int
  variant       ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId     String      @db.ObjectId
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId String      @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([variantId])
  @@index([reservationId])
}

model ProductVariant {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  sku              String   @unique
  price            Float
  lowStockThreshold Int
  colorValue       String?
  colorName        String?
  attributes       VariantAttribute[]
  attributesIds    String[]
  imageIds         String[]
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String   @db.ObjectId
  warehouse        Warehouse @relation(fields: [warehouseId], references: [id])
  warehouseId      String   @db.ObjectId
  stock            Stock?
  reservationItems ReservationItem[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([productId])
}

model VariantAttribute {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  extraValue String?
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String   @db.ObjectId
}

model ProductAttribute {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  required  Boolean  @default(false)
  visible   Boolean  @default(true)
  variantable Boolean @default(false)
  filterable Boolean @default(false)
  searchable Boolean @default(false)
  displayOrder Int @default(0)
  values    String[]
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model SizeChart {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String
  description String?  @db.String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String   @db.ObjectId
  columns     SizeChartColumn[]
  rows        SizeChartRow[]
  images      SizeChartImage[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model SizeChartColumn {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       String
  unit       String?
  sizeChart  SizeChart @relation(fields: [sizeChartId], references: [id], onDelete: Cascade)
  sizeChartId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@index([sizeChartId])
}

model SizeChartRow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  values     Json
  sizeChart  SizeChart @relation(fields: [sizeChartId], references: [id], onDelete: Cascade)
  sizeChartId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@index([sizeChartId])
}

model SizeChartImage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  url        String
  name       String
  sizeChart  SizeChart @relation(fields: [sizeChartId], references: [id], onDelete: Cascade)
  sizeChartId String   @db.ObjectId
  createdAt  DateTime @default(now())

  @@index([sizeChartId])
}

model ProductDimension {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  length    Float
  width     Float
  height    Float
  weight    Float
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductSEO {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String   @db.String
  keywords    String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String   @db.ObjectId @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  parentId    String?    @db.ObjectId
  productIds  String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([parentId])
}

model Tag {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  productTags ProductTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([productId, tagId])
  @@index([productId])
  @@index([tagId])
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Warehouse {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String    @unique
  location      String[]
  address       String
  manager       String
  contact       String
  status        String    @default("active")
  variants      ProductVariant[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
}
