
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model RelatedProduct
 * 
 */
export type RelatedProduct = $Result.DefaultSelection<Prisma.$RelatedProductPayload>
/**
 * Model ProductImage
 * 
 */
export type ProductImage = $Result.DefaultSelection<Prisma.$ProductImagePayload>
/**
 * Model Wishlist
 * 
 */
export type Wishlist = $Result.DefaultSelection<Prisma.$WishlistPayload>
/**
 * Model Stock
 * 
 */
export type Stock = $Result.DefaultSelection<Prisma.$StockPayload>
/**
 * Model Reservation
 * 
 */
export type Reservation = $Result.DefaultSelection<Prisma.$ReservationPayload>
/**
 * Model ReservationItem
 * 
 */
export type ReservationItem = $Result.DefaultSelection<Prisma.$ReservationItemPayload>
/**
 * Model ProductVariant
 * 
 */
export type ProductVariant = $Result.DefaultSelection<Prisma.$ProductVariantPayload>
/**
 * Model VariantAttribute
 * 
 */
export type VariantAttribute = $Result.DefaultSelection<Prisma.$VariantAttributePayload>
/**
 * Model ProductAttribute
 * 
 */
export type ProductAttribute = $Result.DefaultSelection<Prisma.$ProductAttributePayload>
/**
 * Model SizeChart
 * 
 */
export type SizeChart = $Result.DefaultSelection<Prisma.$SizeChartPayload>
/**
 * Model SizeChartColumn
 * 
 */
export type SizeChartColumn = $Result.DefaultSelection<Prisma.$SizeChartColumnPayload>
/**
 * Model SizeChartRow
 * 
 */
export type SizeChartRow = $Result.DefaultSelection<Prisma.$SizeChartRowPayload>
/**
 * Model SizeChartImage
 * 
 */
export type SizeChartImage = $Result.DefaultSelection<Prisma.$SizeChartImagePayload>
/**
 * Model ProductDimension
 * 
 */
export type ProductDimension = $Result.DefaultSelection<Prisma.$ProductDimensionPayload>
/**
 * Model ProductSEO
 * 
 */
export type ProductSEO = $Result.DefaultSelection<Prisma.$ProductSEOPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model ProductTag
 * 
 */
export type ProductTag = $Result.DefaultSelection<Prisma.$ProductTagPayload>
/**
 * Model Brand
 * 
 */
export type Brand = $Result.DefaultSelection<Prisma.$BrandPayload>
/**
 * Model Warehouse
 * 
 */
export type Warehouse = $Result.DefaultSelection<Prisma.$WarehousePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Products
 * const products = await prisma.product.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Products
   * const products = await prisma.product.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.relatedProduct`: Exposes CRUD operations for the **RelatedProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RelatedProducts
    * const relatedProducts = await prisma.relatedProduct.findMany()
    * ```
    */
  get relatedProduct(): Prisma.RelatedProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productImage`: Exposes CRUD operations for the **ProductImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductImages
    * const productImages = await prisma.productImage.findMany()
    * ```
    */
  get productImage(): Prisma.ProductImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wishlist`: Exposes CRUD operations for the **Wishlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wishlists
    * const wishlists = await prisma.wishlist.findMany()
    * ```
    */
  get wishlist(): Prisma.WishlistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reservation`: Exposes CRUD operations for the **Reservation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reservations
    * const reservations = await prisma.reservation.findMany()
    * ```
    */
  get reservation(): Prisma.ReservationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reservationItem`: Exposes CRUD operations for the **ReservationItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReservationItems
    * const reservationItems = await prisma.reservationItem.findMany()
    * ```
    */
  get reservationItem(): Prisma.ReservationItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productVariant`: Exposes CRUD operations for the **ProductVariant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductVariants
    * const productVariants = await prisma.productVariant.findMany()
    * ```
    */
  get productVariant(): Prisma.ProductVariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.variantAttribute`: Exposes CRUD operations for the **VariantAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VariantAttributes
    * const variantAttributes = await prisma.variantAttribute.findMany()
    * ```
    */
  get variantAttribute(): Prisma.VariantAttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productAttribute`: Exposes CRUD operations for the **ProductAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductAttributes
    * const productAttributes = await prisma.productAttribute.findMany()
    * ```
    */
  get productAttribute(): Prisma.ProductAttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeChart`: Exposes CRUD operations for the **SizeChart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeCharts
    * const sizeCharts = await prisma.sizeChart.findMany()
    * ```
    */
  get sizeChart(): Prisma.SizeChartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeChartColumn`: Exposes CRUD operations for the **SizeChartColumn** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeChartColumns
    * const sizeChartColumns = await prisma.sizeChartColumn.findMany()
    * ```
    */
  get sizeChartColumn(): Prisma.SizeChartColumnDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeChartRow`: Exposes CRUD operations for the **SizeChartRow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeChartRows
    * const sizeChartRows = await prisma.sizeChartRow.findMany()
    * ```
    */
  get sizeChartRow(): Prisma.SizeChartRowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizeChartImage`: Exposes CRUD operations for the **SizeChartImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SizeChartImages
    * const sizeChartImages = await prisma.sizeChartImage.findMany()
    * ```
    */
  get sizeChartImage(): Prisma.SizeChartImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productDimension`: Exposes CRUD operations for the **ProductDimension** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductDimensions
    * const productDimensions = await prisma.productDimension.findMany()
    * ```
    */
  get productDimension(): Prisma.ProductDimensionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productSEO`: Exposes CRUD operations for the **ProductSEO** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSEOS
    * const productSEOS = await prisma.productSEO.findMany()
    * ```
    */
  get productSEO(): Prisma.ProductSEODelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productTag`: Exposes CRUD operations for the **ProductTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTags
    * const productTags = await prisma.productTag.findMany()
    * ```
    */
  get productTag(): Prisma.ProductTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.brand`: Exposes CRUD operations for the **Brand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Brands
    * const brands = await prisma.brand.findMany()
    * ```
    */
  get brand(): Prisma.BrandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.warehouse`: Exposes CRUD operations for the **Warehouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warehouses
    * const warehouses = await prisma.warehouse.findMany()
    * ```
    */
  get warehouse(): Prisma.WarehouseDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Product: 'Product',
    RelatedProduct: 'RelatedProduct',
    ProductImage: 'ProductImage',
    Wishlist: 'Wishlist',
    Stock: 'Stock',
    Reservation: 'Reservation',
    ReservationItem: 'ReservationItem',
    ProductVariant: 'ProductVariant',
    VariantAttribute: 'VariantAttribute',
    ProductAttribute: 'ProductAttribute',
    SizeChart: 'SizeChart',
    SizeChartColumn: 'SizeChartColumn',
    SizeChartRow: 'SizeChartRow',
    SizeChartImage: 'SizeChartImage',
    ProductDimension: 'ProductDimension',
    ProductSEO: 'ProductSEO',
    Category: 'Category',
    Tag: 'Tag',
    ProductTag: 'ProductTag',
    Brand: 'Brand',
    Warehouse: 'Warehouse'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "product" | "relatedProduct" | "productImage" | "wishlist" | "stock" | "reservation" | "reservationItem" | "productVariant" | "variantAttribute" | "productAttribute" | "sizeChart" | "sizeChartColumn" | "sizeChartRow" | "sizeChartImage" | "productDimension" | "productSEO" | "category" | "tag" | "productTag" | "brand" | "warehouse"
      txIsolationLevel: never
    }
    model: {
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      RelatedProduct: {
        payload: Prisma.$RelatedProductPayload<ExtArgs>
        fields: Prisma.RelatedProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RelatedProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RelatedProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          findFirst: {
            args: Prisma.RelatedProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RelatedProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          findMany: {
            args: Prisma.RelatedProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>[]
          }
          create: {
            args: Prisma.RelatedProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          createMany: {
            args: Prisma.RelatedProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RelatedProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          update: {
            args: Prisma.RelatedProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          deleteMany: {
            args: Prisma.RelatedProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RelatedProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RelatedProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RelatedProductPayload>
          }
          aggregate: {
            args: Prisma.RelatedProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRelatedProduct>
          }
          groupBy: {
            args: Prisma.RelatedProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<RelatedProductGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RelatedProductFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.RelatedProductAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.RelatedProductCountArgs<ExtArgs>
            result: $Utils.Optional<RelatedProductCountAggregateOutputType> | number
          }
        }
      }
      ProductImage: {
        payload: Prisma.$ProductImagePayload<ExtArgs>
        fields: Prisma.ProductImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findFirst: {
            args: Prisma.ProductImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findMany: {
            args: Prisma.ProductImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>[]
          }
          create: {
            args: Prisma.ProductImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          createMany: {
            args: Prisma.ProductImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          update: {
            args: Prisma.ProductImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          deleteMany: {
            args: Prisma.ProductImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          aggregate: {
            args: Prisma.ProductImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductImage>
          }
          groupBy: {
            args: Prisma.ProductImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductImageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductImageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductImageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductImageCountArgs<ExtArgs>
            result: $Utils.Optional<ProductImageCountAggregateOutputType> | number
          }
        }
      }
      Wishlist: {
        payload: Prisma.$WishlistPayload<ExtArgs>
        fields: Prisma.WishlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WishlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WishlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findFirst: {
            args: Prisma.WishlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WishlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          findMany: {
            args: Prisma.WishlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>[]
          }
          create: {
            args: Prisma.WishlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          createMany: {
            args: Prisma.WishlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WishlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          update: {
            args: Prisma.WishlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          deleteMany: {
            args: Prisma.WishlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WishlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WishlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WishlistPayload>
          }
          aggregate: {
            args: Prisma.WishlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWishlist>
          }
          groupBy: {
            args: Prisma.WishlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WishlistGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.WishlistFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.WishlistAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.WishlistCountArgs<ExtArgs>
            result: $Utils.Optional<WishlistCountAggregateOutputType> | number
          }
        }
      }
      Stock: {
        payload: Prisma.$StockPayload<ExtArgs>
        fields: Prisma.StockFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StockFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StockFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findFirst: {
            args: Prisma.StockFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StockFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          findMany: {
            args: Prisma.StockFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>[]
          }
          create: {
            args: Prisma.StockCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          createMany: {
            args: Prisma.StockCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StockDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          update: {
            args: Prisma.StockUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          deleteMany: {
            args: Prisma.StockDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StockUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StockUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StockPayload>
          }
          aggregate: {
            args: Prisma.StockAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStock>
          }
          groupBy: {
            args: Prisma.StockGroupByArgs<ExtArgs>
            result: $Utils.Optional<StockGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.StockFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.StockAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.StockCountArgs<ExtArgs>
            result: $Utils.Optional<StockCountAggregateOutputType> | number
          }
        }
      }
      Reservation: {
        payload: Prisma.$ReservationPayload<ExtArgs>
        fields: Prisma.ReservationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findFirst: {
            args: Prisma.ReservationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          findMany: {
            args: Prisma.ReservationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>[]
          }
          create: {
            args: Prisma.ReservationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          createMany: {
            args: Prisma.ReservationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReservationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          update: {
            args: Prisma.ReservationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          deleteMany: {
            args: Prisma.ReservationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReservationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationPayload>
          }
          aggregate: {
            args: Prisma.ReservationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservation>
          }
          groupBy: {
            args: Prisma.ReservationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReservationFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReservationAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReservationCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationCountAggregateOutputType> | number
          }
        }
      }
      ReservationItem: {
        payload: Prisma.$ReservationItemPayload<ExtArgs>
        fields: Prisma.ReservationItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReservationItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReservationItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          findFirst: {
            args: Prisma.ReservationItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReservationItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          findMany: {
            args: Prisma.ReservationItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>[]
          }
          create: {
            args: Prisma.ReservationItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          createMany: {
            args: Prisma.ReservationItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReservationItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          update: {
            args: Prisma.ReservationItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          deleteMany: {
            args: Prisma.ReservationItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReservationItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReservationItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReservationItemPayload>
          }
          aggregate: {
            args: Prisma.ReservationItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReservationItem>
          }
          groupBy: {
            args: Prisma.ReservationItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReservationItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ReservationItemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ReservationItemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ReservationItemCountArgs<ExtArgs>
            result: $Utils.Optional<ReservationItemCountAggregateOutputType> | number
          }
        }
      }
      ProductVariant: {
        payload: Prisma.$ProductVariantPayload<ExtArgs>
        fields: Prisma.ProductVariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductVariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductVariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findFirst: {
            args: Prisma.ProductVariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductVariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findMany: {
            args: Prisma.ProductVariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          create: {
            args: Prisma.ProductVariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          createMany: {
            args: Prisma.ProductVariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductVariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          update: {
            args: Prisma.ProductVariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          deleteMany: {
            args: Prisma.ProductVariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductVariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductVariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          aggregate: {
            args: Prisma.ProductVariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductVariant>
          }
          groupBy: {
            args: Prisma.ProductVariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductVariantFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductVariantAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductVariantCountArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantCountAggregateOutputType> | number
          }
        }
      }
      VariantAttribute: {
        payload: Prisma.$VariantAttributePayload<ExtArgs>
        fields: Prisma.VariantAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VariantAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VariantAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          findFirst: {
            args: Prisma.VariantAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VariantAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          findMany: {
            args: Prisma.VariantAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>[]
          }
          create: {
            args: Prisma.VariantAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          createMany: {
            args: Prisma.VariantAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VariantAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          update: {
            args: Prisma.VariantAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          deleteMany: {
            args: Prisma.VariantAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VariantAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VariantAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantAttributePayload>
          }
          aggregate: {
            args: Prisma.VariantAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVariantAttribute>
          }
          groupBy: {
            args: Prisma.VariantAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<VariantAttributeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.VariantAttributeFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.VariantAttributeAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.VariantAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<VariantAttributeCountAggregateOutputType> | number
          }
        }
      }
      ProductAttribute: {
        payload: Prisma.$ProductAttributePayload<ExtArgs>
        fields: Prisma.ProductAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          findFirst: {
            args: Prisma.ProductAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          findMany: {
            args: Prisma.ProductAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>[]
          }
          create: {
            args: Prisma.ProductAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          createMany: {
            args: Prisma.ProductAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          update: {
            args: Prisma.ProductAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          deleteMany: {
            args: Prisma.ProductAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          aggregate: {
            args: Prisma.ProductAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductAttribute>
          }
          groupBy: {
            args: Prisma.ProductAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductAttributeGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductAttributeFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductAttributeAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<ProductAttributeCountAggregateOutputType> | number
          }
        }
      }
      SizeChart: {
        payload: Prisma.$SizeChartPayload<ExtArgs>
        fields: Prisma.SizeChartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeChartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeChartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          findFirst: {
            args: Prisma.SizeChartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeChartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          findMany: {
            args: Prisma.SizeChartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>[]
          }
          create: {
            args: Prisma.SizeChartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          createMany: {
            args: Prisma.SizeChartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeChartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          update: {
            args: Prisma.SizeChartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          deleteMany: {
            args: Prisma.SizeChartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeChartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeChartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartPayload>
          }
          aggregate: {
            args: Prisma.SizeChartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeChart>
          }
          groupBy: {
            args: Prisma.SizeChartGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeChartGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SizeChartFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SizeChartAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SizeChartCountArgs<ExtArgs>
            result: $Utils.Optional<SizeChartCountAggregateOutputType> | number
          }
        }
      }
      SizeChartColumn: {
        payload: Prisma.$SizeChartColumnPayload<ExtArgs>
        fields: Prisma.SizeChartColumnFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeChartColumnFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeChartColumnFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          findFirst: {
            args: Prisma.SizeChartColumnFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeChartColumnFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          findMany: {
            args: Prisma.SizeChartColumnFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>[]
          }
          create: {
            args: Prisma.SizeChartColumnCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          createMany: {
            args: Prisma.SizeChartColumnCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeChartColumnDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          update: {
            args: Prisma.SizeChartColumnUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          deleteMany: {
            args: Prisma.SizeChartColumnDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeChartColumnUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeChartColumnUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartColumnPayload>
          }
          aggregate: {
            args: Prisma.SizeChartColumnAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeChartColumn>
          }
          groupBy: {
            args: Prisma.SizeChartColumnGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeChartColumnGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SizeChartColumnFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SizeChartColumnAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SizeChartColumnCountArgs<ExtArgs>
            result: $Utils.Optional<SizeChartColumnCountAggregateOutputType> | number
          }
        }
      }
      SizeChartRow: {
        payload: Prisma.$SizeChartRowPayload<ExtArgs>
        fields: Prisma.SizeChartRowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeChartRowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeChartRowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          findFirst: {
            args: Prisma.SizeChartRowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeChartRowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          findMany: {
            args: Prisma.SizeChartRowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>[]
          }
          create: {
            args: Prisma.SizeChartRowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          createMany: {
            args: Prisma.SizeChartRowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeChartRowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          update: {
            args: Prisma.SizeChartRowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          deleteMany: {
            args: Prisma.SizeChartRowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeChartRowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeChartRowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartRowPayload>
          }
          aggregate: {
            args: Prisma.SizeChartRowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeChartRow>
          }
          groupBy: {
            args: Prisma.SizeChartRowGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeChartRowGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SizeChartRowFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SizeChartRowAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SizeChartRowCountArgs<ExtArgs>
            result: $Utils.Optional<SizeChartRowCountAggregateOutputType> | number
          }
        }
      }
      SizeChartImage: {
        payload: Prisma.$SizeChartImagePayload<ExtArgs>
        fields: Prisma.SizeChartImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizeChartImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizeChartImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          findFirst: {
            args: Prisma.SizeChartImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizeChartImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          findMany: {
            args: Prisma.SizeChartImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>[]
          }
          create: {
            args: Prisma.SizeChartImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          createMany: {
            args: Prisma.SizeChartImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SizeChartImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          update: {
            args: Prisma.SizeChartImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          deleteMany: {
            args: Prisma.SizeChartImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizeChartImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SizeChartImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizeChartImagePayload>
          }
          aggregate: {
            args: Prisma.SizeChartImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizeChartImage>
          }
          groupBy: {
            args: Prisma.SizeChartImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizeChartImageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SizeChartImageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SizeChartImageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SizeChartImageCountArgs<ExtArgs>
            result: $Utils.Optional<SizeChartImageCountAggregateOutputType> | number
          }
        }
      }
      ProductDimension: {
        payload: Prisma.$ProductDimensionPayload<ExtArgs>
        fields: Prisma.ProductDimensionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductDimensionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductDimensionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          findFirst: {
            args: Prisma.ProductDimensionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductDimensionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          findMany: {
            args: Prisma.ProductDimensionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>[]
          }
          create: {
            args: Prisma.ProductDimensionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          createMany: {
            args: Prisma.ProductDimensionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDimensionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          update: {
            args: Prisma.ProductDimensionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          deleteMany: {
            args: Prisma.ProductDimensionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductDimensionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductDimensionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDimensionPayload>
          }
          aggregate: {
            args: Prisma.ProductDimensionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductDimension>
          }
          groupBy: {
            args: Prisma.ProductDimensionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductDimensionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductDimensionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductDimensionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductDimensionCountArgs<ExtArgs>
            result: $Utils.Optional<ProductDimensionCountAggregateOutputType> | number
          }
        }
      }
      ProductSEO: {
        payload: Prisma.$ProductSEOPayload<ExtArgs>
        fields: Prisma.ProductSEOFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductSEOFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductSEOFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          findFirst: {
            args: Prisma.ProductSEOFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductSEOFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          findMany: {
            args: Prisma.ProductSEOFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>[]
          }
          create: {
            args: Prisma.ProductSEOCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          createMany: {
            args: Prisma.ProductSEOCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductSEODeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          update: {
            args: Prisma.ProductSEOUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          deleteMany: {
            args: Prisma.ProductSEODeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductSEOUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductSEOUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSEOPayload>
          }
          aggregate: {
            args: Prisma.ProductSEOAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductSEO>
          }
          groupBy: {
            args: Prisma.ProductSEOGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductSEOGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductSEOFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductSEOAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductSEOCountArgs<ExtArgs>
            result: $Utils.Optional<ProductSEOCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CategoryFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CategoryAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.TagFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.TagAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      ProductTag: {
        payload: Prisma.$ProductTagPayload<ExtArgs>
        fields: Prisma.ProductTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          findFirst: {
            args: Prisma.ProductTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          findMany: {
            args: Prisma.ProductTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>[]
          }
          create: {
            args: Prisma.ProductTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          createMany: {
            args: Prisma.ProductTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          update: {
            args: Prisma.ProductTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          deleteMany: {
            args: Prisma.ProductTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTagPayload>
          }
          aggregate: {
            args: Prisma.ProductTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductTag>
          }
          groupBy: {
            args: Prisma.ProductTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductTagGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductTagFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductTagAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductTagCountArgs<ExtArgs>
            result: $Utils.Optional<ProductTagCountAggregateOutputType> | number
          }
        }
      }
      Brand: {
        payload: Prisma.$BrandPayload<ExtArgs>
        fields: Prisma.BrandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BrandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BrandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findFirst: {
            args: Prisma.BrandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BrandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          findMany: {
            args: Prisma.BrandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>[]
          }
          create: {
            args: Prisma.BrandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          createMany: {
            args: Prisma.BrandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BrandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          update: {
            args: Prisma.BrandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          deleteMany: {
            args: Prisma.BrandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BrandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BrandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BrandPayload>
          }
          aggregate: {
            args: Prisma.BrandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBrand>
          }
          groupBy: {
            args: Prisma.BrandGroupByArgs<ExtArgs>
            result: $Utils.Optional<BrandGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BrandFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BrandAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BrandCountArgs<ExtArgs>
            result: $Utils.Optional<BrandCountAggregateOutputType> | number
          }
        }
      }
      Warehouse: {
        payload: Prisma.$WarehousePayload<ExtArgs>
        fields: Prisma.WarehouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehouseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehouseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findFirst: {
            args: Prisma.WarehouseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehouseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findMany: {
            args: Prisma.WarehouseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>[]
          }
          create: {
            args: Prisma.WarehouseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          createMany: {
            args: Prisma.WarehouseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WarehouseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          update: {
            args: Prisma.WarehouseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          deleteMany: {
            args: Prisma.WarehouseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehouseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WarehouseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          aggregate: {
            args: Prisma.WarehouseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouse>
          }
          groupBy: {
            args: Prisma.WarehouseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehouseGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.WarehouseFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.WarehouseAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.WarehouseCountArgs<ExtArgs>
            result: $Utils.Optional<WarehouseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    product?: ProductOmit
    relatedProduct?: RelatedProductOmit
    productImage?: ProductImageOmit
    wishlist?: WishlistOmit
    stock?: StockOmit
    reservation?: ReservationOmit
    reservationItem?: ReservationItemOmit
    productVariant?: ProductVariantOmit
    variantAttribute?: VariantAttributeOmit
    productAttribute?: ProductAttributeOmit
    sizeChart?: SizeChartOmit
    sizeChartColumn?: SizeChartColumnOmit
    sizeChartRow?: SizeChartRowOmit
    sizeChartImage?: SizeChartImageOmit
    productDimension?: ProductDimensionOmit
    productSEO?: ProductSEOOmit
    category?: CategoryOmit
    tag?: TagOmit
    productTag?: ProductTagOmit
    brand?: BrandOmit
    warehouse?: WarehouseOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    images: number
    variants: number
    attributes: number
    sizeCharts: number
    productTags: number
    relatedFrom: number
    relatedTo: number
    wishlists: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ProductCountOutputTypeCountImagesArgs
    variants?: boolean | ProductCountOutputTypeCountVariantsArgs
    attributes?: boolean | ProductCountOutputTypeCountAttributesArgs
    sizeCharts?: boolean | ProductCountOutputTypeCountSizeChartsArgs
    productTags?: boolean | ProductCountOutputTypeCountProductTagsArgs
    relatedFrom?: boolean | ProductCountOutputTypeCountRelatedFromArgs
    relatedTo?: boolean | ProductCountOutputTypeCountRelatedToArgs
    wishlists?: boolean | ProductCountOutputTypeCountWishlistsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAttributeWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSizeChartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTagWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRelatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedProductWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountRelatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedProductWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountWishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
  }


  /**
   * Count Type ReservationCountOutputType
   */

  export type ReservationCountOutputType = {
    items: number
  }

  export type ReservationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | ReservationCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationCountOutputType
     */
    select?: ReservationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReservationCountOutputType without action
   */
  export type ReservationCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationItemWhereInput
  }


  /**
   * Count Type ProductVariantCountOutputType
   */

  export type ProductVariantCountOutputType = {
    attributes: number
    reservationItems: number
  }

  export type ProductVariantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attributes?: boolean | ProductVariantCountOutputTypeCountAttributesArgs
    reservationItems?: boolean | ProductVariantCountOutputTypeCountReservationItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariantCountOutputType
     */
    select?: ProductVariantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountAttributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantAttributeWhereInput
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountReservationItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationItemWhereInput
  }


  /**
   * Count Type SizeChartCountOutputType
   */

  export type SizeChartCountOutputType = {
    columns: number
    rows: number
    images: number
  }

  export type SizeChartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    columns?: boolean | SizeChartCountOutputTypeCountColumnsArgs
    rows?: boolean | SizeChartCountOutputTypeCountRowsArgs
    images?: boolean | SizeChartCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * SizeChartCountOutputType without action
   */
  export type SizeChartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartCountOutputType
     */
    select?: SizeChartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizeChartCountOutputType without action
   */
  export type SizeChartCountOutputTypeCountColumnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartColumnWhereInput
  }

  /**
   * SizeChartCountOutputType without action
   */
  export type SizeChartCountOutputTypeCountRowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartRowWhereInput
  }

  /**
   * SizeChartCountOutputType without action
   */
  export type SizeChartCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartImageWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    productTags: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productTags?: boolean | TagCountOutputTypeCountProductTagsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountProductTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTagWhereInput
  }


  /**
   * Count Type BrandCountOutputType
   */

  export type BrandCountOutputType = {
    products: number
  }

  export type BrandCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | BrandCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BrandCountOutputType
     */
    select?: BrandCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BrandCountOutputType without action
   */
  export type BrandCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type WarehouseCountOutputType
   */

  export type WarehouseCountOutputType = {
    variants: number
  }

  export type WarehouseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variants?: boolean | WarehouseCountOutputTypeCountVariantsArgs
  }

  // Custom InputTypes
  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseCountOutputType
     */
    select?: WarehouseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeCountVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    costPrice: number | null
    basePrice: number | null
  }

  export type ProductSumAggregateOutputType = {
    costPrice: number | null
    basePrice: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    costPrice: number | null
    basePrice: number | null
    sku: string | null
    barcode: string | null
    featured: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    taxable: boolean | null
    shippable: boolean | null
    brandId: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    description: string | null
    costPrice: number | null
    basePrice: number | null
    sku: string | null
    barcode: string | null
    featured: boolean | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    taxable: boolean | null
    shippable: boolean | null
    brandId: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    description: number
    costPrice: number
    basePrice: number
    sku: number
    barcode: number
    featured: number
    status: number
    createdAt: number
    updatedAt: number
    taxable: number
    shippable: number
    categories: number
    categoryIds: number
    brandId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    costPrice?: true
    basePrice?: true
  }

  export type ProductSumAggregateInputType = {
    costPrice?: true
    basePrice?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    costPrice?: true
    basePrice?: true
    sku?: true
    barcode?: true
    featured?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    taxable?: true
    shippable?: true
    brandId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    costPrice?: true
    basePrice?: true
    sku?: true
    barcode?: true
    featured?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    taxable?: true
    shippable?: true
    brandId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    description?: true
    costPrice?: true
    basePrice?: true
    sku?: true
    barcode?: true
    featured?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    taxable?: true
    shippable?: true
    categories?: true
    categoryIds?: true
    brandId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode: string | null
    featured: boolean
    status: string
    createdAt: Date
    updatedAt: Date
    taxable: boolean
    shippable: boolean
    categories: string[]
    categoryIds: string[]
    brandId: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    costPrice?: boolean
    basePrice?: boolean
    sku?: boolean
    barcode?: boolean
    featured?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taxable?: boolean
    shippable?: boolean
    categories?: boolean
    categoryIds?: boolean
    brandId?: boolean
    images?: boolean | Product$imagesArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    attributes?: boolean | Product$attributesArgs<ExtArgs>
    sizeCharts?: boolean | Product$sizeChartsArgs<ExtArgs>
    brand?: boolean | Product$brandArgs<ExtArgs>
    dimensions?: boolean | Product$dimensionsArgs<ExtArgs>
    seo?: boolean | Product$seoArgs<ExtArgs>
    productTags?: boolean | Product$productTagsArgs<ExtArgs>
    relatedFrom?: boolean | Product$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Product$relatedToArgs<ExtArgs>
    wishlists?: boolean | Product$wishlistsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    description?: boolean
    costPrice?: boolean
    basePrice?: boolean
    sku?: boolean
    barcode?: boolean
    featured?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    taxable?: boolean
    shippable?: boolean
    categories?: boolean
    categoryIds?: boolean
    brandId?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "description" | "costPrice" | "basePrice" | "sku" | "barcode" | "featured" | "status" | "createdAt" | "updatedAt" | "taxable" | "shippable" | "categories" | "categoryIds" | "brandId", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Product$imagesArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    attributes?: boolean | Product$attributesArgs<ExtArgs>
    sizeCharts?: boolean | Product$sizeChartsArgs<ExtArgs>
    brand?: boolean | Product$brandArgs<ExtArgs>
    dimensions?: boolean | Product$dimensionsArgs<ExtArgs>
    seo?: boolean | Product$seoArgs<ExtArgs>
    productTags?: boolean | Product$productTagsArgs<ExtArgs>
    relatedFrom?: boolean | Product$relatedFromArgs<ExtArgs>
    relatedTo?: boolean | Product$relatedToArgs<ExtArgs>
    wishlists?: boolean | Product$wishlistsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      images: Prisma.$ProductImagePayload<ExtArgs>[]
      variants: Prisma.$ProductVariantPayload<ExtArgs>[]
      attributes: Prisma.$ProductAttributePayload<ExtArgs>[]
      sizeCharts: Prisma.$SizeChartPayload<ExtArgs>[]
      brand: Prisma.$BrandPayload<ExtArgs> | null
      dimensions: Prisma.$ProductDimensionPayload<ExtArgs> | null
      seo: Prisma.$ProductSEOPayload<ExtArgs> | null
      productTags: Prisma.$ProductTagPayload<ExtArgs>[]
      relatedFrom: Prisma.$RelatedProductPayload<ExtArgs>[]
      relatedTo: Prisma.$RelatedProductPayload<ExtArgs>[]
      wishlists: Prisma.$WishlistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      description: string
      costPrice: number
      basePrice: number
      sku: string
      barcode: string | null
      featured: boolean
      status: string
      createdAt: Date
      updatedAt: Date
      taxable: boolean
      shippable: boolean
      categories: string[]
      categoryIds: string[]
      brandId: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * @param {ProductFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const product = await prisma.product.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Product.
     * @param {ProductAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const product = await prisma.product.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends Product$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Product$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    variants<T extends Product$variantsArgs<ExtArgs> = {}>(args?: Subset<T, Product$variantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    attributes<T extends Product$attributesArgs<ExtArgs> = {}>(args?: Subset<T, Product$attributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sizeCharts<T extends Product$sizeChartsArgs<ExtArgs> = {}>(args?: Subset<T, Product$sizeChartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    brand<T extends Product$brandArgs<ExtArgs> = {}>(args?: Subset<T, Product$brandArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dimensions<T extends Product$dimensionsArgs<ExtArgs> = {}>(args?: Subset<T, Product$dimensionsArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    seo<T extends Product$seoArgs<ExtArgs> = {}>(args?: Subset<T, Product$seoArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    productTags<T extends Product$productTagsArgs<ExtArgs> = {}>(args?: Subset<T, Product$productTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedFrom<T extends Product$relatedFromArgs<ExtArgs> = {}>(args?: Subset<T, Product$relatedFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    relatedTo<T extends Product$relatedToArgs<ExtArgs> = {}>(args?: Subset<T, Product$relatedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wishlists<T extends Product$wishlistsArgs<ExtArgs> = {}>(args?: Subset<T, Product$wishlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly costPrice: FieldRef<"Product", 'Float'>
    readonly basePrice: FieldRef<"Product", 'Float'>
    readonly sku: FieldRef<"Product", 'String'>
    readonly barcode: FieldRef<"Product", 'String'>
    readonly featured: FieldRef<"Product", 'Boolean'>
    readonly status: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly taxable: FieldRef<"Product", 'Boolean'>
    readonly shippable: FieldRef<"Product", 'Boolean'>
    readonly categories: FieldRef<"Product", 'String[]'>
    readonly categoryIds: FieldRef<"Product", 'String[]'>
    readonly brandId: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product findRaw
   */
  export type ProductFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Product aggregateRaw
   */
  export type ProductAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Product.images
   */
  export type Product$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    cursor?: ProductImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * Product.variants
   */
  export type Product$variantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Product.attributes
   */
  export type Product$attributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    where?: ProductAttributeWhereInput
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    cursor?: ProductAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * Product.sizeCharts
   */
  export type Product$sizeChartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    where?: SizeChartWhereInput
    orderBy?: SizeChartOrderByWithRelationInput | SizeChartOrderByWithRelationInput[]
    cursor?: SizeChartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeChartScalarFieldEnum | SizeChartScalarFieldEnum[]
  }

  /**
   * Product.brand
   */
  export type Product$brandArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    where?: BrandWhereInput
  }

  /**
   * Product.dimensions
   */
  export type Product$dimensionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    where?: ProductDimensionWhereInput
  }

  /**
   * Product.seo
   */
  export type Product$seoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    where?: ProductSEOWhereInput
  }

  /**
   * Product.productTags
   */
  export type Product$productTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    where?: ProductTagWhereInput
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    cursor?: ProductTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductTagScalarFieldEnum | ProductTagScalarFieldEnum[]
  }

  /**
   * Product.relatedFrom
   */
  export type Product$relatedFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    where?: RelatedProductWhereInput
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    cursor?: RelatedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedProductScalarFieldEnum | RelatedProductScalarFieldEnum[]
  }

  /**
   * Product.relatedTo
   */
  export type Product$relatedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    where?: RelatedProductWhereInput
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    cursor?: RelatedProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RelatedProductScalarFieldEnum | RelatedProductScalarFieldEnum[]
  }

  /**
   * Product.wishlists
   */
  export type Product$wishlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    cursor?: WishlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model RelatedProduct
   */

  export type AggregateRelatedProduct = {
    _count: RelatedProductCountAggregateOutputType | null
    _min: RelatedProductMinAggregateOutputType | null
    _max: RelatedProductMaxAggregateOutputType | null
  }

  export type RelatedProductMinAggregateOutputType = {
    id: string | null
    fromProductId: string | null
    toProductId: string | null
  }

  export type RelatedProductMaxAggregateOutputType = {
    id: string | null
    fromProductId: string | null
    toProductId: string | null
  }

  export type RelatedProductCountAggregateOutputType = {
    id: number
    fromProductId: number
    toProductId: number
    _all: number
  }


  export type RelatedProductMinAggregateInputType = {
    id?: true
    fromProductId?: true
    toProductId?: true
  }

  export type RelatedProductMaxAggregateInputType = {
    id?: true
    fromProductId?: true
    toProductId?: true
  }

  export type RelatedProductCountAggregateInputType = {
    id?: true
    fromProductId?: true
    toProductId?: true
    _all?: true
  }

  export type RelatedProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedProduct to aggregate.
     */
    where?: RelatedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedProducts to fetch.
     */
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RelatedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RelatedProducts
    **/
    _count?: true | RelatedProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RelatedProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RelatedProductMaxAggregateInputType
  }

  export type GetRelatedProductAggregateType<T extends RelatedProductAggregateArgs> = {
        [P in keyof T & keyof AggregateRelatedProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRelatedProduct[P]>
      : GetScalarType<T[P], AggregateRelatedProduct[P]>
  }




  export type RelatedProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RelatedProductWhereInput
    orderBy?: RelatedProductOrderByWithAggregationInput | RelatedProductOrderByWithAggregationInput[]
    by: RelatedProductScalarFieldEnum[] | RelatedProductScalarFieldEnum
    having?: RelatedProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RelatedProductCountAggregateInputType | true
    _min?: RelatedProductMinAggregateInputType
    _max?: RelatedProductMaxAggregateInputType
  }

  export type RelatedProductGroupByOutputType = {
    id: string
    fromProductId: string
    toProductId: string
    _count: RelatedProductCountAggregateOutputType | null
    _min: RelatedProductMinAggregateOutputType | null
    _max: RelatedProductMaxAggregateOutputType | null
  }

  type GetRelatedProductGroupByPayload<T extends RelatedProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RelatedProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RelatedProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RelatedProductGroupByOutputType[P]>
            : GetScalarType<T[P], RelatedProductGroupByOutputType[P]>
        }
      >
    >


  export type RelatedProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromProductId?: boolean
    toProductId?: boolean
    fromProduct?: boolean | ProductDefaultArgs<ExtArgs>
    toProduct?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["relatedProduct"]>



  export type RelatedProductSelectScalar = {
    id?: boolean
    fromProductId?: boolean
    toProductId?: boolean
  }

  export type RelatedProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fromProductId" | "toProductId", ExtArgs["result"]["relatedProduct"]>
  export type RelatedProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromProduct?: boolean | ProductDefaultArgs<ExtArgs>
    toProduct?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $RelatedProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RelatedProduct"
    objects: {
      fromProduct: Prisma.$ProductPayload<ExtArgs>
      toProduct: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fromProductId: string
      toProductId: string
    }, ExtArgs["result"]["relatedProduct"]>
    composites: {}
  }

  type RelatedProductGetPayload<S extends boolean | null | undefined | RelatedProductDefaultArgs> = $Result.GetResult<Prisma.$RelatedProductPayload, S>

  type RelatedProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RelatedProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RelatedProductCountAggregateInputType | true
    }

  export interface RelatedProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RelatedProduct'], meta: { name: 'RelatedProduct' } }
    /**
     * Find zero or one RelatedProduct that matches the filter.
     * @param {RelatedProductFindUniqueArgs} args - Arguments to find a RelatedProduct
     * @example
     * // Get one RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RelatedProductFindUniqueArgs>(args: SelectSubset<T, RelatedProductFindUniqueArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one RelatedProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RelatedProductFindUniqueOrThrowArgs} args - Arguments to find a RelatedProduct
     * @example
     * // Get one RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RelatedProductFindUniqueOrThrowArgs>(args: SelectSubset<T, RelatedProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductFindFirstArgs} args - Arguments to find a RelatedProduct
     * @example
     * // Get one RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RelatedProductFindFirstArgs>(args?: SelectSubset<T, RelatedProductFindFirstArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first RelatedProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductFindFirstOrThrowArgs} args - Arguments to find a RelatedProduct
     * @example
     * // Get one RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RelatedProductFindFirstOrThrowArgs>(args?: SelectSubset<T, RelatedProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RelatedProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RelatedProducts
     * const relatedProducts = await prisma.relatedProduct.findMany()
     * 
     * // Get first 10 RelatedProducts
     * const relatedProducts = await prisma.relatedProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const relatedProductWithIdOnly = await prisma.relatedProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RelatedProductFindManyArgs>(args?: SelectSubset<T, RelatedProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a RelatedProduct.
     * @param {RelatedProductCreateArgs} args - Arguments to create a RelatedProduct.
     * @example
     * // Create one RelatedProduct
     * const RelatedProduct = await prisma.relatedProduct.create({
     *   data: {
     *     // ... data to create a RelatedProduct
     *   }
     * })
     * 
     */
    create<T extends RelatedProductCreateArgs>(args: SelectSubset<T, RelatedProductCreateArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many RelatedProducts.
     * @param {RelatedProductCreateManyArgs} args - Arguments to create many RelatedProducts.
     * @example
     * // Create many RelatedProducts
     * const relatedProduct = await prisma.relatedProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RelatedProductCreateManyArgs>(args?: SelectSubset<T, RelatedProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RelatedProduct.
     * @param {RelatedProductDeleteArgs} args - Arguments to delete one RelatedProduct.
     * @example
     * // Delete one RelatedProduct
     * const RelatedProduct = await prisma.relatedProduct.delete({
     *   where: {
     *     // ... filter to delete one RelatedProduct
     *   }
     * })
     * 
     */
    delete<T extends RelatedProductDeleteArgs>(args: SelectSubset<T, RelatedProductDeleteArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one RelatedProduct.
     * @param {RelatedProductUpdateArgs} args - Arguments to update one RelatedProduct.
     * @example
     * // Update one RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RelatedProductUpdateArgs>(args: SelectSubset<T, RelatedProductUpdateArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more RelatedProducts.
     * @param {RelatedProductDeleteManyArgs} args - Arguments to filter RelatedProducts to delete.
     * @example
     * // Delete a few RelatedProducts
     * const { count } = await prisma.relatedProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RelatedProductDeleteManyArgs>(args?: SelectSubset<T, RelatedProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RelatedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RelatedProducts
     * const relatedProduct = await prisma.relatedProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RelatedProductUpdateManyArgs>(args: SelectSubset<T, RelatedProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RelatedProduct.
     * @param {RelatedProductUpsertArgs} args - Arguments to update or create a RelatedProduct.
     * @example
     * // Update or create a RelatedProduct
     * const relatedProduct = await prisma.relatedProduct.upsert({
     *   create: {
     *     // ... data to create a RelatedProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RelatedProduct we want to update
     *   }
     * })
     */
    upsert<T extends RelatedProductUpsertArgs>(args: SelectSubset<T, RelatedProductUpsertArgs<ExtArgs>>): Prisma__RelatedProductClient<$Result.GetResult<Prisma.$RelatedProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more RelatedProducts that matches the filter.
     * @param {RelatedProductFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const relatedProduct = await prisma.relatedProduct.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: RelatedProductFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a RelatedProduct.
     * @param {RelatedProductAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const relatedProduct = await prisma.relatedProduct.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: RelatedProductAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of RelatedProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductCountArgs} args - Arguments to filter RelatedProducts to count.
     * @example
     * // Count the number of RelatedProducts
     * const count = await prisma.relatedProduct.count({
     *   where: {
     *     // ... the filter for the RelatedProducts we want to count
     *   }
     * })
    **/
    count<T extends RelatedProductCountArgs>(
      args?: Subset<T, RelatedProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RelatedProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RelatedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RelatedProductAggregateArgs>(args: Subset<T, RelatedProductAggregateArgs>): Prisma.PrismaPromise<GetRelatedProductAggregateType<T>>

    /**
     * Group by RelatedProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RelatedProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RelatedProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RelatedProductGroupByArgs['orderBy'] }
        : { orderBy?: RelatedProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RelatedProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRelatedProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RelatedProduct model
   */
  readonly fields: RelatedProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RelatedProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RelatedProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromProduct<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toProduct<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RelatedProduct model
   */
  interface RelatedProductFieldRefs {
    readonly id: FieldRef<"RelatedProduct", 'String'>
    readonly fromProductId: FieldRef<"RelatedProduct", 'String'>
    readonly toProductId: FieldRef<"RelatedProduct", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RelatedProduct findUnique
   */
  export type RelatedProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter, which RelatedProduct to fetch.
     */
    where: RelatedProductWhereUniqueInput
  }

  /**
   * RelatedProduct findUniqueOrThrow
   */
  export type RelatedProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter, which RelatedProduct to fetch.
     */
    where: RelatedProductWhereUniqueInput
  }

  /**
   * RelatedProduct findFirst
   */
  export type RelatedProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter, which RelatedProduct to fetch.
     */
    where?: RelatedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedProducts to fetch.
     */
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedProducts.
     */
    cursor?: RelatedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedProducts.
     */
    distinct?: RelatedProductScalarFieldEnum | RelatedProductScalarFieldEnum[]
  }

  /**
   * RelatedProduct findFirstOrThrow
   */
  export type RelatedProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter, which RelatedProduct to fetch.
     */
    where?: RelatedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedProducts to fetch.
     */
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RelatedProducts.
     */
    cursor?: RelatedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RelatedProducts.
     */
    distinct?: RelatedProductScalarFieldEnum | RelatedProductScalarFieldEnum[]
  }

  /**
   * RelatedProduct findMany
   */
  export type RelatedProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter, which RelatedProducts to fetch.
     */
    where?: RelatedProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RelatedProducts to fetch.
     */
    orderBy?: RelatedProductOrderByWithRelationInput | RelatedProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RelatedProducts.
     */
    cursor?: RelatedProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RelatedProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RelatedProducts.
     */
    skip?: number
    distinct?: RelatedProductScalarFieldEnum | RelatedProductScalarFieldEnum[]
  }

  /**
   * RelatedProduct create
   */
  export type RelatedProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * The data needed to create a RelatedProduct.
     */
    data: XOR<RelatedProductCreateInput, RelatedProductUncheckedCreateInput>
  }

  /**
   * RelatedProduct createMany
   */
  export type RelatedProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RelatedProducts.
     */
    data: RelatedProductCreateManyInput | RelatedProductCreateManyInput[]
  }

  /**
   * RelatedProduct update
   */
  export type RelatedProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * The data needed to update a RelatedProduct.
     */
    data: XOR<RelatedProductUpdateInput, RelatedProductUncheckedUpdateInput>
    /**
     * Choose, which RelatedProduct to update.
     */
    where: RelatedProductWhereUniqueInput
  }

  /**
   * RelatedProduct updateMany
   */
  export type RelatedProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RelatedProducts.
     */
    data: XOR<RelatedProductUpdateManyMutationInput, RelatedProductUncheckedUpdateManyInput>
    /**
     * Filter which RelatedProducts to update
     */
    where?: RelatedProductWhereInput
    /**
     * Limit how many RelatedProducts to update.
     */
    limit?: number
  }

  /**
   * RelatedProduct upsert
   */
  export type RelatedProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * The filter to search for the RelatedProduct to update in case it exists.
     */
    where: RelatedProductWhereUniqueInput
    /**
     * In case the RelatedProduct found by the `where` argument doesn't exist, create a new RelatedProduct with this data.
     */
    create: XOR<RelatedProductCreateInput, RelatedProductUncheckedCreateInput>
    /**
     * In case the RelatedProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RelatedProductUpdateInput, RelatedProductUncheckedUpdateInput>
  }

  /**
   * RelatedProduct delete
   */
  export type RelatedProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
    /**
     * Filter which RelatedProduct to delete.
     */
    where: RelatedProductWhereUniqueInput
  }

  /**
   * RelatedProduct deleteMany
   */
  export type RelatedProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RelatedProducts to delete
     */
    where?: RelatedProductWhereInput
    /**
     * Limit how many RelatedProducts to delete.
     */
    limit?: number
  }

  /**
   * RelatedProduct findRaw
   */
  export type RelatedProductFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RelatedProduct aggregateRaw
   */
  export type RelatedProductAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * RelatedProduct without action
   */
  export type RelatedProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RelatedProduct
     */
    select?: RelatedProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the RelatedProduct
     */
    omit?: RelatedProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RelatedProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductImage
   */

  export type AggregateProductImage = {
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  export type ProductImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    blurhash: string | null
    isMain: boolean | null
    productId: string | null
    createdAt: Date | null
  }

  export type ProductImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    blurhash: string | null
    isMain: boolean | null
    productId: string | null
    createdAt: Date | null
  }

  export type ProductImageCountAggregateOutputType = {
    id: number
    url: number
    blurhash: number
    isMain: number
    productId: number
    createdAt: number
    _all: number
  }


  export type ProductImageMinAggregateInputType = {
    id?: true
    url?: true
    blurhash?: true
    isMain?: true
    productId?: true
    createdAt?: true
  }

  export type ProductImageMaxAggregateInputType = {
    id?: true
    url?: true
    blurhash?: true
    isMain?: true
    productId?: true
    createdAt?: true
  }

  export type ProductImageCountAggregateInputType = {
    id?: true
    url?: true
    blurhash?: true
    isMain?: true
    productId?: true
    createdAt?: true
    _all?: true
  }

  export type ProductImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImage to aggregate.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductImages
    **/
    _count?: true | ProductImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductImageMaxAggregateInputType
  }

  export type GetProductImageAggregateType<T extends ProductImageAggregateArgs> = {
        [P in keyof T & keyof AggregateProductImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductImage[P]>
      : GetScalarType<T[P], AggregateProductImage[P]>
  }




  export type ProductImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithAggregationInput | ProductImageOrderByWithAggregationInput[]
    by: ProductImageScalarFieldEnum[] | ProductImageScalarFieldEnum
    having?: ProductImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductImageCountAggregateInputType | true
    _min?: ProductImageMinAggregateInputType
    _max?: ProductImageMaxAggregateInputType
  }

  export type ProductImageGroupByOutputType = {
    id: string
    url: string
    blurhash: string
    isMain: boolean
    productId: string
    createdAt: Date
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  type GetProductImageGroupByPayload<T extends ProductImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
            : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
        }
      >
    >


  export type ProductImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    blurhash?: boolean
    isMain?: boolean
    productId?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>



  export type ProductImageSelectScalar = {
    id?: boolean
    url?: boolean
    blurhash?: boolean
    isMain?: boolean
    productId?: boolean
    createdAt?: boolean
  }

  export type ProductImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "blurhash" | "isMain" | "productId" | "createdAt", ExtArgs["result"]["productImage"]>
  export type ProductImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductImage"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      blurhash: string
      isMain: boolean
      productId: string
      createdAt: Date
    }, ExtArgs["result"]["productImage"]>
    composites: {}
  }

  type ProductImageGetPayload<S extends boolean | null | undefined | ProductImageDefaultArgs> = $Result.GetResult<Prisma.$ProductImagePayload, S>

  type ProductImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductImageCountAggregateInputType | true
    }

  export interface ProductImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductImage'], meta: { name: 'ProductImage' } }
    /**
     * Find zero or one ProductImage that matches the filter.
     * @param {ProductImageFindUniqueArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductImageFindUniqueArgs>(args: SelectSubset<T, ProductImageFindUniqueArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductImageFindUniqueOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductImageFindFirstArgs>(args?: SelectSubset<T, ProductImageFindFirstArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductImages
     * const productImages = await prisma.productImage.findMany()
     * 
     * // Get first 10 ProductImages
     * const productImages = await prisma.productImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productImageWithIdOnly = await prisma.productImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductImageFindManyArgs>(args?: SelectSubset<T, ProductImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductImage.
     * @param {ProductImageCreateArgs} args - Arguments to create a ProductImage.
     * @example
     * // Create one ProductImage
     * const ProductImage = await prisma.productImage.create({
     *   data: {
     *     // ... data to create a ProductImage
     *   }
     * })
     * 
     */
    create<T extends ProductImageCreateArgs>(args: SelectSubset<T, ProductImageCreateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductImages.
     * @param {ProductImageCreateManyArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductImageCreateManyArgs>(args?: SelectSubset<T, ProductImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductImage.
     * @param {ProductImageDeleteArgs} args - Arguments to delete one ProductImage.
     * @example
     * // Delete one ProductImage
     * const ProductImage = await prisma.productImage.delete({
     *   where: {
     *     // ... filter to delete one ProductImage
     *   }
     * })
     * 
     */
    delete<T extends ProductImageDeleteArgs>(args: SelectSubset<T, ProductImageDeleteArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductImage.
     * @param {ProductImageUpdateArgs} args - Arguments to update one ProductImage.
     * @example
     * // Update one ProductImage
     * const productImage = await prisma.productImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductImageUpdateArgs>(args: SelectSubset<T, ProductImageUpdateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductImages.
     * @param {ProductImageDeleteManyArgs} args - Arguments to filter ProductImages to delete.
     * @example
     * // Delete a few ProductImages
     * const { count } = await prisma.productImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductImageDeleteManyArgs>(args?: SelectSubset<T, ProductImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductImageUpdateManyArgs>(args: SelectSubset<T, ProductImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductImage.
     * @param {ProductImageUpsertArgs} args - Arguments to update or create a ProductImage.
     * @example
     * // Update or create a ProductImage
     * const productImage = await prisma.productImage.upsert({
     *   create: {
     *     // ... data to create a ProductImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductImage we want to update
     *   }
     * })
     */
    upsert<T extends ProductImageUpsertArgs>(args: SelectSubset<T, ProductImageUpsertArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * @param {ProductImageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productImage = await prisma.productImage.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductImageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductImage.
     * @param {ProductImageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productImage = await prisma.productImage.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductImageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageCountArgs} args - Arguments to filter ProductImages to count.
     * @example
     * // Count the number of ProductImages
     * const count = await prisma.productImage.count({
     *   where: {
     *     // ... the filter for the ProductImages we want to count
     *   }
     * })
    **/
    count<T extends ProductImageCountArgs>(
      args?: Subset<T, ProductImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductImageAggregateArgs>(args: Subset<T, ProductImageAggregateArgs>): Prisma.PrismaPromise<GetProductImageAggregateType<T>>

    /**
     * Group by ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductImageGroupByArgs['orderBy'] }
        : { orderBy?: ProductImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductImage model
   */
  readonly fields: ProductImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductImage model
   */
  interface ProductImageFieldRefs {
    readonly id: FieldRef<"ProductImage", 'String'>
    readonly url: FieldRef<"ProductImage", 'String'>
    readonly blurhash: FieldRef<"ProductImage", 'String'>
    readonly isMain: FieldRef<"ProductImage", 'Boolean'>
    readonly productId: FieldRef<"ProductImage", 'String'>
    readonly createdAt: FieldRef<"ProductImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductImage findUnique
   */
  export type ProductImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findUniqueOrThrow
   */
  export type ProductImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findFirst
   */
  export type ProductImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findFirstOrThrow
   */
  export type ProductImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findMany
   */
  export type ProductImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImages to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage create
   */
  export type ProductImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductImage.
     */
    data: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
  }

  /**
   * ProductImage createMany
   */
  export type ProductImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductImages.
     */
    data: ProductImageCreateManyInput | ProductImageCreateManyInput[]
  }

  /**
   * ProductImage update
   */
  export type ProductImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductImage.
     */
    data: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
    /**
     * Choose, which ProductImage to update.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage updateMany
   */
  export type ProductImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductImages.
     */
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyInput>
    /**
     * Filter which ProductImages to update
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to update.
     */
    limit?: number
  }

  /**
   * ProductImage upsert
   */
  export type ProductImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductImage to update in case it exists.
     */
    where: ProductImageWhereUniqueInput
    /**
     * In case the ProductImage found by the `where` argument doesn't exist, create a new ProductImage with this data.
     */
    create: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
    /**
     * In case the ProductImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
  }

  /**
   * ProductImage delete
   */
  export type ProductImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter which ProductImage to delete.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage deleteMany
   */
  export type ProductImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImages to delete
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to delete.
     */
    limit?: number
  }

  /**
   * ProductImage findRaw
   */
  export type ProductImageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductImage aggregateRaw
   */
  export type ProductImageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductImage without action
   */
  export type ProductImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
  }


  /**
   * Model Wishlist
   */

  export type AggregateWishlist = {
    _count: WishlistCountAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  export type WishlistMinAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WishlistCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WishlistMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WishlistCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WishlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlist to aggregate.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wishlists
    **/
    _count?: true | WishlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WishlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WishlistMaxAggregateInputType
  }

  export type GetWishlistAggregateType<T extends WishlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWishlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWishlist[P]>
      : GetScalarType<T[P], AggregateWishlist[P]>
  }




  export type WishlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WishlistWhereInput
    orderBy?: WishlistOrderByWithAggregationInput | WishlistOrderByWithAggregationInput[]
    by: WishlistScalarFieldEnum[] | WishlistScalarFieldEnum
    having?: WishlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WishlistCountAggregateInputType | true
    _min?: WishlistMinAggregateInputType
    _max?: WishlistMaxAggregateInputType
  }

  export type WishlistGroupByOutputType = {
    id: string
    userId: string
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: WishlistCountAggregateOutputType | null
    _min: WishlistMinAggregateOutputType | null
    _max: WishlistMaxAggregateOutputType | null
  }

  type GetWishlistGroupByPayload<T extends WishlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WishlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WishlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WishlistGroupByOutputType[P]>
            : GetScalarType<T[P], WishlistGroupByOutputType[P]>
        }
      >
    >


  export type WishlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wishlist"]>



  export type WishlistSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WishlistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["wishlist"]>
  export type WishlistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $WishlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wishlist"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wishlist"]>
    composites: {}
  }

  type WishlistGetPayload<S extends boolean | null | undefined | WishlistDefaultArgs> = $Result.GetResult<Prisma.$WishlistPayload, S>

  type WishlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WishlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WishlistCountAggregateInputType | true
    }

  export interface WishlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wishlist'], meta: { name: 'Wishlist' } }
    /**
     * Find zero or one Wishlist that matches the filter.
     * @param {WishlistFindUniqueArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WishlistFindUniqueArgs>(args: SelectSubset<T, WishlistFindUniqueArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wishlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WishlistFindUniqueOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WishlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WishlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WishlistFindFirstArgs>(args?: SelectSubset<T, WishlistFindFirstArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wishlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindFirstOrThrowArgs} args - Arguments to find a Wishlist
     * @example
     * // Get one Wishlist
     * const wishlist = await prisma.wishlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WishlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WishlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wishlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wishlists
     * const wishlists = await prisma.wishlist.findMany()
     * 
     * // Get first 10 Wishlists
     * const wishlists = await prisma.wishlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const wishlistWithIdOnly = await prisma.wishlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WishlistFindManyArgs>(args?: SelectSubset<T, WishlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wishlist.
     * @param {WishlistCreateArgs} args - Arguments to create a Wishlist.
     * @example
     * // Create one Wishlist
     * const Wishlist = await prisma.wishlist.create({
     *   data: {
     *     // ... data to create a Wishlist
     *   }
     * })
     * 
     */
    create<T extends WishlistCreateArgs>(args: SelectSubset<T, WishlistCreateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wishlists.
     * @param {WishlistCreateManyArgs} args - Arguments to create many Wishlists.
     * @example
     * // Create many Wishlists
     * const wishlist = await prisma.wishlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WishlistCreateManyArgs>(args?: SelectSubset<T, WishlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wishlist.
     * @param {WishlistDeleteArgs} args - Arguments to delete one Wishlist.
     * @example
     * // Delete one Wishlist
     * const Wishlist = await prisma.wishlist.delete({
     *   where: {
     *     // ... filter to delete one Wishlist
     *   }
     * })
     * 
     */
    delete<T extends WishlistDeleteArgs>(args: SelectSubset<T, WishlistDeleteArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wishlist.
     * @param {WishlistUpdateArgs} args - Arguments to update one Wishlist.
     * @example
     * // Update one Wishlist
     * const wishlist = await prisma.wishlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WishlistUpdateArgs>(args: SelectSubset<T, WishlistUpdateArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wishlists.
     * @param {WishlistDeleteManyArgs} args - Arguments to filter Wishlists to delete.
     * @example
     * // Delete a few Wishlists
     * const { count } = await prisma.wishlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WishlistDeleteManyArgs>(args?: SelectSubset<T, WishlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wishlists
     * const wishlist = await prisma.wishlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WishlistUpdateManyArgs>(args: SelectSubset<T, WishlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wishlist.
     * @param {WishlistUpsertArgs} args - Arguments to update or create a Wishlist.
     * @example
     * // Update or create a Wishlist
     * const wishlist = await prisma.wishlist.upsert({
     *   create: {
     *     // ... data to create a Wishlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wishlist we want to update
     *   }
     * })
     */
    upsert<T extends WishlistUpsertArgs>(args: SelectSubset<T, WishlistUpsertArgs<ExtArgs>>): Prisma__WishlistClient<$Result.GetResult<Prisma.$WishlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wishlists that matches the filter.
     * @param {WishlistFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const wishlist = await prisma.wishlist.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: WishlistFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Wishlist.
     * @param {WishlistAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const wishlist = await prisma.wishlist.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: WishlistAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Wishlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistCountArgs} args - Arguments to filter Wishlists to count.
     * @example
     * // Count the number of Wishlists
     * const count = await prisma.wishlist.count({
     *   where: {
     *     // ... the filter for the Wishlists we want to count
     *   }
     * })
    **/
    count<T extends WishlistCountArgs>(
      args?: Subset<T, WishlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WishlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WishlistAggregateArgs>(args: Subset<T, WishlistAggregateArgs>): Prisma.PrismaPromise<GetWishlistAggregateType<T>>

    /**
     * Group by Wishlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WishlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WishlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WishlistGroupByArgs['orderBy'] }
        : { orderBy?: WishlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WishlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWishlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wishlist model
   */
  readonly fields: WishlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wishlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WishlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wishlist model
   */
  interface WishlistFieldRefs {
    readonly id: FieldRef<"Wishlist", 'String'>
    readonly userId: FieldRef<"Wishlist", 'String'>
    readonly productId: FieldRef<"Wishlist", 'String'>
    readonly createdAt: FieldRef<"Wishlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Wishlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wishlist findUnique
   */
  export type WishlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findUniqueOrThrow
   */
  export type WishlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist findFirst
   */
  export type WishlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findFirstOrThrow
   */
  export type WishlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlist to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wishlists.
     */
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist findMany
   */
  export type WishlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter, which Wishlists to fetch.
     */
    where?: WishlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wishlists to fetch.
     */
    orderBy?: WishlistOrderByWithRelationInput | WishlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wishlists.
     */
    cursor?: WishlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wishlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wishlists.
     */
    skip?: number
    distinct?: WishlistScalarFieldEnum | WishlistScalarFieldEnum[]
  }

  /**
   * Wishlist create
   */
  export type WishlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to create a Wishlist.
     */
    data: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
  }

  /**
   * Wishlist createMany
   */
  export type WishlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wishlists.
     */
    data: WishlistCreateManyInput | WishlistCreateManyInput[]
  }

  /**
   * Wishlist update
   */
  export type WishlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The data needed to update a Wishlist.
     */
    data: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
    /**
     * Choose, which Wishlist to update.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist updateMany
   */
  export type WishlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wishlists.
     */
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyInput>
    /**
     * Filter which Wishlists to update
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to update.
     */
    limit?: number
  }

  /**
   * Wishlist upsert
   */
  export type WishlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * The filter to search for the Wishlist to update in case it exists.
     */
    where: WishlistWhereUniqueInput
    /**
     * In case the Wishlist found by the `where` argument doesn't exist, create a new Wishlist with this data.
     */
    create: XOR<WishlistCreateInput, WishlistUncheckedCreateInput>
    /**
     * In case the Wishlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WishlistUpdateInput, WishlistUncheckedUpdateInput>
  }

  /**
   * Wishlist delete
   */
  export type WishlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
    /**
     * Filter which Wishlist to delete.
     */
    where: WishlistWhereUniqueInput
  }

  /**
   * Wishlist deleteMany
   */
  export type WishlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wishlists to delete
     */
    where?: WishlistWhereInput
    /**
     * Limit how many Wishlists to delete.
     */
    limit?: number
  }

  /**
   * Wishlist findRaw
   */
  export type WishlistFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Wishlist aggregateRaw
   */
  export type WishlistAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Wishlist without action
   */
  export type WishlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wishlist
     */
    select?: WishlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wishlist
     */
    omit?: WishlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WishlistInclude<ExtArgs> | null
  }


  /**
   * Model Stock
   */

  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    quantity: number | null
    reserved: number | null
  }

  export type StockSumAggregateOutputType = {
    quantity: number | null
    reserved: number | null
  }

  export type StockMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    reserved: number | null
    variantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    reserved: number | null
    variantId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StockCountAggregateOutputType = {
    id: number
    quantity: number
    reserved: number
    variantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    quantity?: true
    reserved?: true
  }

  export type StockSumAggregateInputType = {
    quantity?: true
    reserved?: true
  }

  export type StockMinAggregateInputType = {
    id?: true
    quantity?: true
    reserved?: true
    variantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockMaxAggregateInputType = {
    id?: true
    quantity?: true
    reserved?: true
    variantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StockCountAggregateInputType = {
    id?: true
    quantity?: true
    reserved?: true
    variantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StockAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stock to aggregate.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StockWhereInput
    orderBy?: StockOrderByWithAggregationInput | StockOrderByWithAggregationInput[]
    by: StockScalarFieldEnum[] | StockScalarFieldEnum
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }

  export type StockGroupByOutputType = {
    id: string
    quantity: number
    reserved: number
    variantId: string
    createdAt: Date
    updatedAt: Date
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    reserved?: boolean
    variantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stock"]>



  export type StockSelectScalar = {
    id?: boolean
    quantity?: boolean
    reserved?: boolean
    variantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StockOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quantity" | "reserved" | "variantId" | "createdAt" | "updatedAt", ExtArgs["result"]["stock"]>
  export type StockInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }

  export type $StockPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stock"
    objects: {
      variant: Prisma.$ProductVariantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      reserved: number
      variantId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["stock"]>
    composites: {}
  }

  type StockGetPayload<S extends boolean | null | undefined | StockDefaultArgs> = $Result.GetResult<Prisma.$StockPayload, S>

  type StockCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StockFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StockCountAggregateInputType | true
    }

  export interface StockDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stock'], meta: { name: 'Stock' } }
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StockFindUniqueArgs>(args: SelectSubset<T, StockFindUniqueArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stock that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(args: SelectSubset<T, StockFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StockFindFirstArgs>(args?: SelectSubset<T, StockFindFirstArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stock that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(args?: SelectSubset<T, StockFindFirstOrThrowArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stockWithIdOnly = await prisma.stock.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StockFindManyArgs>(args?: SelectSubset<T, StockFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
     */
    create<T extends StockCreateArgs>(args: SelectSubset<T, StockCreateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stocks.
     * @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     * @example
     * // Create many Stocks
     * const stock = await prisma.stock.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StockCreateManyArgs>(args?: SelectSubset<T, StockCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
     */
    delete<T extends StockDeleteArgs>(args: SelectSubset<T, StockDeleteArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StockUpdateArgs>(args: SelectSubset<T, StockUpdateArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StockDeleteManyArgs>(args?: SelectSubset<T, StockDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StockUpdateManyArgs>(args: SelectSubset<T, StockUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
     */
    upsert<T extends StockUpsertArgs>(args: SelectSubset<T, StockUpsertArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stocks that matches the filter.
     * @param {StockFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const stock = await prisma.stock.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: StockFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Stock.
     * @param {StockAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const stock = await prisma.stock.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: StockAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): Prisma.PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stock model
   */
  readonly fields: StockFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StockClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stock model
   */
  interface StockFieldRefs {
    readonly id: FieldRef<"Stock", 'String'>
    readonly quantity: FieldRef<"Stock", 'Int'>
    readonly reserved: FieldRef<"Stock", 'Int'>
    readonly variantId: FieldRef<"Stock", 'String'>
    readonly createdAt: FieldRef<"Stock", 'DateTime'>
    readonly updatedAt: FieldRef<"Stock", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Stock findUnique
   */
  export type StockFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock findFirst
   */
  export type StockFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stock to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     */
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock findMany
   */
  export type StockFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter, which Stocks to fetch.
     */
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     */
    orderBy?: StockOrderByWithRelationInput | StockOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     */
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     */
    skip?: number
    distinct?: StockScalarFieldEnum | StockScalarFieldEnum[]
  }

  /**
   * Stock create
   */
  export type StockCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to create a Stock.
     */
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }

  /**
   * Stock createMany
   */
  export type StockCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stocks.
     */
    data: StockCreateManyInput | StockCreateManyInput[]
  }

  /**
   * Stock update
   */
  export type StockUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The data needed to update a Stock.
     */
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stocks.
     */
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     */
    where?: StockWhereInput
    /**
     * Limit how many Stocks to update.
     */
    limit?: number
  }

  /**
   * Stock upsert
   */
  export type StockUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * The filter to search for the Stock to update in case it exists.
     */
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     */
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }

  /**
   * Stock delete
   */
  export type StockDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    /**
     * Filter which Stock to delete.
     */
    where: StockWhereUniqueInput
  }

  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stocks to delete
     */
    where?: StockWhereInput
    /**
     * Limit how many Stocks to delete.
     */
    limit?: number
  }

  /**
   * Stock findRaw
   */
  export type StockFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Stock aggregateRaw
   */
  export type StockAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Stock without action
   */
  export type StockDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
  }


  /**
   * Model Reservation
   */

  export type AggregateReservation = {
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  export type ReservationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReservationMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReservationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservation to aggregate.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reservations
    **/
    _count?: true | ReservationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationMaxAggregateInputType
  }

  export type GetReservationAggregateType<T extends ReservationAggregateArgs> = {
        [P in keyof T & keyof AggregateReservation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservation[P]>
      : GetScalarType<T[P], AggregateReservation[P]>
  }




  export type ReservationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationWhereInput
    orderBy?: ReservationOrderByWithAggregationInput | ReservationOrderByWithAggregationInput[]
    by: ReservationScalarFieldEnum[] | ReservationScalarFieldEnum
    having?: ReservationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationCountAggregateInputType | true
    _min?: ReservationMinAggregateInputType
    _max?: ReservationMaxAggregateInputType
  }

  export type ReservationGroupByOutputType = {
    id: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: ReservationCountAggregateOutputType | null
    _min: ReservationMinAggregateOutputType | null
    _max: ReservationMaxAggregateOutputType | null
  }

  type GetReservationGroupByPayload<T extends ReservationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationGroupByOutputType[P]>
        }
      >
    >


  export type ReservationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    items?: boolean | Reservation$itemsArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservation"]>



  export type ReservationSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReservationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["reservation"]>
  export type ReservationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Reservation$itemsArgs<ExtArgs>
    _count?: boolean | ReservationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ReservationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reservation"
    objects: {
      items: Prisma.$ReservationItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reservation"]>
    composites: {}
  }

  type ReservationGetPayload<S extends boolean | null | undefined | ReservationDefaultArgs> = $Result.GetResult<Prisma.$ReservationPayload, S>

  type ReservationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReservationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReservationCountAggregateInputType | true
    }

  export interface ReservationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reservation'], meta: { name: 'Reservation' } }
    /**
     * Find zero or one Reservation that matches the filter.
     * @param {ReservationFindUniqueArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReservationFindUniqueArgs>(args: SelectSubset<T, ReservationFindUniqueArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Reservation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReservationFindUniqueOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReservationFindUniqueOrThrowArgs>(args: SelectSubset<T, ReservationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReservationFindFirstArgs>(args?: SelectSubset<T, ReservationFindFirstArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Reservation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindFirstOrThrowArgs} args - Arguments to find a Reservation
     * @example
     * // Get one Reservation
     * const reservation = await prisma.reservation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReservationFindFirstOrThrowArgs>(args?: SelectSubset<T, ReservationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reservations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reservations
     * const reservations = await prisma.reservation.findMany()
     * 
     * // Get first 10 Reservations
     * const reservations = await prisma.reservation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationWithIdOnly = await prisma.reservation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReservationFindManyArgs>(args?: SelectSubset<T, ReservationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Reservation.
     * @param {ReservationCreateArgs} args - Arguments to create a Reservation.
     * @example
     * // Create one Reservation
     * const Reservation = await prisma.reservation.create({
     *   data: {
     *     // ... data to create a Reservation
     *   }
     * })
     * 
     */
    create<T extends ReservationCreateArgs>(args: SelectSubset<T, ReservationCreateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reservations.
     * @param {ReservationCreateManyArgs} args - Arguments to create many Reservations.
     * @example
     * // Create many Reservations
     * const reservation = await prisma.reservation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReservationCreateManyArgs>(args?: SelectSubset<T, ReservationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reservation.
     * @param {ReservationDeleteArgs} args - Arguments to delete one Reservation.
     * @example
     * // Delete one Reservation
     * const Reservation = await prisma.reservation.delete({
     *   where: {
     *     // ... filter to delete one Reservation
     *   }
     * })
     * 
     */
    delete<T extends ReservationDeleteArgs>(args: SelectSubset<T, ReservationDeleteArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Reservation.
     * @param {ReservationUpdateArgs} args - Arguments to update one Reservation.
     * @example
     * // Update one Reservation
     * const reservation = await prisma.reservation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReservationUpdateArgs>(args: SelectSubset<T, ReservationUpdateArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reservations.
     * @param {ReservationDeleteManyArgs} args - Arguments to filter Reservations to delete.
     * @example
     * // Delete a few Reservations
     * const { count } = await prisma.reservation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReservationDeleteManyArgs>(args?: SelectSubset<T, ReservationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reservations
     * const reservation = await prisma.reservation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReservationUpdateManyArgs>(args: SelectSubset<T, ReservationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reservation.
     * @param {ReservationUpsertArgs} args - Arguments to update or create a Reservation.
     * @example
     * // Update or create a Reservation
     * const reservation = await prisma.reservation.upsert({
     *   create: {
     *     // ... data to create a Reservation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reservation we want to update
     *   }
     * })
     */
    upsert<T extends ReservationUpsertArgs>(args: SelectSubset<T, ReservationUpsertArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reservations that matches the filter.
     * @param {ReservationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reservation = await prisma.reservation.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ReservationFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Reservation.
     * @param {ReservationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reservation = await prisma.reservation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReservationAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Reservations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationCountArgs} args - Arguments to filter Reservations to count.
     * @example
     * // Count the number of Reservations
     * const count = await prisma.reservation.count({
     *   where: {
     *     // ... the filter for the Reservations we want to count
     *   }
     * })
    **/
    count<T extends ReservationCountArgs>(
      args?: Subset<T, ReservationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationAggregateArgs>(args: Subset<T, ReservationAggregateArgs>): Prisma.PrismaPromise<GetReservationAggregateType<T>>

    /**
     * Group by Reservation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationGroupByArgs['orderBy'] }
        : { orderBy?: ReservationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reservation model
   */
  readonly fields: ReservationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reservation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Reservation$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Reservation$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Reservation model
   */
  interface ReservationFieldRefs {
    readonly id: FieldRef<"Reservation", 'String'>
    readonly userId: FieldRef<"Reservation", 'String'>
    readonly createdAt: FieldRef<"Reservation", 'DateTime'>
    readonly updatedAt: FieldRef<"Reservation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Reservation findUnique
   */
  export type ReservationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findUniqueOrThrow
   */
  export type ReservationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation findFirst
   */
  export type ReservationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findFirstOrThrow
   */
  export type ReservationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservation to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reservations.
     */
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation findMany
   */
  export type ReservationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter, which Reservations to fetch.
     */
    where?: ReservationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reservations to fetch.
     */
    orderBy?: ReservationOrderByWithRelationInput | ReservationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reservations.
     */
    cursor?: ReservationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reservations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reservations.
     */
    skip?: number
    distinct?: ReservationScalarFieldEnum | ReservationScalarFieldEnum[]
  }

  /**
   * Reservation create
   */
  export type ReservationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to create a Reservation.
     */
    data: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
  }

  /**
   * Reservation createMany
   */
  export type ReservationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reservations.
     */
    data: ReservationCreateManyInput | ReservationCreateManyInput[]
  }

  /**
   * Reservation update
   */
  export type ReservationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The data needed to update a Reservation.
     */
    data: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
    /**
     * Choose, which Reservation to update.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation updateMany
   */
  export type ReservationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reservations.
     */
    data: XOR<ReservationUpdateManyMutationInput, ReservationUncheckedUpdateManyInput>
    /**
     * Filter which Reservations to update
     */
    where?: ReservationWhereInput
    /**
     * Limit how many Reservations to update.
     */
    limit?: number
  }

  /**
   * Reservation upsert
   */
  export type ReservationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * The filter to search for the Reservation to update in case it exists.
     */
    where: ReservationWhereUniqueInput
    /**
     * In case the Reservation found by the `where` argument doesn't exist, create a new Reservation with this data.
     */
    create: XOR<ReservationCreateInput, ReservationUncheckedCreateInput>
    /**
     * In case the Reservation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationUpdateInput, ReservationUncheckedUpdateInput>
  }

  /**
   * Reservation delete
   */
  export type ReservationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
    /**
     * Filter which Reservation to delete.
     */
    where: ReservationWhereUniqueInput
  }

  /**
   * Reservation deleteMany
   */
  export type ReservationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reservations to delete
     */
    where?: ReservationWhereInput
    /**
     * Limit how many Reservations to delete.
     */
    limit?: number
  }

  /**
   * Reservation findRaw
   */
  export type ReservationFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Reservation aggregateRaw
   */
  export type ReservationAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Reservation.items
   */
  export type Reservation$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    where?: ReservationItemWhereInput
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    cursor?: ReservationItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationItemScalarFieldEnum | ReservationItemScalarFieldEnum[]
  }

  /**
   * Reservation without action
   */
  export type ReservationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reservation
     */
    select?: ReservationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Reservation
     */
    omit?: ReservationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationInclude<ExtArgs> | null
  }


  /**
   * Model ReservationItem
   */

  export type AggregateReservationItem = {
    _count: ReservationItemCountAggregateOutputType | null
    _avg: ReservationItemAvgAggregateOutputType | null
    _sum: ReservationItemSumAggregateOutputType | null
    _min: ReservationItemMinAggregateOutputType | null
    _max: ReservationItemMaxAggregateOutputType | null
  }

  export type ReservationItemAvgAggregateOutputType = {
    quantity: number | null
  }

  export type ReservationItemSumAggregateOutputType = {
    quantity: number | null
  }

  export type ReservationItemMinAggregateOutputType = {
    id: string | null
    quantity: number | null
    variantId: string | null
    reservationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationItemMaxAggregateOutputType = {
    id: string | null
    quantity: number | null
    variantId: string | null
    reservationId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReservationItemCountAggregateOutputType = {
    id: number
    quantity: number
    variantId: number
    reservationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReservationItemAvgAggregateInputType = {
    quantity?: true
  }

  export type ReservationItemSumAggregateInputType = {
    quantity?: true
  }

  export type ReservationItemMinAggregateInputType = {
    id?: true
    quantity?: true
    variantId?: true
    reservationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationItemMaxAggregateInputType = {
    id?: true
    quantity?: true
    variantId?: true
    reservationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReservationItemCountAggregateInputType = {
    id?: true
    quantity?: true
    variantId?: true
    reservationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReservationItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReservationItem to aggregate.
     */
    where?: ReservationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReservationItems to fetch.
     */
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReservationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReservationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReservationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReservationItems
    **/
    _count?: true | ReservationItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReservationItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReservationItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReservationItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReservationItemMaxAggregateInputType
  }

  export type GetReservationItemAggregateType<T extends ReservationItemAggregateArgs> = {
        [P in keyof T & keyof AggregateReservationItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReservationItem[P]>
      : GetScalarType<T[P], AggregateReservationItem[P]>
  }




  export type ReservationItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReservationItemWhereInput
    orderBy?: ReservationItemOrderByWithAggregationInput | ReservationItemOrderByWithAggregationInput[]
    by: ReservationItemScalarFieldEnum[] | ReservationItemScalarFieldEnum
    having?: ReservationItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReservationItemCountAggregateInputType | true
    _avg?: ReservationItemAvgAggregateInputType
    _sum?: ReservationItemSumAggregateInputType
    _min?: ReservationItemMinAggregateInputType
    _max?: ReservationItemMaxAggregateInputType
  }

  export type ReservationItemGroupByOutputType = {
    id: string
    quantity: number
    variantId: string
    reservationId: string
    createdAt: Date
    updatedAt: Date
    _count: ReservationItemCountAggregateOutputType | null
    _avg: ReservationItemAvgAggregateOutputType | null
    _sum: ReservationItemSumAggregateOutputType | null
    _min: ReservationItemMinAggregateOutputType | null
    _max: ReservationItemMaxAggregateOutputType | null
  }

  type GetReservationItemGroupByPayload<T extends ReservationItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReservationItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReservationItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReservationItemGroupByOutputType[P]>
            : GetScalarType<T[P], ReservationItemGroupByOutputType[P]>
        }
      >
    >


  export type ReservationItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quantity?: boolean
    variantId?: boolean
    reservationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reservationItem"]>



  export type ReservationItemSelectScalar = {
    id?: boolean
    quantity?: boolean
    variantId?: boolean
    reservationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ReservationItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "quantity" | "variantId" | "reservationId" | "createdAt" | "updatedAt", ExtArgs["result"]["reservationItem"]>
  export type ReservationItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    reservation?: boolean | ReservationDefaultArgs<ExtArgs>
  }

  export type $ReservationItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReservationItem"
    objects: {
      variant: Prisma.$ProductVariantPayload<ExtArgs>
      reservation: Prisma.$ReservationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quantity: number
      variantId: string
      reservationId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["reservationItem"]>
    composites: {}
  }

  type ReservationItemGetPayload<S extends boolean | null | undefined | ReservationItemDefaultArgs> = $Result.GetResult<Prisma.$ReservationItemPayload, S>

  type ReservationItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReservationItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReservationItemCountAggregateInputType | true
    }

  export interface ReservationItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReservationItem'], meta: { name: 'ReservationItem' } }
    /**
     * Find zero or one ReservationItem that matches the filter.
     * @param {ReservationItemFindUniqueArgs} args - Arguments to find a ReservationItem
     * @example
     * // Get one ReservationItem
     * const reservationItem = await prisma.reservationItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReservationItemFindUniqueArgs>(args: SelectSubset<T, ReservationItemFindUniqueArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReservationItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReservationItemFindUniqueOrThrowArgs} args - Arguments to find a ReservationItem
     * @example
     * // Get one ReservationItem
     * const reservationItem = await prisma.reservationItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReservationItemFindUniqueOrThrowArgs>(args: SelectSubset<T, ReservationItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReservationItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemFindFirstArgs} args - Arguments to find a ReservationItem
     * @example
     * // Get one ReservationItem
     * const reservationItem = await prisma.reservationItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReservationItemFindFirstArgs>(args?: SelectSubset<T, ReservationItemFindFirstArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReservationItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemFindFirstOrThrowArgs} args - Arguments to find a ReservationItem
     * @example
     * // Get one ReservationItem
     * const reservationItem = await prisma.reservationItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReservationItemFindFirstOrThrowArgs>(args?: SelectSubset<T, ReservationItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReservationItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReservationItems
     * const reservationItems = await prisma.reservationItem.findMany()
     * 
     * // Get first 10 ReservationItems
     * const reservationItems = await prisma.reservationItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reservationItemWithIdOnly = await prisma.reservationItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReservationItemFindManyArgs>(args?: SelectSubset<T, ReservationItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReservationItem.
     * @param {ReservationItemCreateArgs} args - Arguments to create a ReservationItem.
     * @example
     * // Create one ReservationItem
     * const ReservationItem = await prisma.reservationItem.create({
     *   data: {
     *     // ... data to create a ReservationItem
     *   }
     * })
     * 
     */
    create<T extends ReservationItemCreateArgs>(args: SelectSubset<T, ReservationItemCreateArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReservationItems.
     * @param {ReservationItemCreateManyArgs} args - Arguments to create many ReservationItems.
     * @example
     * // Create many ReservationItems
     * const reservationItem = await prisma.reservationItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReservationItemCreateManyArgs>(args?: SelectSubset<T, ReservationItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ReservationItem.
     * @param {ReservationItemDeleteArgs} args - Arguments to delete one ReservationItem.
     * @example
     * // Delete one ReservationItem
     * const ReservationItem = await prisma.reservationItem.delete({
     *   where: {
     *     // ... filter to delete one ReservationItem
     *   }
     * })
     * 
     */
    delete<T extends ReservationItemDeleteArgs>(args: SelectSubset<T, ReservationItemDeleteArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReservationItem.
     * @param {ReservationItemUpdateArgs} args - Arguments to update one ReservationItem.
     * @example
     * // Update one ReservationItem
     * const reservationItem = await prisma.reservationItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReservationItemUpdateArgs>(args: SelectSubset<T, ReservationItemUpdateArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReservationItems.
     * @param {ReservationItemDeleteManyArgs} args - Arguments to filter ReservationItems to delete.
     * @example
     * // Delete a few ReservationItems
     * const { count } = await prisma.reservationItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReservationItemDeleteManyArgs>(args?: SelectSubset<T, ReservationItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReservationItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReservationItems
     * const reservationItem = await prisma.reservationItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReservationItemUpdateManyArgs>(args: SelectSubset<T, ReservationItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ReservationItem.
     * @param {ReservationItemUpsertArgs} args - Arguments to update or create a ReservationItem.
     * @example
     * // Update or create a ReservationItem
     * const reservationItem = await prisma.reservationItem.upsert({
     *   create: {
     *     // ... data to create a ReservationItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReservationItem we want to update
     *   }
     * })
     */
    upsert<T extends ReservationItemUpsertArgs>(args: SelectSubset<T, ReservationItemUpsertArgs<ExtArgs>>): Prisma__ReservationItemClient<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReservationItems that matches the filter.
     * @param {ReservationItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const reservationItem = await prisma.reservationItem.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ReservationItemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ReservationItem.
     * @param {ReservationItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const reservationItem = await prisma.reservationItem.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ReservationItemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ReservationItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemCountArgs} args - Arguments to filter ReservationItems to count.
     * @example
     * // Count the number of ReservationItems
     * const count = await prisma.reservationItem.count({
     *   where: {
     *     // ... the filter for the ReservationItems we want to count
     *   }
     * })
    **/
    count<T extends ReservationItemCountArgs>(
      args?: Subset<T, ReservationItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReservationItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReservationItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReservationItemAggregateArgs>(args: Subset<T, ReservationItemAggregateArgs>): Prisma.PrismaPromise<GetReservationItemAggregateType<T>>

    /**
     * Group by ReservationItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReservationItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReservationItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReservationItemGroupByArgs['orderBy'] }
        : { orderBy?: ReservationItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReservationItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReservationItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReservationItem model
   */
  readonly fields: ReservationItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReservationItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReservationItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reservation<T extends ReservationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReservationDefaultArgs<ExtArgs>>): Prisma__ReservationClient<$Result.GetResult<Prisma.$ReservationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReservationItem model
   */
  interface ReservationItemFieldRefs {
    readonly id: FieldRef<"ReservationItem", 'String'>
    readonly quantity: FieldRef<"ReservationItem", 'Int'>
    readonly variantId: FieldRef<"ReservationItem", 'String'>
    readonly reservationId: FieldRef<"ReservationItem", 'String'>
    readonly createdAt: FieldRef<"ReservationItem", 'DateTime'>
    readonly updatedAt: FieldRef<"ReservationItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ReservationItem findUnique
   */
  export type ReservationItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter, which ReservationItem to fetch.
     */
    where: ReservationItemWhereUniqueInput
  }

  /**
   * ReservationItem findUniqueOrThrow
   */
  export type ReservationItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter, which ReservationItem to fetch.
     */
    where: ReservationItemWhereUniqueInput
  }

  /**
   * ReservationItem findFirst
   */
  export type ReservationItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter, which ReservationItem to fetch.
     */
    where?: ReservationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReservationItems to fetch.
     */
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReservationItems.
     */
    cursor?: ReservationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReservationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReservationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReservationItems.
     */
    distinct?: ReservationItemScalarFieldEnum | ReservationItemScalarFieldEnum[]
  }

  /**
   * ReservationItem findFirstOrThrow
   */
  export type ReservationItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter, which ReservationItem to fetch.
     */
    where?: ReservationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReservationItems to fetch.
     */
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReservationItems.
     */
    cursor?: ReservationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReservationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReservationItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReservationItems.
     */
    distinct?: ReservationItemScalarFieldEnum | ReservationItemScalarFieldEnum[]
  }

  /**
   * ReservationItem findMany
   */
  export type ReservationItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter, which ReservationItems to fetch.
     */
    where?: ReservationItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReservationItems to fetch.
     */
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReservationItems.
     */
    cursor?: ReservationItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReservationItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReservationItems.
     */
    skip?: number
    distinct?: ReservationItemScalarFieldEnum | ReservationItemScalarFieldEnum[]
  }

  /**
   * ReservationItem create
   */
  export type ReservationItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * The data needed to create a ReservationItem.
     */
    data: XOR<ReservationItemCreateInput, ReservationItemUncheckedCreateInput>
  }

  /**
   * ReservationItem createMany
   */
  export type ReservationItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReservationItems.
     */
    data: ReservationItemCreateManyInput | ReservationItemCreateManyInput[]
  }

  /**
   * ReservationItem update
   */
  export type ReservationItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * The data needed to update a ReservationItem.
     */
    data: XOR<ReservationItemUpdateInput, ReservationItemUncheckedUpdateInput>
    /**
     * Choose, which ReservationItem to update.
     */
    where: ReservationItemWhereUniqueInput
  }

  /**
   * ReservationItem updateMany
   */
  export type ReservationItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReservationItems.
     */
    data: XOR<ReservationItemUpdateManyMutationInput, ReservationItemUncheckedUpdateManyInput>
    /**
     * Filter which ReservationItems to update
     */
    where?: ReservationItemWhereInput
    /**
     * Limit how many ReservationItems to update.
     */
    limit?: number
  }

  /**
   * ReservationItem upsert
   */
  export type ReservationItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * The filter to search for the ReservationItem to update in case it exists.
     */
    where: ReservationItemWhereUniqueInput
    /**
     * In case the ReservationItem found by the `where` argument doesn't exist, create a new ReservationItem with this data.
     */
    create: XOR<ReservationItemCreateInput, ReservationItemUncheckedCreateInput>
    /**
     * In case the ReservationItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReservationItemUpdateInput, ReservationItemUncheckedUpdateInput>
  }

  /**
   * ReservationItem delete
   */
  export type ReservationItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    /**
     * Filter which ReservationItem to delete.
     */
    where: ReservationItemWhereUniqueInput
  }

  /**
   * ReservationItem deleteMany
   */
  export type ReservationItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReservationItems to delete
     */
    where?: ReservationItemWhereInput
    /**
     * Limit how many ReservationItems to delete.
     */
    limit?: number
  }

  /**
   * ReservationItem findRaw
   */
  export type ReservationItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ReservationItem aggregateRaw
   */
  export type ReservationItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ReservationItem without action
   */
  export type ReservationItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
  }


  /**
   * Model ProductVariant
   */

  export type AggregateProductVariant = {
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  export type ProductVariantAvgAggregateOutputType = {
    price: number | null
    lowStockThreshold: number | null
  }

  export type ProductVariantSumAggregateOutputType = {
    price: number | null
    lowStockThreshold: number | null
  }

  export type ProductVariantMinAggregateOutputType = {
    id: string | null
    name: string | null
    sku: string | null
    price: number | null
    lowStockThreshold: number | null
    colorValue: string | null
    colorName: string | null
    productId: string | null
    warehouseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductVariantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    sku: string | null
    price: number | null
    lowStockThreshold: number | null
    colorValue: string | null
    colorName: string | null
    productId: string | null
    warehouseId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductVariantCountAggregateOutputType = {
    id: number
    name: number
    sku: number
    price: number
    lowStockThreshold: number
    colorValue: number
    colorName: number
    attributesIds: number
    imageIds: number
    productId: number
    warehouseId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductVariantAvgAggregateInputType = {
    price?: true
    lowStockThreshold?: true
  }

  export type ProductVariantSumAggregateInputType = {
    price?: true
    lowStockThreshold?: true
  }

  export type ProductVariantMinAggregateInputType = {
    id?: true
    name?: true
    sku?: true
    price?: true
    lowStockThreshold?: true
    colorValue?: true
    colorName?: true
    productId?: true
    warehouseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductVariantMaxAggregateInputType = {
    id?: true
    name?: true
    sku?: true
    price?: true
    lowStockThreshold?: true
    colorValue?: true
    colorName?: true
    productId?: true
    warehouseId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductVariantCountAggregateInputType = {
    id?: true
    name?: true
    sku?: true
    price?: true
    lowStockThreshold?: true
    colorValue?: true
    colorName?: true
    attributesIds?: true
    imageIds?: true
    productId?: true
    warehouseId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductVariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariant to aggregate.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductVariants
    **/
    _count?: true | ProductVariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductVariantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductVariantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductVariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductVariantMaxAggregateInputType
  }

  export type GetProductVariantAggregateType<T extends ProductVariantAggregateArgs> = {
        [P in keyof T & keyof AggregateProductVariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductVariant[P]>
      : GetScalarType<T[P], AggregateProductVariant[P]>
  }




  export type ProductVariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithAggregationInput | ProductVariantOrderByWithAggregationInput[]
    by: ProductVariantScalarFieldEnum[] | ProductVariantScalarFieldEnum
    having?: ProductVariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductVariantCountAggregateInputType | true
    _avg?: ProductVariantAvgAggregateInputType
    _sum?: ProductVariantSumAggregateInputType
    _min?: ProductVariantMinAggregateInputType
    _max?: ProductVariantMaxAggregateInputType
  }

  export type ProductVariantGroupByOutputType = {
    id: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue: string | null
    colorName: string | null
    attributesIds: string[]
    imageIds: string[]
    productId: string
    warehouseId: string
    createdAt: Date
    updatedAt: Date
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  type GetProductVariantGroupByPayload<T extends ProductVariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductVariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductVariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
            : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
        }
      >
    >


  export type ProductVariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    sku?: boolean
    price?: boolean
    lowStockThreshold?: boolean
    colorValue?: boolean
    colorName?: boolean
    attributesIds?: boolean
    imageIds?: boolean
    productId?: boolean
    warehouseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    attributes?: boolean | ProductVariant$attributesArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
    stock?: boolean | ProductVariant$stockArgs<ExtArgs>
    reservationItems?: boolean | ProductVariant$reservationItemsArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>



  export type ProductVariantSelectScalar = {
    id?: boolean
    name?: boolean
    sku?: boolean
    price?: boolean
    lowStockThreshold?: boolean
    colorValue?: boolean
    colorName?: boolean
    attributesIds?: boolean
    imageIds?: boolean
    productId?: boolean
    warehouseId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductVariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "sku" | "price" | "lowStockThreshold" | "colorValue" | "colorName" | "attributesIds" | "imageIds" | "productId" | "warehouseId" | "createdAt" | "updatedAt", ExtArgs["result"]["productVariant"]>
  export type ProductVariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attributes?: boolean | ProductVariant$attributesArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
    stock?: boolean | ProductVariant$stockArgs<ExtArgs>
    reservationItems?: boolean | ProductVariant$reservationItemsArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductVariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductVariant"
    objects: {
      attributes: Prisma.$VariantAttributePayload<ExtArgs>[]
      product: Prisma.$ProductPayload<ExtArgs>
      warehouse: Prisma.$WarehousePayload<ExtArgs>
      stock: Prisma.$StockPayload<ExtArgs> | null
      reservationItems: Prisma.$ReservationItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      sku: string
      price: number
      lowStockThreshold: number
      colorValue: string | null
      colorName: string | null
      attributesIds: string[]
      imageIds: string[]
      productId: string
      warehouseId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productVariant"]>
    composites: {}
  }

  type ProductVariantGetPayload<S extends boolean | null | undefined | ProductVariantDefaultArgs> = $Result.GetResult<Prisma.$ProductVariantPayload, S>

  type ProductVariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductVariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductVariantCountAggregateInputType | true
    }

  export interface ProductVariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductVariant'], meta: { name: 'ProductVariant' } }
    /**
     * Find zero or one ProductVariant that matches the filter.
     * @param {ProductVariantFindUniqueArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductVariantFindUniqueArgs>(args: SelectSubset<T, ProductVariantFindUniqueArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductVariant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductVariantFindUniqueOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductVariantFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductVariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductVariantFindFirstArgs>(args?: SelectSubset<T, ProductVariantFindFirstArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductVariantFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductVariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductVariants
     * const productVariants = await prisma.productVariant.findMany()
     * 
     * // Get first 10 ProductVariants
     * const productVariants = await prisma.productVariant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductVariantFindManyArgs>(args?: SelectSubset<T, ProductVariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductVariant.
     * @param {ProductVariantCreateArgs} args - Arguments to create a ProductVariant.
     * @example
     * // Create one ProductVariant
     * const ProductVariant = await prisma.productVariant.create({
     *   data: {
     *     // ... data to create a ProductVariant
     *   }
     * })
     * 
     */
    create<T extends ProductVariantCreateArgs>(args: SelectSubset<T, ProductVariantCreateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductVariants.
     * @param {ProductVariantCreateManyArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductVariantCreateManyArgs>(args?: SelectSubset<T, ProductVariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductVariant.
     * @param {ProductVariantDeleteArgs} args - Arguments to delete one ProductVariant.
     * @example
     * // Delete one ProductVariant
     * const ProductVariant = await prisma.productVariant.delete({
     *   where: {
     *     // ... filter to delete one ProductVariant
     *   }
     * })
     * 
     */
    delete<T extends ProductVariantDeleteArgs>(args: SelectSubset<T, ProductVariantDeleteArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductVariant.
     * @param {ProductVariantUpdateArgs} args - Arguments to update one ProductVariant.
     * @example
     * // Update one ProductVariant
     * const productVariant = await prisma.productVariant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductVariantUpdateArgs>(args: SelectSubset<T, ProductVariantUpdateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductVariants.
     * @param {ProductVariantDeleteManyArgs} args - Arguments to filter ProductVariants to delete.
     * @example
     * // Delete a few ProductVariants
     * const { count } = await prisma.productVariant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductVariantDeleteManyArgs>(args?: SelectSubset<T, ProductVariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductVariantUpdateManyArgs>(args: SelectSubset<T, ProductVariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductVariant.
     * @param {ProductVariantUpsertArgs} args - Arguments to update or create a ProductVariant.
     * @example
     * // Update or create a ProductVariant
     * const productVariant = await prisma.productVariant.upsert({
     *   create: {
     *     // ... data to create a ProductVariant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductVariant we want to update
     *   }
     * })
     */
    upsert<T extends ProductVariantUpsertArgs>(args: SelectSubset<T, ProductVariantUpsertArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductVariants that matches the filter.
     * @param {ProductVariantFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productVariant = await prisma.productVariant.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductVariantFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductVariant.
     * @param {ProductVariantAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productVariant = await prisma.productVariant.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductVariantAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantCountArgs} args - Arguments to filter ProductVariants to count.
     * @example
     * // Count the number of ProductVariants
     * const count = await prisma.productVariant.count({
     *   where: {
     *     // ... the filter for the ProductVariants we want to count
     *   }
     * })
    **/
    count<T extends ProductVariantCountArgs>(
      args?: Subset<T, ProductVariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductVariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductVariantAggregateArgs>(args: Subset<T, ProductVariantAggregateArgs>): Prisma.PrismaPromise<GetProductVariantAggregateType<T>>

    /**
     * Group by ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductVariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductVariantGroupByArgs['orderBy'] }
        : { orderBy?: ProductVariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductVariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductVariant model
   */
  readonly fields: ProductVariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductVariant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductVariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attributes<T extends ProductVariant$attributesArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$attributesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    warehouse<T extends WarehouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WarehouseDefaultArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    stock<T extends ProductVariant$stockArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$stockArgs<ExtArgs>>): Prisma__StockClient<$Result.GetResult<Prisma.$StockPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reservationItems<T extends ProductVariant$reservationItemsArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$reservationItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReservationItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductVariant model
   */
  interface ProductVariantFieldRefs {
    readonly id: FieldRef<"ProductVariant", 'String'>
    readonly name: FieldRef<"ProductVariant", 'String'>
    readonly sku: FieldRef<"ProductVariant", 'String'>
    readonly price: FieldRef<"ProductVariant", 'Float'>
    readonly lowStockThreshold: FieldRef<"ProductVariant", 'Int'>
    readonly colorValue: FieldRef<"ProductVariant", 'String'>
    readonly colorName: FieldRef<"ProductVariant", 'String'>
    readonly attributesIds: FieldRef<"ProductVariant", 'String[]'>
    readonly imageIds: FieldRef<"ProductVariant", 'String[]'>
    readonly productId: FieldRef<"ProductVariant", 'String'>
    readonly warehouseId: FieldRef<"ProductVariant", 'String'>
    readonly createdAt: FieldRef<"ProductVariant", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductVariant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductVariant findUnique
   */
  export type ProductVariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findUniqueOrThrow
   */
  export type ProductVariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findFirst
   */
  export type ProductVariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findFirstOrThrow
   */
  export type ProductVariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findMany
   */
  export type ProductVariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariants to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant create
   */
  export type ProductVariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductVariant.
     */
    data: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
  }

  /**
   * ProductVariant createMany
   */
  export type ProductVariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
  }

  /**
   * ProductVariant update
   */
  export type ProductVariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductVariant.
     */
    data: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
    /**
     * Choose, which ProductVariant to update.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant updateMany
   */
  export type ProductVariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
  }

  /**
   * ProductVariant upsert
   */
  export type ProductVariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductVariant to update in case it exists.
     */
    where: ProductVariantWhereUniqueInput
    /**
     * In case the ProductVariant found by the `where` argument doesn't exist, create a new ProductVariant with this data.
     */
    create: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
    /**
     * In case the ProductVariant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
  }

  /**
   * ProductVariant delete
   */
  export type ProductVariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter which ProductVariant to delete.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant deleteMany
   */
  export type ProductVariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariants to delete
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to delete.
     */
    limit?: number
  }

  /**
   * ProductVariant findRaw
   */
  export type ProductVariantFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductVariant aggregateRaw
   */
  export type ProductVariantAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductVariant.attributes
   */
  export type ProductVariant$attributesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    where?: VariantAttributeWhereInput
    orderBy?: VariantAttributeOrderByWithRelationInput | VariantAttributeOrderByWithRelationInput[]
    cursor?: VariantAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VariantAttributeScalarFieldEnum | VariantAttributeScalarFieldEnum[]
  }

  /**
   * ProductVariant.stock
   */
  export type ProductVariant$stockArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stock
     */
    select?: StockSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stock
     */
    omit?: StockOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StockInclude<ExtArgs> | null
    where?: StockWhereInput
  }

  /**
   * ProductVariant.reservationItems
   */
  export type ProductVariant$reservationItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReservationItem
     */
    select?: ReservationItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReservationItem
     */
    omit?: ReservationItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReservationItemInclude<ExtArgs> | null
    where?: ReservationItemWhereInput
    orderBy?: ReservationItemOrderByWithRelationInput | ReservationItemOrderByWithRelationInput[]
    cursor?: ReservationItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReservationItemScalarFieldEnum | ReservationItemScalarFieldEnum[]
  }

  /**
   * ProductVariant without action
   */
  export type ProductVariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
  }


  /**
   * Model VariantAttribute
   */

  export type AggregateVariantAttribute = {
    _count: VariantAttributeCountAggregateOutputType | null
    _min: VariantAttributeMinAggregateOutputType | null
    _max: VariantAttributeMaxAggregateOutputType | null
  }

  export type VariantAttributeMinAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    extraValue: string | null
    variantId: string | null
  }

  export type VariantAttributeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    value: string | null
    extraValue: string | null
    variantId: string | null
  }

  export type VariantAttributeCountAggregateOutputType = {
    id: number
    name: number
    value: number
    extraValue: number
    variantId: number
    _all: number
  }


  export type VariantAttributeMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    extraValue?: true
    variantId?: true
  }

  export type VariantAttributeMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    extraValue?: true
    variantId?: true
  }

  export type VariantAttributeCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    extraValue?: true
    variantId?: true
    _all?: true
  }

  export type VariantAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VariantAttribute to aggregate.
     */
    where?: VariantAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantAttributes to fetch.
     */
    orderBy?: VariantAttributeOrderByWithRelationInput | VariantAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VariantAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VariantAttributes
    **/
    _count?: true | VariantAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariantAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariantAttributeMaxAggregateInputType
  }

  export type GetVariantAttributeAggregateType<T extends VariantAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateVariantAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariantAttribute[P]>
      : GetScalarType<T[P], AggregateVariantAttribute[P]>
  }




  export type VariantAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantAttributeWhereInput
    orderBy?: VariantAttributeOrderByWithAggregationInput | VariantAttributeOrderByWithAggregationInput[]
    by: VariantAttributeScalarFieldEnum[] | VariantAttributeScalarFieldEnum
    having?: VariantAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariantAttributeCountAggregateInputType | true
    _min?: VariantAttributeMinAggregateInputType
    _max?: VariantAttributeMaxAggregateInputType
  }

  export type VariantAttributeGroupByOutputType = {
    id: string
    name: string
    value: string
    extraValue: string | null
    variantId: string
    _count: VariantAttributeCountAggregateOutputType | null
    _min: VariantAttributeMinAggregateOutputType | null
    _max: VariantAttributeMaxAggregateOutputType | null
  }

  type GetVariantAttributeGroupByPayload<T extends VariantAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariantAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariantAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariantAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], VariantAttributeGroupByOutputType[P]>
        }
      >
    >


  export type VariantAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    value?: boolean
    extraValue?: boolean
    variantId?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variantAttribute"]>



  export type VariantAttributeSelectScalar = {
    id?: boolean
    name?: boolean
    value?: boolean
    extraValue?: boolean
    variantId?: boolean
  }

  export type VariantAttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "value" | "extraValue" | "variantId", ExtArgs["result"]["variantAttribute"]>
  export type VariantAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }

  export type $VariantAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VariantAttribute"
    objects: {
      variant: Prisma.$ProductVariantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      value: string
      extraValue: string | null
      variantId: string
    }, ExtArgs["result"]["variantAttribute"]>
    composites: {}
  }

  type VariantAttributeGetPayload<S extends boolean | null | undefined | VariantAttributeDefaultArgs> = $Result.GetResult<Prisma.$VariantAttributePayload, S>

  type VariantAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VariantAttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VariantAttributeCountAggregateInputType | true
    }

  export interface VariantAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VariantAttribute'], meta: { name: 'VariantAttribute' } }
    /**
     * Find zero or one VariantAttribute that matches the filter.
     * @param {VariantAttributeFindUniqueArgs} args - Arguments to find a VariantAttribute
     * @example
     * // Get one VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VariantAttributeFindUniqueArgs>(args: SelectSubset<T, VariantAttributeFindUniqueArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VariantAttribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VariantAttributeFindUniqueOrThrowArgs} args - Arguments to find a VariantAttribute
     * @example
     * // Get one VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VariantAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, VariantAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VariantAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeFindFirstArgs} args - Arguments to find a VariantAttribute
     * @example
     * // Get one VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VariantAttributeFindFirstArgs>(args?: SelectSubset<T, VariantAttributeFindFirstArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VariantAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeFindFirstOrThrowArgs} args - Arguments to find a VariantAttribute
     * @example
     * // Get one VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VariantAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, VariantAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VariantAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VariantAttributes
     * const variantAttributes = await prisma.variantAttribute.findMany()
     * 
     * // Get first 10 VariantAttributes
     * const variantAttributes = await prisma.variantAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variantAttributeWithIdOnly = await prisma.variantAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VariantAttributeFindManyArgs>(args?: SelectSubset<T, VariantAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VariantAttribute.
     * @param {VariantAttributeCreateArgs} args - Arguments to create a VariantAttribute.
     * @example
     * // Create one VariantAttribute
     * const VariantAttribute = await prisma.variantAttribute.create({
     *   data: {
     *     // ... data to create a VariantAttribute
     *   }
     * })
     * 
     */
    create<T extends VariantAttributeCreateArgs>(args: SelectSubset<T, VariantAttributeCreateArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VariantAttributes.
     * @param {VariantAttributeCreateManyArgs} args - Arguments to create many VariantAttributes.
     * @example
     * // Create many VariantAttributes
     * const variantAttribute = await prisma.variantAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VariantAttributeCreateManyArgs>(args?: SelectSubset<T, VariantAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VariantAttribute.
     * @param {VariantAttributeDeleteArgs} args - Arguments to delete one VariantAttribute.
     * @example
     * // Delete one VariantAttribute
     * const VariantAttribute = await prisma.variantAttribute.delete({
     *   where: {
     *     // ... filter to delete one VariantAttribute
     *   }
     * })
     * 
     */
    delete<T extends VariantAttributeDeleteArgs>(args: SelectSubset<T, VariantAttributeDeleteArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VariantAttribute.
     * @param {VariantAttributeUpdateArgs} args - Arguments to update one VariantAttribute.
     * @example
     * // Update one VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VariantAttributeUpdateArgs>(args: SelectSubset<T, VariantAttributeUpdateArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VariantAttributes.
     * @param {VariantAttributeDeleteManyArgs} args - Arguments to filter VariantAttributes to delete.
     * @example
     * // Delete a few VariantAttributes
     * const { count } = await prisma.variantAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VariantAttributeDeleteManyArgs>(args?: SelectSubset<T, VariantAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VariantAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VariantAttributes
     * const variantAttribute = await prisma.variantAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VariantAttributeUpdateManyArgs>(args: SelectSubset<T, VariantAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VariantAttribute.
     * @param {VariantAttributeUpsertArgs} args - Arguments to update or create a VariantAttribute.
     * @example
     * // Update or create a VariantAttribute
     * const variantAttribute = await prisma.variantAttribute.upsert({
     *   create: {
     *     // ... data to create a VariantAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VariantAttribute we want to update
     *   }
     * })
     */
    upsert<T extends VariantAttributeUpsertArgs>(args: SelectSubset<T, VariantAttributeUpsertArgs<ExtArgs>>): Prisma__VariantAttributeClient<$Result.GetResult<Prisma.$VariantAttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VariantAttributes that matches the filter.
     * @param {VariantAttributeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const variantAttribute = await prisma.variantAttribute.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: VariantAttributeFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a VariantAttribute.
     * @param {VariantAttributeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const variantAttribute = await prisma.variantAttribute.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: VariantAttributeAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of VariantAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeCountArgs} args - Arguments to filter VariantAttributes to count.
     * @example
     * // Count the number of VariantAttributes
     * const count = await prisma.variantAttribute.count({
     *   where: {
     *     // ... the filter for the VariantAttributes we want to count
     *   }
     * })
    **/
    count<T extends VariantAttributeCountArgs>(
      args?: Subset<T, VariantAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariantAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VariantAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariantAttributeAggregateArgs>(args: Subset<T, VariantAttributeAggregateArgs>): Prisma.PrismaPromise<GetVariantAttributeAggregateType<T>>

    /**
     * Group by VariantAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VariantAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VariantAttributeGroupByArgs['orderBy'] }
        : { orderBy?: VariantAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VariantAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariantAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VariantAttribute model
   */
  readonly fields: VariantAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VariantAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VariantAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VariantAttribute model
   */
  interface VariantAttributeFieldRefs {
    readonly id: FieldRef<"VariantAttribute", 'String'>
    readonly name: FieldRef<"VariantAttribute", 'String'>
    readonly value: FieldRef<"VariantAttribute", 'String'>
    readonly extraValue: FieldRef<"VariantAttribute", 'String'>
    readonly variantId: FieldRef<"VariantAttribute", 'String'>
  }
    

  // Custom InputTypes
  /**
   * VariantAttribute findUnique
   */
  export type VariantAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter, which VariantAttribute to fetch.
     */
    where: VariantAttributeWhereUniqueInput
  }

  /**
   * VariantAttribute findUniqueOrThrow
   */
  export type VariantAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter, which VariantAttribute to fetch.
     */
    where: VariantAttributeWhereUniqueInput
  }

  /**
   * VariantAttribute findFirst
   */
  export type VariantAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter, which VariantAttribute to fetch.
     */
    where?: VariantAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantAttributes to fetch.
     */
    orderBy?: VariantAttributeOrderByWithRelationInput | VariantAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VariantAttributes.
     */
    cursor?: VariantAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VariantAttributes.
     */
    distinct?: VariantAttributeScalarFieldEnum | VariantAttributeScalarFieldEnum[]
  }

  /**
   * VariantAttribute findFirstOrThrow
   */
  export type VariantAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter, which VariantAttribute to fetch.
     */
    where?: VariantAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantAttributes to fetch.
     */
    orderBy?: VariantAttributeOrderByWithRelationInput | VariantAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VariantAttributes.
     */
    cursor?: VariantAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VariantAttributes.
     */
    distinct?: VariantAttributeScalarFieldEnum | VariantAttributeScalarFieldEnum[]
  }

  /**
   * VariantAttribute findMany
   */
  export type VariantAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter, which VariantAttributes to fetch.
     */
    where?: VariantAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantAttributes to fetch.
     */
    orderBy?: VariantAttributeOrderByWithRelationInput | VariantAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VariantAttributes.
     */
    cursor?: VariantAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantAttributes.
     */
    skip?: number
    distinct?: VariantAttributeScalarFieldEnum | VariantAttributeScalarFieldEnum[]
  }

  /**
   * VariantAttribute create
   */
  export type VariantAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a VariantAttribute.
     */
    data: XOR<VariantAttributeCreateInput, VariantAttributeUncheckedCreateInput>
  }

  /**
   * VariantAttribute createMany
   */
  export type VariantAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VariantAttributes.
     */
    data: VariantAttributeCreateManyInput | VariantAttributeCreateManyInput[]
  }

  /**
   * VariantAttribute update
   */
  export type VariantAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a VariantAttribute.
     */
    data: XOR<VariantAttributeUpdateInput, VariantAttributeUncheckedUpdateInput>
    /**
     * Choose, which VariantAttribute to update.
     */
    where: VariantAttributeWhereUniqueInput
  }

  /**
   * VariantAttribute updateMany
   */
  export type VariantAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VariantAttributes.
     */
    data: XOR<VariantAttributeUpdateManyMutationInput, VariantAttributeUncheckedUpdateManyInput>
    /**
     * Filter which VariantAttributes to update
     */
    where?: VariantAttributeWhereInput
    /**
     * Limit how many VariantAttributes to update.
     */
    limit?: number
  }

  /**
   * VariantAttribute upsert
   */
  export type VariantAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the VariantAttribute to update in case it exists.
     */
    where: VariantAttributeWhereUniqueInput
    /**
     * In case the VariantAttribute found by the `where` argument doesn't exist, create a new VariantAttribute with this data.
     */
    create: XOR<VariantAttributeCreateInput, VariantAttributeUncheckedCreateInput>
    /**
     * In case the VariantAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VariantAttributeUpdateInput, VariantAttributeUncheckedUpdateInput>
  }

  /**
   * VariantAttribute delete
   */
  export type VariantAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
    /**
     * Filter which VariantAttribute to delete.
     */
    where: VariantAttributeWhereUniqueInput
  }

  /**
   * VariantAttribute deleteMany
   */
  export type VariantAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VariantAttributes to delete
     */
    where?: VariantAttributeWhereInput
    /**
     * Limit how many VariantAttributes to delete.
     */
    limit?: number
  }

  /**
   * VariantAttribute findRaw
   */
  export type VariantAttributeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * VariantAttribute aggregateRaw
   */
  export type VariantAttributeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * VariantAttribute without action
   */
  export type VariantAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantAttribute
     */
    select?: VariantAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantAttribute
     */
    omit?: VariantAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantAttributeInclude<ExtArgs> | null
  }


  /**
   * Model ProductAttribute
   */

  export type AggregateProductAttribute = {
    _count: ProductAttributeCountAggregateOutputType | null
    _avg: ProductAttributeAvgAggregateOutputType | null
    _sum: ProductAttributeSumAggregateOutputType | null
    _min: ProductAttributeMinAggregateOutputType | null
    _max: ProductAttributeMaxAggregateOutputType | null
  }

  export type ProductAttributeAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type ProductAttributeSumAggregateOutputType = {
    displayOrder: number | null
  }

  export type ProductAttributeMinAggregateOutputType = {
    id: string | null
    name: string | null
    required: boolean | null
    visible: boolean | null
    variantable: boolean | null
    filterable: boolean | null
    searchable: boolean | null
    displayOrder: number | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductAttributeMaxAggregateOutputType = {
    id: string | null
    name: string | null
    required: boolean | null
    visible: boolean | null
    variantable: boolean | null
    filterable: boolean | null
    searchable: boolean | null
    displayOrder: number | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductAttributeCountAggregateOutputType = {
    id: number
    name: number
    required: number
    visible: number
    variantable: number
    filterable: number
    searchable: number
    displayOrder: number
    values: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAttributeAvgAggregateInputType = {
    displayOrder?: true
  }

  export type ProductAttributeSumAggregateInputType = {
    displayOrder?: true
  }

  export type ProductAttributeMinAggregateInputType = {
    id?: true
    name?: true
    required?: true
    visible?: true
    variantable?: true
    filterable?: true
    searchable?: true
    displayOrder?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductAttributeMaxAggregateInputType = {
    id?: true
    name?: true
    required?: true
    visible?: true
    variantable?: true
    filterable?: true
    searchable?: true
    displayOrder?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductAttributeCountAggregateInputType = {
    id?: true
    name?: true
    required?: true
    visible?: true
    variantable?: true
    filterable?: true
    searchable?: true
    displayOrder?: true
    values?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAttribute to aggregate.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductAttributes
    **/
    _count?: true | ProductAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductAttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductAttributeMaxAggregateInputType
  }

  export type GetProductAttributeAggregateType<T extends ProductAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateProductAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductAttribute[P]>
      : GetScalarType<T[P], AggregateProductAttribute[P]>
  }




  export type ProductAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAttributeWhereInput
    orderBy?: ProductAttributeOrderByWithAggregationInput | ProductAttributeOrderByWithAggregationInput[]
    by: ProductAttributeScalarFieldEnum[] | ProductAttributeScalarFieldEnum
    having?: ProductAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductAttributeCountAggregateInputType | true
    _avg?: ProductAttributeAvgAggregateInputType
    _sum?: ProductAttributeSumAggregateInputType
    _min?: ProductAttributeMinAggregateInputType
    _max?: ProductAttributeMaxAggregateInputType
  }

  export type ProductAttributeGroupByOutputType = {
    id: string
    name: string
    required: boolean
    visible: boolean
    variantable: boolean
    filterable: boolean
    searchable: boolean
    displayOrder: number
    values: string[]
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: ProductAttributeCountAggregateOutputType | null
    _avg: ProductAttributeAvgAggregateOutputType | null
    _sum: ProductAttributeSumAggregateOutputType | null
    _min: ProductAttributeMinAggregateOutputType | null
    _max: ProductAttributeMaxAggregateOutputType | null
  }

  type GetProductAttributeGroupByPayload<T extends ProductAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], ProductAttributeGroupByOutputType[P]>
        }
      >
    >


  export type ProductAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: boolean
    values?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productAttribute"]>



  export type ProductAttributeSelectScalar = {
    id?: boolean
    name?: boolean
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: boolean
    values?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductAttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "required" | "visible" | "variantable" | "filterable" | "searchable" | "displayOrder" | "values" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["productAttribute"]>
  export type ProductAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductAttribute"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      required: boolean
      visible: boolean
      variantable: boolean
      filterable: boolean
      searchable: boolean
      displayOrder: number
      values: string[]
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productAttribute"]>
    composites: {}
  }

  type ProductAttributeGetPayload<S extends boolean | null | undefined | ProductAttributeDefaultArgs> = $Result.GetResult<Prisma.$ProductAttributePayload, S>

  type ProductAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductAttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductAttributeCountAggregateInputType | true
    }

  export interface ProductAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductAttribute'], meta: { name: 'ProductAttribute' } }
    /**
     * Find zero or one ProductAttribute that matches the filter.
     * @param {ProductAttributeFindUniqueArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductAttributeFindUniqueArgs>(args: SelectSubset<T, ProductAttributeFindUniqueArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductAttribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductAttributeFindUniqueOrThrowArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindFirstArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductAttributeFindFirstArgs>(args?: SelectSubset<T, ProductAttributeFindFirstArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindFirstOrThrowArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductAttributes
     * const productAttributes = await prisma.productAttribute.findMany()
     * 
     * // Get first 10 ProductAttributes
     * const productAttributes = await prisma.productAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productAttributeWithIdOnly = await prisma.productAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductAttributeFindManyArgs>(args?: SelectSubset<T, ProductAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductAttribute.
     * @param {ProductAttributeCreateArgs} args - Arguments to create a ProductAttribute.
     * @example
     * // Create one ProductAttribute
     * const ProductAttribute = await prisma.productAttribute.create({
     *   data: {
     *     // ... data to create a ProductAttribute
     *   }
     * })
     * 
     */
    create<T extends ProductAttributeCreateArgs>(args: SelectSubset<T, ProductAttributeCreateArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductAttributes.
     * @param {ProductAttributeCreateManyArgs} args - Arguments to create many ProductAttributes.
     * @example
     * // Create many ProductAttributes
     * const productAttribute = await prisma.productAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductAttributeCreateManyArgs>(args?: SelectSubset<T, ProductAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductAttribute.
     * @param {ProductAttributeDeleteArgs} args - Arguments to delete one ProductAttribute.
     * @example
     * // Delete one ProductAttribute
     * const ProductAttribute = await prisma.productAttribute.delete({
     *   where: {
     *     // ... filter to delete one ProductAttribute
     *   }
     * })
     * 
     */
    delete<T extends ProductAttributeDeleteArgs>(args: SelectSubset<T, ProductAttributeDeleteArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductAttribute.
     * @param {ProductAttributeUpdateArgs} args - Arguments to update one ProductAttribute.
     * @example
     * // Update one ProductAttribute
     * const productAttribute = await prisma.productAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductAttributeUpdateArgs>(args: SelectSubset<T, ProductAttributeUpdateArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductAttributes.
     * @param {ProductAttributeDeleteManyArgs} args - Arguments to filter ProductAttributes to delete.
     * @example
     * // Delete a few ProductAttributes
     * const { count } = await prisma.productAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductAttributeDeleteManyArgs>(args?: SelectSubset<T, ProductAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductAttributes
     * const productAttribute = await prisma.productAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductAttributeUpdateManyArgs>(args: SelectSubset<T, ProductAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductAttribute.
     * @param {ProductAttributeUpsertArgs} args - Arguments to update or create a ProductAttribute.
     * @example
     * // Update or create a ProductAttribute
     * const productAttribute = await prisma.productAttribute.upsert({
     *   create: {
     *     // ... data to create a ProductAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductAttribute we want to update
     *   }
     * })
     */
    upsert<T extends ProductAttributeUpsertArgs>(args: SelectSubset<T, ProductAttributeUpsertArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductAttributes that matches the filter.
     * @param {ProductAttributeFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productAttribute = await prisma.productAttribute.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductAttributeFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductAttribute.
     * @param {ProductAttributeAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productAttribute = await prisma.productAttribute.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductAttributeAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeCountArgs} args - Arguments to filter ProductAttributes to count.
     * @example
     * // Count the number of ProductAttributes
     * const count = await prisma.productAttribute.count({
     *   where: {
     *     // ... the filter for the ProductAttributes we want to count
     *   }
     * })
    **/
    count<T extends ProductAttributeCountArgs>(
      args?: Subset<T, ProductAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAttributeAggregateArgs>(args: Subset<T, ProductAttributeAggregateArgs>): Prisma.PrismaPromise<GetProductAttributeAggregateType<T>>

    /**
     * Group by ProductAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductAttributeGroupByArgs['orderBy'] }
        : { orderBy?: ProductAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductAttribute model
   */
  readonly fields: ProductAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductAttribute model
   */
  interface ProductAttributeFieldRefs {
    readonly id: FieldRef<"ProductAttribute", 'String'>
    readonly name: FieldRef<"ProductAttribute", 'String'>
    readonly required: FieldRef<"ProductAttribute", 'Boolean'>
    readonly visible: FieldRef<"ProductAttribute", 'Boolean'>
    readonly variantable: FieldRef<"ProductAttribute", 'Boolean'>
    readonly filterable: FieldRef<"ProductAttribute", 'Boolean'>
    readonly searchable: FieldRef<"ProductAttribute", 'Boolean'>
    readonly displayOrder: FieldRef<"ProductAttribute", 'Int'>
    readonly values: FieldRef<"ProductAttribute", 'String[]'>
    readonly productId: FieldRef<"ProductAttribute", 'String'>
    readonly createdAt: FieldRef<"ProductAttribute", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductAttribute", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductAttribute findUnique
   */
  export type ProductAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute findUniqueOrThrow
   */
  export type ProductAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute findFirst
   */
  export type ProductAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAttributes.
     */
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute findFirstOrThrow
   */
  export type ProductAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAttributes.
     */
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute findMany
   */
  export type ProductAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttributes to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute create
   */
  export type ProductAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductAttribute.
     */
    data: XOR<ProductAttributeCreateInput, ProductAttributeUncheckedCreateInput>
  }

  /**
   * ProductAttribute createMany
   */
  export type ProductAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductAttributes.
     */
    data: ProductAttributeCreateManyInput | ProductAttributeCreateManyInput[]
  }

  /**
   * ProductAttribute update
   */
  export type ProductAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductAttribute.
     */
    data: XOR<ProductAttributeUpdateInput, ProductAttributeUncheckedUpdateInput>
    /**
     * Choose, which ProductAttribute to update.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute updateMany
   */
  export type ProductAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductAttributes.
     */
    data: XOR<ProductAttributeUpdateManyMutationInput, ProductAttributeUncheckedUpdateManyInput>
    /**
     * Filter which ProductAttributes to update
     */
    where?: ProductAttributeWhereInput
    /**
     * Limit how many ProductAttributes to update.
     */
    limit?: number
  }

  /**
   * ProductAttribute upsert
   */
  export type ProductAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductAttribute to update in case it exists.
     */
    where: ProductAttributeWhereUniqueInput
    /**
     * In case the ProductAttribute found by the `where` argument doesn't exist, create a new ProductAttribute with this data.
     */
    create: XOR<ProductAttributeCreateInput, ProductAttributeUncheckedCreateInput>
    /**
     * In case the ProductAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductAttributeUpdateInput, ProductAttributeUncheckedUpdateInput>
  }

  /**
   * ProductAttribute delete
   */
  export type ProductAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter which ProductAttribute to delete.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute deleteMany
   */
  export type ProductAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAttributes to delete
     */
    where?: ProductAttributeWhereInput
    /**
     * Limit how many ProductAttributes to delete.
     */
    limit?: number
  }

  /**
   * ProductAttribute findRaw
   */
  export type ProductAttributeFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductAttribute aggregateRaw
   */
  export type ProductAttributeAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductAttribute without action
   */
  export type ProductAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
  }


  /**
   * Model SizeChart
   */

  export type AggregateSizeChart = {
    _count: SizeChartCountAggregateOutputType | null
    _min: SizeChartMinAggregateOutputType | null
    _max: SizeChartMaxAggregateOutputType | null
  }

  export type SizeChartMinAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    description: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeChartMaxAggregateOutputType = {
    id: string | null
    name: string | null
    category: string | null
    description: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SizeChartCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SizeChartMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeChartMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SizeChartCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SizeChartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChart to aggregate.
     */
    where?: SizeChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeCharts to fetch.
     */
    orderBy?: SizeChartOrderByWithRelationInput | SizeChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeCharts
    **/
    _count?: true | SizeChartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeChartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeChartMaxAggregateInputType
  }

  export type GetSizeChartAggregateType<T extends SizeChartAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeChart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeChart[P]>
      : GetScalarType<T[P], AggregateSizeChart[P]>
  }




  export type SizeChartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartWhereInput
    orderBy?: SizeChartOrderByWithAggregationInput | SizeChartOrderByWithAggregationInput[]
    by: SizeChartScalarFieldEnum[] | SizeChartScalarFieldEnum
    having?: SizeChartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeChartCountAggregateInputType | true
    _min?: SizeChartMinAggregateInputType
    _max?: SizeChartMaxAggregateInputType
  }

  export type SizeChartGroupByOutputType = {
    id: string
    name: string
    category: string
    description: string | null
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: SizeChartCountAggregateOutputType | null
    _min: SizeChartMinAggregateOutputType | null
    _max: SizeChartMaxAggregateOutputType | null
  }

  type GetSizeChartGroupByPayload<T extends SizeChartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeChartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeChartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeChartGroupByOutputType[P]>
            : GetScalarType<T[P], SizeChartGroupByOutputType[P]>
        }
      >
    >


  export type SizeChartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    columns?: boolean | SizeChart$columnsArgs<ExtArgs>
    rows?: boolean | SizeChart$rowsArgs<ExtArgs>
    images?: boolean | SizeChart$imagesArgs<ExtArgs>
    _count?: boolean | SizeChartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeChart"]>



  export type SizeChartSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SizeChartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "description" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["sizeChart"]>
  export type SizeChartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    columns?: boolean | SizeChart$columnsArgs<ExtArgs>
    rows?: boolean | SizeChart$rowsArgs<ExtArgs>
    images?: boolean | SizeChart$imagesArgs<ExtArgs>
    _count?: boolean | SizeChartCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SizeChartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeChart"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      columns: Prisma.$SizeChartColumnPayload<ExtArgs>[]
      rows: Prisma.$SizeChartRowPayload<ExtArgs>[]
      images: Prisma.$SizeChartImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      category: string
      description: string | null
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sizeChart"]>
    composites: {}
  }

  type SizeChartGetPayload<S extends boolean | null | undefined | SizeChartDefaultArgs> = $Result.GetResult<Prisma.$SizeChartPayload, S>

  type SizeChartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeChartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeChartCountAggregateInputType | true
    }

  export interface SizeChartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeChart'], meta: { name: 'SizeChart' } }
    /**
     * Find zero or one SizeChart that matches the filter.
     * @param {SizeChartFindUniqueArgs} args - Arguments to find a SizeChart
     * @example
     * // Get one SizeChart
     * const sizeChart = await prisma.sizeChart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeChartFindUniqueArgs>(args: SelectSubset<T, SizeChartFindUniqueArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeChart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeChartFindUniqueOrThrowArgs} args - Arguments to find a SizeChart
     * @example
     * // Get one SizeChart
     * const sizeChart = await prisma.sizeChart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeChartFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeChartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartFindFirstArgs} args - Arguments to find a SizeChart
     * @example
     * // Get one SizeChart
     * const sizeChart = await prisma.sizeChart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeChartFindFirstArgs>(args?: SelectSubset<T, SizeChartFindFirstArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartFindFirstOrThrowArgs} args - Arguments to find a SizeChart
     * @example
     * // Get one SizeChart
     * const sizeChart = await prisma.sizeChart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeChartFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeChartFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeCharts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeCharts
     * const sizeCharts = await prisma.sizeChart.findMany()
     * 
     * // Get first 10 SizeCharts
     * const sizeCharts = await prisma.sizeChart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeChartWithIdOnly = await prisma.sizeChart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeChartFindManyArgs>(args?: SelectSubset<T, SizeChartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeChart.
     * @param {SizeChartCreateArgs} args - Arguments to create a SizeChart.
     * @example
     * // Create one SizeChart
     * const SizeChart = await prisma.sizeChart.create({
     *   data: {
     *     // ... data to create a SizeChart
     *   }
     * })
     * 
     */
    create<T extends SizeChartCreateArgs>(args: SelectSubset<T, SizeChartCreateArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeCharts.
     * @param {SizeChartCreateManyArgs} args - Arguments to create many SizeCharts.
     * @example
     * // Create many SizeCharts
     * const sizeChart = await prisma.sizeChart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeChartCreateManyArgs>(args?: SelectSubset<T, SizeChartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeChart.
     * @param {SizeChartDeleteArgs} args - Arguments to delete one SizeChart.
     * @example
     * // Delete one SizeChart
     * const SizeChart = await prisma.sizeChart.delete({
     *   where: {
     *     // ... filter to delete one SizeChart
     *   }
     * })
     * 
     */
    delete<T extends SizeChartDeleteArgs>(args: SelectSubset<T, SizeChartDeleteArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeChart.
     * @param {SizeChartUpdateArgs} args - Arguments to update one SizeChart.
     * @example
     * // Update one SizeChart
     * const sizeChart = await prisma.sizeChart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeChartUpdateArgs>(args: SelectSubset<T, SizeChartUpdateArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeCharts.
     * @param {SizeChartDeleteManyArgs} args - Arguments to filter SizeCharts to delete.
     * @example
     * // Delete a few SizeCharts
     * const { count } = await prisma.sizeChart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeChartDeleteManyArgs>(args?: SelectSubset<T, SizeChartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeCharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeCharts
     * const sizeChart = await prisma.sizeChart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeChartUpdateManyArgs>(args: SelectSubset<T, SizeChartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeChart.
     * @param {SizeChartUpsertArgs} args - Arguments to update or create a SizeChart.
     * @example
     * // Update or create a SizeChart
     * const sizeChart = await prisma.sizeChart.upsert({
     *   create: {
     *     // ... data to create a SizeChart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeChart we want to update
     *   }
     * })
     */
    upsert<T extends SizeChartUpsertArgs>(args: SelectSubset<T, SizeChartUpsertArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeCharts that matches the filter.
     * @param {SizeChartFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sizeChart = await prisma.sizeChart.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SizeChartFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SizeChart.
     * @param {SizeChartAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sizeChart = await prisma.sizeChart.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SizeChartAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SizeCharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartCountArgs} args - Arguments to filter SizeCharts to count.
     * @example
     * // Count the number of SizeCharts
     * const count = await prisma.sizeChart.count({
     *   where: {
     *     // ... the filter for the SizeCharts we want to count
     *   }
     * })
    **/
    count<T extends SizeChartCountArgs>(
      args?: Subset<T, SizeChartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeChartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeChart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeChartAggregateArgs>(args: Subset<T, SizeChartAggregateArgs>): Prisma.PrismaPromise<GetSizeChartAggregateType<T>>

    /**
     * Group by SizeChart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeChartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeChartGroupByArgs['orderBy'] }
        : { orderBy?: SizeChartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeChartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeChartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeChart model
   */
  readonly fields: SizeChartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeChart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeChartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    columns<T extends SizeChart$columnsArgs<ExtArgs> = {}>(args?: Subset<T, SizeChart$columnsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rows<T extends SizeChart$rowsArgs<ExtArgs> = {}>(args?: Subset<T, SizeChart$rowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    images<T extends SizeChart$imagesArgs<ExtArgs> = {}>(args?: Subset<T, SizeChart$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeChart model
   */
  interface SizeChartFieldRefs {
    readonly id: FieldRef<"SizeChart", 'String'>
    readonly name: FieldRef<"SizeChart", 'String'>
    readonly category: FieldRef<"SizeChart", 'String'>
    readonly description: FieldRef<"SizeChart", 'String'>
    readonly productId: FieldRef<"SizeChart", 'String'>
    readonly createdAt: FieldRef<"SizeChart", 'DateTime'>
    readonly updatedAt: FieldRef<"SizeChart", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeChart findUnique
   */
  export type SizeChartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter, which SizeChart to fetch.
     */
    where: SizeChartWhereUniqueInput
  }

  /**
   * SizeChart findUniqueOrThrow
   */
  export type SizeChartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter, which SizeChart to fetch.
     */
    where: SizeChartWhereUniqueInput
  }

  /**
   * SizeChart findFirst
   */
  export type SizeChartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter, which SizeChart to fetch.
     */
    where?: SizeChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeCharts to fetch.
     */
    orderBy?: SizeChartOrderByWithRelationInput | SizeChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeCharts.
     */
    cursor?: SizeChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeCharts.
     */
    distinct?: SizeChartScalarFieldEnum | SizeChartScalarFieldEnum[]
  }

  /**
   * SizeChart findFirstOrThrow
   */
  export type SizeChartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter, which SizeChart to fetch.
     */
    where?: SizeChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeCharts to fetch.
     */
    orderBy?: SizeChartOrderByWithRelationInput | SizeChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeCharts.
     */
    cursor?: SizeChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeCharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeCharts.
     */
    distinct?: SizeChartScalarFieldEnum | SizeChartScalarFieldEnum[]
  }

  /**
   * SizeChart findMany
   */
  export type SizeChartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter, which SizeCharts to fetch.
     */
    where?: SizeChartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeCharts to fetch.
     */
    orderBy?: SizeChartOrderByWithRelationInput | SizeChartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeCharts.
     */
    cursor?: SizeChartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeCharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeCharts.
     */
    skip?: number
    distinct?: SizeChartScalarFieldEnum | SizeChartScalarFieldEnum[]
  }

  /**
   * SizeChart create
   */
  export type SizeChartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeChart.
     */
    data: XOR<SizeChartCreateInput, SizeChartUncheckedCreateInput>
  }

  /**
   * SizeChart createMany
   */
  export type SizeChartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeCharts.
     */
    data: SizeChartCreateManyInput | SizeChartCreateManyInput[]
  }

  /**
   * SizeChart update
   */
  export type SizeChartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeChart.
     */
    data: XOR<SizeChartUpdateInput, SizeChartUncheckedUpdateInput>
    /**
     * Choose, which SizeChart to update.
     */
    where: SizeChartWhereUniqueInput
  }

  /**
   * SizeChart updateMany
   */
  export type SizeChartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeCharts.
     */
    data: XOR<SizeChartUpdateManyMutationInput, SizeChartUncheckedUpdateManyInput>
    /**
     * Filter which SizeCharts to update
     */
    where?: SizeChartWhereInput
    /**
     * Limit how many SizeCharts to update.
     */
    limit?: number
  }

  /**
   * SizeChart upsert
   */
  export type SizeChartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeChart to update in case it exists.
     */
    where: SizeChartWhereUniqueInput
    /**
     * In case the SizeChart found by the `where` argument doesn't exist, create a new SizeChart with this data.
     */
    create: XOR<SizeChartCreateInput, SizeChartUncheckedCreateInput>
    /**
     * In case the SizeChart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeChartUpdateInput, SizeChartUncheckedUpdateInput>
  }

  /**
   * SizeChart delete
   */
  export type SizeChartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
    /**
     * Filter which SizeChart to delete.
     */
    where: SizeChartWhereUniqueInput
  }

  /**
   * SizeChart deleteMany
   */
  export type SizeChartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeCharts to delete
     */
    where?: SizeChartWhereInput
    /**
     * Limit how many SizeCharts to delete.
     */
    limit?: number
  }

  /**
   * SizeChart findRaw
   */
  export type SizeChartFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChart aggregateRaw
   */
  export type SizeChartAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChart.columns
   */
  export type SizeChart$columnsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    where?: SizeChartColumnWhereInput
    orderBy?: SizeChartColumnOrderByWithRelationInput | SizeChartColumnOrderByWithRelationInput[]
    cursor?: SizeChartColumnWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeChartColumnScalarFieldEnum | SizeChartColumnScalarFieldEnum[]
  }

  /**
   * SizeChart.rows
   */
  export type SizeChart$rowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    where?: SizeChartRowWhereInput
    orderBy?: SizeChartRowOrderByWithRelationInput | SizeChartRowOrderByWithRelationInput[]
    cursor?: SizeChartRowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeChartRowScalarFieldEnum | SizeChartRowScalarFieldEnum[]
  }

  /**
   * SizeChart.images
   */
  export type SizeChart$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    where?: SizeChartImageWhereInput
    orderBy?: SizeChartImageOrderByWithRelationInput | SizeChartImageOrderByWithRelationInput[]
    cursor?: SizeChartImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizeChartImageScalarFieldEnum | SizeChartImageScalarFieldEnum[]
  }

  /**
   * SizeChart without action
   */
  export type SizeChartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChart
     */
    select?: SizeChartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChart
     */
    omit?: SizeChartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartInclude<ExtArgs> | null
  }


  /**
   * Model SizeChartColumn
   */

  export type AggregateSizeChartColumn = {
    _count: SizeChartColumnCountAggregateOutputType | null
    _min: SizeChartColumnMinAggregateOutputType | null
    _max: SizeChartColumnMaxAggregateOutputType | null
  }

  export type SizeChartColumnMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    unit: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartColumnMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    unit: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartColumnCountAggregateOutputType = {
    id: number
    name: number
    type: number
    unit: number
    sizeChartId: number
    createdAt: number
    _all: number
  }


  export type SizeChartColumnMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartColumnMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartColumnCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    unit?: true
    sizeChartId?: true
    createdAt?: true
    _all?: true
  }

  export type SizeChartColumnAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartColumn to aggregate.
     */
    where?: SizeChartColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartColumns to fetch.
     */
    orderBy?: SizeChartColumnOrderByWithRelationInput | SizeChartColumnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeChartColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartColumns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartColumns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeChartColumns
    **/
    _count?: true | SizeChartColumnCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeChartColumnMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeChartColumnMaxAggregateInputType
  }

  export type GetSizeChartColumnAggregateType<T extends SizeChartColumnAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeChartColumn]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeChartColumn[P]>
      : GetScalarType<T[P], AggregateSizeChartColumn[P]>
  }




  export type SizeChartColumnGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartColumnWhereInput
    orderBy?: SizeChartColumnOrderByWithAggregationInput | SizeChartColumnOrderByWithAggregationInput[]
    by: SizeChartColumnScalarFieldEnum[] | SizeChartColumnScalarFieldEnum
    having?: SizeChartColumnScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeChartColumnCountAggregateInputType | true
    _min?: SizeChartColumnMinAggregateInputType
    _max?: SizeChartColumnMaxAggregateInputType
  }

  export type SizeChartColumnGroupByOutputType = {
    id: string
    name: string
    type: string
    unit: string | null
    sizeChartId: string
    createdAt: Date
    _count: SizeChartColumnCountAggregateOutputType | null
    _min: SizeChartColumnMinAggregateOutputType | null
    _max: SizeChartColumnMaxAggregateOutputType | null
  }

  type GetSizeChartColumnGroupByPayload<T extends SizeChartColumnGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeChartColumnGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeChartColumnGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeChartColumnGroupByOutputType[P]>
            : GetScalarType<T[P], SizeChartColumnGroupByOutputType[P]>
        }
      >
    >


  export type SizeChartColumnSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeChartColumn"]>



  export type SizeChartColumnSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    unit?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
  }

  export type SizeChartColumnOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "type" | "unit" | "sizeChartId" | "createdAt", ExtArgs["result"]["sizeChartColumn"]>
  export type SizeChartColumnInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }

  export type $SizeChartColumnPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeChartColumn"
    objects: {
      sizeChart: Prisma.$SizeChartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      unit: string | null
      sizeChartId: string
      createdAt: Date
    }, ExtArgs["result"]["sizeChartColumn"]>
    composites: {}
  }

  type SizeChartColumnGetPayload<S extends boolean | null | undefined | SizeChartColumnDefaultArgs> = $Result.GetResult<Prisma.$SizeChartColumnPayload, S>

  type SizeChartColumnCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeChartColumnFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeChartColumnCountAggregateInputType | true
    }

  export interface SizeChartColumnDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeChartColumn'], meta: { name: 'SizeChartColumn' } }
    /**
     * Find zero or one SizeChartColumn that matches the filter.
     * @param {SizeChartColumnFindUniqueArgs} args - Arguments to find a SizeChartColumn
     * @example
     * // Get one SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeChartColumnFindUniqueArgs>(args: SelectSubset<T, SizeChartColumnFindUniqueArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeChartColumn that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeChartColumnFindUniqueOrThrowArgs} args - Arguments to find a SizeChartColumn
     * @example
     * // Get one SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeChartColumnFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeChartColumnFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartColumn that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnFindFirstArgs} args - Arguments to find a SizeChartColumn
     * @example
     * // Get one SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeChartColumnFindFirstArgs>(args?: SelectSubset<T, SizeChartColumnFindFirstArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartColumn that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnFindFirstOrThrowArgs} args - Arguments to find a SizeChartColumn
     * @example
     * // Get one SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeChartColumnFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeChartColumnFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartColumns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeChartColumns
     * const sizeChartColumns = await prisma.sizeChartColumn.findMany()
     * 
     * // Get first 10 SizeChartColumns
     * const sizeChartColumns = await prisma.sizeChartColumn.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeChartColumnWithIdOnly = await prisma.sizeChartColumn.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeChartColumnFindManyArgs>(args?: SelectSubset<T, SizeChartColumnFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeChartColumn.
     * @param {SizeChartColumnCreateArgs} args - Arguments to create a SizeChartColumn.
     * @example
     * // Create one SizeChartColumn
     * const SizeChartColumn = await prisma.sizeChartColumn.create({
     *   data: {
     *     // ... data to create a SizeChartColumn
     *   }
     * })
     * 
     */
    create<T extends SizeChartColumnCreateArgs>(args: SelectSubset<T, SizeChartColumnCreateArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeChartColumns.
     * @param {SizeChartColumnCreateManyArgs} args - Arguments to create many SizeChartColumns.
     * @example
     * // Create many SizeChartColumns
     * const sizeChartColumn = await prisma.sizeChartColumn.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeChartColumnCreateManyArgs>(args?: SelectSubset<T, SizeChartColumnCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeChartColumn.
     * @param {SizeChartColumnDeleteArgs} args - Arguments to delete one SizeChartColumn.
     * @example
     * // Delete one SizeChartColumn
     * const SizeChartColumn = await prisma.sizeChartColumn.delete({
     *   where: {
     *     // ... filter to delete one SizeChartColumn
     *   }
     * })
     * 
     */
    delete<T extends SizeChartColumnDeleteArgs>(args: SelectSubset<T, SizeChartColumnDeleteArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeChartColumn.
     * @param {SizeChartColumnUpdateArgs} args - Arguments to update one SizeChartColumn.
     * @example
     * // Update one SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeChartColumnUpdateArgs>(args: SelectSubset<T, SizeChartColumnUpdateArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeChartColumns.
     * @param {SizeChartColumnDeleteManyArgs} args - Arguments to filter SizeChartColumns to delete.
     * @example
     * // Delete a few SizeChartColumns
     * const { count } = await prisma.sizeChartColumn.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeChartColumnDeleteManyArgs>(args?: SelectSubset<T, SizeChartColumnDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeChartColumns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeChartColumns
     * const sizeChartColumn = await prisma.sizeChartColumn.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeChartColumnUpdateManyArgs>(args: SelectSubset<T, SizeChartColumnUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeChartColumn.
     * @param {SizeChartColumnUpsertArgs} args - Arguments to update or create a SizeChartColumn.
     * @example
     * // Update or create a SizeChartColumn
     * const sizeChartColumn = await prisma.sizeChartColumn.upsert({
     *   create: {
     *     // ... data to create a SizeChartColumn
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeChartColumn we want to update
     *   }
     * })
     */
    upsert<T extends SizeChartColumnUpsertArgs>(args: SelectSubset<T, SizeChartColumnUpsertArgs<ExtArgs>>): Prisma__SizeChartColumnClient<$Result.GetResult<Prisma.$SizeChartColumnPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartColumns that matches the filter.
     * @param {SizeChartColumnFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sizeChartColumn = await prisma.sizeChartColumn.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SizeChartColumnFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SizeChartColumn.
     * @param {SizeChartColumnAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sizeChartColumn = await prisma.sizeChartColumn.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SizeChartColumnAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SizeChartColumns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnCountArgs} args - Arguments to filter SizeChartColumns to count.
     * @example
     * // Count the number of SizeChartColumns
     * const count = await prisma.sizeChartColumn.count({
     *   where: {
     *     // ... the filter for the SizeChartColumns we want to count
     *   }
     * })
    **/
    count<T extends SizeChartColumnCountArgs>(
      args?: Subset<T, SizeChartColumnCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeChartColumnCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeChartColumn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeChartColumnAggregateArgs>(args: Subset<T, SizeChartColumnAggregateArgs>): Prisma.PrismaPromise<GetSizeChartColumnAggregateType<T>>

    /**
     * Group by SizeChartColumn.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartColumnGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeChartColumnGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeChartColumnGroupByArgs['orderBy'] }
        : { orderBy?: SizeChartColumnGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeChartColumnGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeChartColumnGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeChartColumn model
   */
  readonly fields: SizeChartColumnFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeChartColumn.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeChartColumnClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sizeChart<T extends SizeChartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizeChartDefaultArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeChartColumn model
   */
  interface SizeChartColumnFieldRefs {
    readonly id: FieldRef<"SizeChartColumn", 'String'>
    readonly name: FieldRef<"SizeChartColumn", 'String'>
    readonly type: FieldRef<"SizeChartColumn", 'String'>
    readonly unit: FieldRef<"SizeChartColumn", 'String'>
    readonly sizeChartId: FieldRef<"SizeChartColumn", 'String'>
    readonly createdAt: FieldRef<"SizeChartColumn", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeChartColumn findUnique
   */
  export type SizeChartColumnFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartColumn to fetch.
     */
    where: SizeChartColumnWhereUniqueInput
  }

  /**
   * SizeChartColumn findUniqueOrThrow
   */
  export type SizeChartColumnFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartColumn to fetch.
     */
    where: SizeChartColumnWhereUniqueInput
  }

  /**
   * SizeChartColumn findFirst
   */
  export type SizeChartColumnFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartColumn to fetch.
     */
    where?: SizeChartColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartColumns to fetch.
     */
    orderBy?: SizeChartColumnOrderByWithRelationInput | SizeChartColumnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartColumns.
     */
    cursor?: SizeChartColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartColumns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartColumns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartColumns.
     */
    distinct?: SizeChartColumnScalarFieldEnum | SizeChartColumnScalarFieldEnum[]
  }

  /**
   * SizeChartColumn findFirstOrThrow
   */
  export type SizeChartColumnFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartColumn to fetch.
     */
    where?: SizeChartColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartColumns to fetch.
     */
    orderBy?: SizeChartColumnOrderByWithRelationInput | SizeChartColumnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartColumns.
     */
    cursor?: SizeChartColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartColumns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartColumns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartColumns.
     */
    distinct?: SizeChartColumnScalarFieldEnum | SizeChartColumnScalarFieldEnum[]
  }

  /**
   * SizeChartColumn findMany
   */
  export type SizeChartColumnFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartColumns to fetch.
     */
    where?: SizeChartColumnWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartColumns to fetch.
     */
    orderBy?: SizeChartColumnOrderByWithRelationInput | SizeChartColumnOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeChartColumns.
     */
    cursor?: SizeChartColumnWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartColumns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartColumns.
     */
    skip?: number
    distinct?: SizeChartColumnScalarFieldEnum | SizeChartColumnScalarFieldEnum[]
  }

  /**
   * SizeChartColumn create
   */
  export type SizeChartColumnCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeChartColumn.
     */
    data: XOR<SizeChartColumnCreateInput, SizeChartColumnUncheckedCreateInput>
  }

  /**
   * SizeChartColumn createMany
   */
  export type SizeChartColumnCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeChartColumns.
     */
    data: SizeChartColumnCreateManyInput | SizeChartColumnCreateManyInput[]
  }

  /**
   * SizeChartColumn update
   */
  export type SizeChartColumnUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeChartColumn.
     */
    data: XOR<SizeChartColumnUpdateInput, SizeChartColumnUncheckedUpdateInput>
    /**
     * Choose, which SizeChartColumn to update.
     */
    where: SizeChartColumnWhereUniqueInput
  }

  /**
   * SizeChartColumn updateMany
   */
  export type SizeChartColumnUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeChartColumns.
     */
    data: XOR<SizeChartColumnUpdateManyMutationInput, SizeChartColumnUncheckedUpdateManyInput>
    /**
     * Filter which SizeChartColumns to update
     */
    where?: SizeChartColumnWhereInput
    /**
     * Limit how many SizeChartColumns to update.
     */
    limit?: number
  }

  /**
   * SizeChartColumn upsert
   */
  export type SizeChartColumnUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeChartColumn to update in case it exists.
     */
    where: SizeChartColumnWhereUniqueInput
    /**
     * In case the SizeChartColumn found by the `where` argument doesn't exist, create a new SizeChartColumn with this data.
     */
    create: XOR<SizeChartColumnCreateInput, SizeChartColumnUncheckedCreateInput>
    /**
     * In case the SizeChartColumn was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeChartColumnUpdateInput, SizeChartColumnUncheckedUpdateInput>
  }

  /**
   * SizeChartColumn delete
   */
  export type SizeChartColumnDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
    /**
     * Filter which SizeChartColumn to delete.
     */
    where: SizeChartColumnWhereUniqueInput
  }

  /**
   * SizeChartColumn deleteMany
   */
  export type SizeChartColumnDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartColumns to delete
     */
    where?: SizeChartColumnWhereInput
    /**
     * Limit how many SizeChartColumns to delete.
     */
    limit?: number
  }

  /**
   * SizeChartColumn findRaw
   */
  export type SizeChartColumnFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartColumn aggregateRaw
   */
  export type SizeChartColumnAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartColumn without action
   */
  export type SizeChartColumnDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartColumn
     */
    select?: SizeChartColumnSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartColumn
     */
    omit?: SizeChartColumnOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartColumnInclude<ExtArgs> | null
  }


  /**
   * Model SizeChartRow
   */

  export type AggregateSizeChartRow = {
    _count: SizeChartRowCountAggregateOutputType | null
    _min: SizeChartRowMinAggregateOutputType | null
    _max: SizeChartRowMaxAggregateOutputType | null
  }

  export type SizeChartRowMinAggregateOutputType = {
    id: string | null
    name: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartRowMaxAggregateOutputType = {
    id: string | null
    name: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartRowCountAggregateOutputType = {
    id: number
    name: number
    values: number
    sizeChartId: number
    createdAt: number
    _all: number
  }


  export type SizeChartRowMinAggregateInputType = {
    id?: true
    name?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartRowMaxAggregateInputType = {
    id?: true
    name?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartRowCountAggregateInputType = {
    id?: true
    name?: true
    values?: true
    sizeChartId?: true
    createdAt?: true
    _all?: true
  }

  export type SizeChartRowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartRow to aggregate.
     */
    where?: SizeChartRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartRows to fetch.
     */
    orderBy?: SizeChartRowOrderByWithRelationInput | SizeChartRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeChartRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeChartRows
    **/
    _count?: true | SizeChartRowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeChartRowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeChartRowMaxAggregateInputType
  }

  export type GetSizeChartRowAggregateType<T extends SizeChartRowAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeChartRow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeChartRow[P]>
      : GetScalarType<T[P], AggregateSizeChartRow[P]>
  }




  export type SizeChartRowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartRowWhereInput
    orderBy?: SizeChartRowOrderByWithAggregationInput | SizeChartRowOrderByWithAggregationInput[]
    by: SizeChartRowScalarFieldEnum[] | SizeChartRowScalarFieldEnum
    having?: SizeChartRowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeChartRowCountAggregateInputType | true
    _min?: SizeChartRowMinAggregateInputType
    _max?: SizeChartRowMaxAggregateInputType
  }

  export type SizeChartRowGroupByOutputType = {
    id: string
    name: string
    values: JsonValue
    sizeChartId: string
    createdAt: Date
    _count: SizeChartRowCountAggregateOutputType | null
    _min: SizeChartRowMinAggregateOutputType | null
    _max: SizeChartRowMaxAggregateOutputType | null
  }

  type GetSizeChartRowGroupByPayload<T extends SizeChartRowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeChartRowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeChartRowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeChartRowGroupByOutputType[P]>
            : GetScalarType<T[P], SizeChartRowGroupByOutputType[P]>
        }
      >
    >


  export type SizeChartRowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    values?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeChartRow"]>



  export type SizeChartRowSelectScalar = {
    id?: boolean
    name?: boolean
    values?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
  }

  export type SizeChartRowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "values" | "sizeChartId" | "createdAt", ExtArgs["result"]["sizeChartRow"]>
  export type SizeChartRowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }

  export type $SizeChartRowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeChartRow"
    objects: {
      sizeChart: Prisma.$SizeChartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      values: Prisma.JsonValue
      sizeChartId: string
      createdAt: Date
    }, ExtArgs["result"]["sizeChartRow"]>
    composites: {}
  }

  type SizeChartRowGetPayload<S extends boolean | null | undefined | SizeChartRowDefaultArgs> = $Result.GetResult<Prisma.$SizeChartRowPayload, S>

  type SizeChartRowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeChartRowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeChartRowCountAggregateInputType | true
    }

  export interface SizeChartRowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeChartRow'], meta: { name: 'SizeChartRow' } }
    /**
     * Find zero or one SizeChartRow that matches the filter.
     * @param {SizeChartRowFindUniqueArgs} args - Arguments to find a SizeChartRow
     * @example
     * // Get one SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeChartRowFindUniqueArgs>(args: SelectSubset<T, SizeChartRowFindUniqueArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeChartRow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeChartRowFindUniqueOrThrowArgs} args - Arguments to find a SizeChartRow
     * @example
     * // Get one SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeChartRowFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeChartRowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartRow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowFindFirstArgs} args - Arguments to find a SizeChartRow
     * @example
     * // Get one SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeChartRowFindFirstArgs>(args?: SelectSubset<T, SizeChartRowFindFirstArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartRow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowFindFirstOrThrowArgs} args - Arguments to find a SizeChartRow
     * @example
     * // Get one SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeChartRowFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeChartRowFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartRows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeChartRows
     * const sizeChartRows = await prisma.sizeChartRow.findMany()
     * 
     * // Get first 10 SizeChartRows
     * const sizeChartRows = await prisma.sizeChartRow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeChartRowWithIdOnly = await prisma.sizeChartRow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeChartRowFindManyArgs>(args?: SelectSubset<T, SizeChartRowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeChartRow.
     * @param {SizeChartRowCreateArgs} args - Arguments to create a SizeChartRow.
     * @example
     * // Create one SizeChartRow
     * const SizeChartRow = await prisma.sizeChartRow.create({
     *   data: {
     *     // ... data to create a SizeChartRow
     *   }
     * })
     * 
     */
    create<T extends SizeChartRowCreateArgs>(args: SelectSubset<T, SizeChartRowCreateArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeChartRows.
     * @param {SizeChartRowCreateManyArgs} args - Arguments to create many SizeChartRows.
     * @example
     * // Create many SizeChartRows
     * const sizeChartRow = await prisma.sizeChartRow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeChartRowCreateManyArgs>(args?: SelectSubset<T, SizeChartRowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeChartRow.
     * @param {SizeChartRowDeleteArgs} args - Arguments to delete one SizeChartRow.
     * @example
     * // Delete one SizeChartRow
     * const SizeChartRow = await prisma.sizeChartRow.delete({
     *   where: {
     *     // ... filter to delete one SizeChartRow
     *   }
     * })
     * 
     */
    delete<T extends SizeChartRowDeleteArgs>(args: SelectSubset<T, SizeChartRowDeleteArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeChartRow.
     * @param {SizeChartRowUpdateArgs} args - Arguments to update one SizeChartRow.
     * @example
     * // Update one SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeChartRowUpdateArgs>(args: SelectSubset<T, SizeChartRowUpdateArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeChartRows.
     * @param {SizeChartRowDeleteManyArgs} args - Arguments to filter SizeChartRows to delete.
     * @example
     * // Delete a few SizeChartRows
     * const { count } = await prisma.sizeChartRow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeChartRowDeleteManyArgs>(args?: SelectSubset<T, SizeChartRowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeChartRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeChartRows
     * const sizeChartRow = await prisma.sizeChartRow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeChartRowUpdateManyArgs>(args: SelectSubset<T, SizeChartRowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeChartRow.
     * @param {SizeChartRowUpsertArgs} args - Arguments to update or create a SizeChartRow.
     * @example
     * // Update or create a SizeChartRow
     * const sizeChartRow = await prisma.sizeChartRow.upsert({
     *   create: {
     *     // ... data to create a SizeChartRow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeChartRow we want to update
     *   }
     * })
     */
    upsert<T extends SizeChartRowUpsertArgs>(args: SelectSubset<T, SizeChartRowUpsertArgs<ExtArgs>>): Prisma__SizeChartRowClient<$Result.GetResult<Prisma.$SizeChartRowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartRows that matches the filter.
     * @param {SizeChartRowFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sizeChartRow = await prisma.sizeChartRow.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SizeChartRowFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SizeChartRow.
     * @param {SizeChartRowAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sizeChartRow = await prisma.sizeChartRow.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SizeChartRowAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SizeChartRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowCountArgs} args - Arguments to filter SizeChartRows to count.
     * @example
     * // Count the number of SizeChartRows
     * const count = await prisma.sizeChartRow.count({
     *   where: {
     *     // ... the filter for the SizeChartRows we want to count
     *   }
     * })
    **/
    count<T extends SizeChartRowCountArgs>(
      args?: Subset<T, SizeChartRowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeChartRowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeChartRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeChartRowAggregateArgs>(args: Subset<T, SizeChartRowAggregateArgs>): Prisma.PrismaPromise<GetSizeChartRowAggregateType<T>>

    /**
     * Group by SizeChartRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartRowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeChartRowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeChartRowGroupByArgs['orderBy'] }
        : { orderBy?: SizeChartRowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeChartRowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeChartRowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeChartRow model
   */
  readonly fields: SizeChartRowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeChartRow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeChartRowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sizeChart<T extends SizeChartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizeChartDefaultArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeChartRow model
   */
  interface SizeChartRowFieldRefs {
    readonly id: FieldRef<"SizeChartRow", 'String'>
    readonly name: FieldRef<"SizeChartRow", 'String'>
    readonly values: FieldRef<"SizeChartRow", 'Json'>
    readonly sizeChartId: FieldRef<"SizeChartRow", 'String'>
    readonly createdAt: FieldRef<"SizeChartRow", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeChartRow findUnique
   */
  export type SizeChartRowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartRow to fetch.
     */
    where: SizeChartRowWhereUniqueInput
  }

  /**
   * SizeChartRow findUniqueOrThrow
   */
  export type SizeChartRowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartRow to fetch.
     */
    where: SizeChartRowWhereUniqueInput
  }

  /**
   * SizeChartRow findFirst
   */
  export type SizeChartRowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartRow to fetch.
     */
    where?: SizeChartRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartRows to fetch.
     */
    orderBy?: SizeChartRowOrderByWithRelationInput | SizeChartRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartRows.
     */
    cursor?: SizeChartRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartRows.
     */
    distinct?: SizeChartRowScalarFieldEnum | SizeChartRowScalarFieldEnum[]
  }

  /**
   * SizeChartRow findFirstOrThrow
   */
  export type SizeChartRowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartRow to fetch.
     */
    where?: SizeChartRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartRows to fetch.
     */
    orderBy?: SizeChartRowOrderByWithRelationInput | SizeChartRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartRows.
     */
    cursor?: SizeChartRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartRows.
     */
    distinct?: SizeChartRowScalarFieldEnum | SizeChartRowScalarFieldEnum[]
  }

  /**
   * SizeChartRow findMany
   */
  export type SizeChartRowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartRows to fetch.
     */
    where?: SizeChartRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartRows to fetch.
     */
    orderBy?: SizeChartRowOrderByWithRelationInput | SizeChartRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeChartRows.
     */
    cursor?: SizeChartRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartRows.
     */
    skip?: number
    distinct?: SizeChartRowScalarFieldEnum | SizeChartRowScalarFieldEnum[]
  }

  /**
   * SizeChartRow create
   */
  export type SizeChartRowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeChartRow.
     */
    data: XOR<SizeChartRowCreateInput, SizeChartRowUncheckedCreateInput>
  }

  /**
   * SizeChartRow createMany
   */
  export type SizeChartRowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeChartRows.
     */
    data: SizeChartRowCreateManyInput | SizeChartRowCreateManyInput[]
  }

  /**
   * SizeChartRow update
   */
  export type SizeChartRowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeChartRow.
     */
    data: XOR<SizeChartRowUpdateInput, SizeChartRowUncheckedUpdateInput>
    /**
     * Choose, which SizeChartRow to update.
     */
    where: SizeChartRowWhereUniqueInput
  }

  /**
   * SizeChartRow updateMany
   */
  export type SizeChartRowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeChartRows.
     */
    data: XOR<SizeChartRowUpdateManyMutationInput, SizeChartRowUncheckedUpdateManyInput>
    /**
     * Filter which SizeChartRows to update
     */
    where?: SizeChartRowWhereInput
    /**
     * Limit how many SizeChartRows to update.
     */
    limit?: number
  }

  /**
   * SizeChartRow upsert
   */
  export type SizeChartRowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeChartRow to update in case it exists.
     */
    where: SizeChartRowWhereUniqueInput
    /**
     * In case the SizeChartRow found by the `where` argument doesn't exist, create a new SizeChartRow with this data.
     */
    create: XOR<SizeChartRowCreateInput, SizeChartRowUncheckedCreateInput>
    /**
     * In case the SizeChartRow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeChartRowUpdateInput, SizeChartRowUncheckedUpdateInput>
  }

  /**
   * SizeChartRow delete
   */
  export type SizeChartRowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
    /**
     * Filter which SizeChartRow to delete.
     */
    where: SizeChartRowWhereUniqueInput
  }

  /**
   * SizeChartRow deleteMany
   */
  export type SizeChartRowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartRows to delete
     */
    where?: SizeChartRowWhereInput
    /**
     * Limit how many SizeChartRows to delete.
     */
    limit?: number
  }

  /**
   * SizeChartRow findRaw
   */
  export type SizeChartRowFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartRow aggregateRaw
   */
  export type SizeChartRowAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartRow without action
   */
  export type SizeChartRowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartRow
     */
    select?: SizeChartRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartRow
     */
    omit?: SizeChartRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartRowInclude<ExtArgs> | null
  }


  /**
   * Model SizeChartImage
   */

  export type AggregateSizeChartImage = {
    _count: SizeChartImageCountAggregateOutputType | null
    _min: SizeChartImageMinAggregateOutputType | null
    _max: SizeChartImageMaxAggregateOutputType | null
  }

  export type SizeChartImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    name: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    name: string | null
    sizeChartId: string | null
    createdAt: Date | null
  }

  export type SizeChartImageCountAggregateOutputType = {
    id: number
    url: number
    name: number
    sizeChartId: number
    createdAt: number
    _all: number
  }


  export type SizeChartImageMinAggregateInputType = {
    id?: true
    url?: true
    name?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartImageMaxAggregateInputType = {
    id?: true
    url?: true
    name?: true
    sizeChartId?: true
    createdAt?: true
  }

  export type SizeChartImageCountAggregateInputType = {
    id?: true
    url?: true
    name?: true
    sizeChartId?: true
    createdAt?: true
    _all?: true
  }

  export type SizeChartImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartImage to aggregate.
     */
    where?: SizeChartImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartImages to fetch.
     */
    orderBy?: SizeChartImageOrderByWithRelationInput | SizeChartImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizeChartImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SizeChartImages
    **/
    _count?: true | SizeChartImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizeChartImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizeChartImageMaxAggregateInputType
  }

  export type GetSizeChartImageAggregateType<T extends SizeChartImageAggregateArgs> = {
        [P in keyof T & keyof AggregateSizeChartImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizeChartImage[P]>
      : GetScalarType<T[P], AggregateSizeChartImage[P]>
  }




  export type SizeChartImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizeChartImageWhereInput
    orderBy?: SizeChartImageOrderByWithAggregationInput | SizeChartImageOrderByWithAggregationInput[]
    by: SizeChartImageScalarFieldEnum[] | SizeChartImageScalarFieldEnum
    having?: SizeChartImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizeChartImageCountAggregateInputType | true
    _min?: SizeChartImageMinAggregateInputType
    _max?: SizeChartImageMaxAggregateInputType
  }

  export type SizeChartImageGroupByOutputType = {
    id: string
    url: string
    name: string
    sizeChartId: string
    createdAt: Date
    _count: SizeChartImageCountAggregateOutputType | null
    _min: SizeChartImageMinAggregateOutputType | null
    _max: SizeChartImageMaxAggregateOutputType | null
  }

  type GetSizeChartImageGroupByPayload<T extends SizeChartImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizeChartImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizeChartImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizeChartImageGroupByOutputType[P]>
            : GetScalarType<T[P], SizeChartImageGroupByOutputType[P]>
        }
      >
    >


  export type SizeChartImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    name?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizeChartImage"]>



  export type SizeChartImageSelectScalar = {
    id?: boolean
    url?: boolean
    name?: boolean
    sizeChartId?: boolean
    createdAt?: boolean
  }

  export type SizeChartImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "name" | "sizeChartId" | "createdAt", ExtArgs["result"]["sizeChartImage"]>
  export type SizeChartImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sizeChart?: boolean | SizeChartDefaultArgs<ExtArgs>
  }

  export type $SizeChartImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SizeChartImage"
    objects: {
      sizeChart: Prisma.$SizeChartPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      name: string
      sizeChartId: string
      createdAt: Date
    }, ExtArgs["result"]["sizeChartImage"]>
    composites: {}
  }

  type SizeChartImageGetPayload<S extends boolean | null | undefined | SizeChartImageDefaultArgs> = $Result.GetResult<Prisma.$SizeChartImagePayload, S>

  type SizeChartImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizeChartImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizeChartImageCountAggregateInputType | true
    }

  export interface SizeChartImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SizeChartImage'], meta: { name: 'SizeChartImage' } }
    /**
     * Find zero or one SizeChartImage that matches the filter.
     * @param {SizeChartImageFindUniqueArgs} args - Arguments to find a SizeChartImage
     * @example
     * // Get one SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizeChartImageFindUniqueArgs>(args: SelectSubset<T, SizeChartImageFindUniqueArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SizeChartImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizeChartImageFindUniqueOrThrowArgs} args - Arguments to find a SizeChartImage
     * @example
     * // Get one SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizeChartImageFindUniqueOrThrowArgs>(args: SelectSubset<T, SizeChartImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageFindFirstArgs} args - Arguments to find a SizeChartImage
     * @example
     * // Get one SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizeChartImageFindFirstArgs>(args?: SelectSubset<T, SizeChartImageFindFirstArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SizeChartImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageFindFirstOrThrowArgs} args - Arguments to find a SizeChartImage
     * @example
     * // Get one SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizeChartImageFindFirstOrThrowArgs>(args?: SelectSubset<T, SizeChartImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SizeChartImages
     * const sizeChartImages = await prisma.sizeChartImage.findMany()
     * 
     * // Get first 10 SizeChartImages
     * const sizeChartImages = await prisma.sizeChartImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizeChartImageWithIdOnly = await prisma.sizeChartImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizeChartImageFindManyArgs>(args?: SelectSubset<T, SizeChartImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SizeChartImage.
     * @param {SizeChartImageCreateArgs} args - Arguments to create a SizeChartImage.
     * @example
     * // Create one SizeChartImage
     * const SizeChartImage = await prisma.sizeChartImage.create({
     *   data: {
     *     // ... data to create a SizeChartImage
     *   }
     * })
     * 
     */
    create<T extends SizeChartImageCreateArgs>(args: SelectSubset<T, SizeChartImageCreateArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SizeChartImages.
     * @param {SizeChartImageCreateManyArgs} args - Arguments to create many SizeChartImages.
     * @example
     * // Create many SizeChartImages
     * const sizeChartImage = await prisma.sizeChartImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizeChartImageCreateManyArgs>(args?: SelectSubset<T, SizeChartImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SizeChartImage.
     * @param {SizeChartImageDeleteArgs} args - Arguments to delete one SizeChartImage.
     * @example
     * // Delete one SizeChartImage
     * const SizeChartImage = await prisma.sizeChartImage.delete({
     *   where: {
     *     // ... filter to delete one SizeChartImage
     *   }
     * })
     * 
     */
    delete<T extends SizeChartImageDeleteArgs>(args: SelectSubset<T, SizeChartImageDeleteArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SizeChartImage.
     * @param {SizeChartImageUpdateArgs} args - Arguments to update one SizeChartImage.
     * @example
     * // Update one SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizeChartImageUpdateArgs>(args: SelectSubset<T, SizeChartImageUpdateArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SizeChartImages.
     * @param {SizeChartImageDeleteManyArgs} args - Arguments to filter SizeChartImages to delete.
     * @example
     * // Delete a few SizeChartImages
     * const { count } = await prisma.sizeChartImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizeChartImageDeleteManyArgs>(args?: SelectSubset<T, SizeChartImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SizeChartImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SizeChartImages
     * const sizeChartImage = await prisma.sizeChartImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizeChartImageUpdateManyArgs>(args: SelectSubset<T, SizeChartImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SizeChartImage.
     * @param {SizeChartImageUpsertArgs} args - Arguments to update or create a SizeChartImage.
     * @example
     * // Update or create a SizeChartImage
     * const sizeChartImage = await prisma.sizeChartImage.upsert({
     *   create: {
     *     // ... data to create a SizeChartImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SizeChartImage we want to update
     *   }
     * })
     */
    upsert<T extends SizeChartImageUpsertArgs>(args: SelectSubset<T, SizeChartImageUpsertArgs<ExtArgs>>): Prisma__SizeChartImageClient<$Result.GetResult<Prisma.$SizeChartImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SizeChartImages that matches the filter.
     * @param {SizeChartImageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sizeChartImage = await prisma.sizeChartImage.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SizeChartImageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SizeChartImage.
     * @param {SizeChartImageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sizeChartImage = await prisma.sizeChartImage.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SizeChartImageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SizeChartImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageCountArgs} args - Arguments to filter SizeChartImages to count.
     * @example
     * // Count the number of SizeChartImages
     * const count = await prisma.sizeChartImage.count({
     *   where: {
     *     // ... the filter for the SizeChartImages we want to count
     *   }
     * })
    **/
    count<T extends SizeChartImageCountArgs>(
      args?: Subset<T, SizeChartImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizeChartImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SizeChartImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizeChartImageAggregateArgs>(args: Subset<T, SizeChartImageAggregateArgs>): Prisma.PrismaPromise<GetSizeChartImageAggregateType<T>>

    /**
     * Group by SizeChartImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizeChartImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizeChartImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizeChartImageGroupByArgs['orderBy'] }
        : { orderBy?: SizeChartImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizeChartImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizeChartImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SizeChartImage model
   */
  readonly fields: SizeChartImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SizeChartImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizeChartImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sizeChart<T extends SizeChartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizeChartDefaultArgs<ExtArgs>>): Prisma__SizeChartClient<$Result.GetResult<Prisma.$SizeChartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SizeChartImage model
   */
  interface SizeChartImageFieldRefs {
    readonly id: FieldRef<"SizeChartImage", 'String'>
    readonly url: FieldRef<"SizeChartImage", 'String'>
    readonly name: FieldRef<"SizeChartImage", 'String'>
    readonly sizeChartId: FieldRef<"SizeChartImage", 'String'>
    readonly createdAt: FieldRef<"SizeChartImage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SizeChartImage findUnique
   */
  export type SizeChartImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartImage to fetch.
     */
    where: SizeChartImageWhereUniqueInput
  }

  /**
   * SizeChartImage findUniqueOrThrow
   */
  export type SizeChartImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartImage to fetch.
     */
    where: SizeChartImageWhereUniqueInput
  }

  /**
   * SizeChartImage findFirst
   */
  export type SizeChartImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartImage to fetch.
     */
    where?: SizeChartImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartImages to fetch.
     */
    orderBy?: SizeChartImageOrderByWithRelationInput | SizeChartImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartImages.
     */
    cursor?: SizeChartImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartImages.
     */
    distinct?: SizeChartImageScalarFieldEnum | SizeChartImageScalarFieldEnum[]
  }

  /**
   * SizeChartImage findFirstOrThrow
   */
  export type SizeChartImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartImage to fetch.
     */
    where?: SizeChartImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartImages to fetch.
     */
    orderBy?: SizeChartImageOrderByWithRelationInput | SizeChartImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SizeChartImages.
     */
    cursor?: SizeChartImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SizeChartImages.
     */
    distinct?: SizeChartImageScalarFieldEnum | SizeChartImageScalarFieldEnum[]
  }

  /**
   * SizeChartImage findMany
   */
  export type SizeChartImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter, which SizeChartImages to fetch.
     */
    where?: SizeChartImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SizeChartImages to fetch.
     */
    orderBy?: SizeChartImageOrderByWithRelationInput | SizeChartImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SizeChartImages.
     */
    cursor?: SizeChartImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SizeChartImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SizeChartImages.
     */
    skip?: number
    distinct?: SizeChartImageScalarFieldEnum | SizeChartImageScalarFieldEnum[]
  }

  /**
   * SizeChartImage create
   */
  export type SizeChartImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * The data needed to create a SizeChartImage.
     */
    data: XOR<SizeChartImageCreateInput, SizeChartImageUncheckedCreateInput>
  }

  /**
   * SizeChartImage createMany
   */
  export type SizeChartImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SizeChartImages.
     */
    data: SizeChartImageCreateManyInput | SizeChartImageCreateManyInput[]
  }

  /**
   * SizeChartImage update
   */
  export type SizeChartImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * The data needed to update a SizeChartImage.
     */
    data: XOR<SizeChartImageUpdateInput, SizeChartImageUncheckedUpdateInput>
    /**
     * Choose, which SizeChartImage to update.
     */
    where: SizeChartImageWhereUniqueInput
  }

  /**
   * SizeChartImage updateMany
   */
  export type SizeChartImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SizeChartImages.
     */
    data: XOR<SizeChartImageUpdateManyMutationInput, SizeChartImageUncheckedUpdateManyInput>
    /**
     * Filter which SizeChartImages to update
     */
    where?: SizeChartImageWhereInput
    /**
     * Limit how many SizeChartImages to update.
     */
    limit?: number
  }

  /**
   * SizeChartImage upsert
   */
  export type SizeChartImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * The filter to search for the SizeChartImage to update in case it exists.
     */
    where: SizeChartImageWhereUniqueInput
    /**
     * In case the SizeChartImage found by the `where` argument doesn't exist, create a new SizeChartImage with this data.
     */
    create: XOR<SizeChartImageCreateInput, SizeChartImageUncheckedCreateInput>
    /**
     * In case the SizeChartImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizeChartImageUpdateInput, SizeChartImageUncheckedUpdateInput>
  }

  /**
   * SizeChartImage delete
   */
  export type SizeChartImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
    /**
     * Filter which SizeChartImage to delete.
     */
    where: SizeChartImageWhereUniqueInput
  }

  /**
   * SizeChartImage deleteMany
   */
  export type SizeChartImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SizeChartImages to delete
     */
    where?: SizeChartImageWhereInput
    /**
     * Limit how many SizeChartImages to delete.
     */
    limit?: number
  }

  /**
   * SizeChartImage findRaw
   */
  export type SizeChartImageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartImage aggregateRaw
   */
  export type SizeChartImageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * SizeChartImage without action
   */
  export type SizeChartImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizeChartImage
     */
    select?: SizeChartImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SizeChartImage
     */
    omit?: SizeChartImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizeChartImageInclude<ExtArgs> | null
  }


  /**
   * Model ProductDimension
   */

  export type AggregateProductDimension = {
    _count: ProductDimensionCountAggregateOutputType | null
    _avg: ProductDimensionAvgAggregateOutputType | null
    _sum: ProductDimensionSumAggregateOutputType | null
    _min: ProductDimensionMinAggregateOutputType | null
    _max: ProductDimensionMaxAggregateOutputType | null
  }

  export type ProductDimensionAvgAggregateOutputType = {
    length: number | null
    width: number | null
    height: number | null
    weight: number | null
  }

  export type ProductDimensionSumAggregateOutputType = {
    length: number | null
    width: number | null
    height: number | null
    weight: number | null
  }

  export type ProductDimensionMinAggregateOutputType = {
    id: string | null
    length: number | null
    width: number | null
    height: number | null
    weight: number | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductDimensionMaxAggregateOutputType = {
    id: string | null
    length: number | null
    width: number | null
    height: number | null
    weight: number | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductDimensionCountAggregateOutputType = {
    id: number
    length: number
    width: number
    height: number
    weight: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductDimensionAvgAggregateInputType = {
    length?: true
    width?: true
    height?: true
    weight?: true
  }

  export type ProductDimensionSumAggregateInputType = {
    length?: true
    width?: true
    height?: true
    weight?: true
  }

  export type ProductDimensionMinAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    weight?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductDimensionMaxAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    weight?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductDimensionCountAggregateInputType = {
    id?: true
    length?: true
    width?: true
    height?: true
    weight?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductDimensionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductDimension to aggregate.
     */
    where?: ProductDimensionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDimensions to fetch.
     */
    orderBy?: ProductDimensionOrderByWithRelationInput | ProductDimensionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductDimensionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductDimensions
    **/
    _count?: true | ProductDimensionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductDimensionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductDimensionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductDimensionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductDimensionMaxAggregateInputType
  }

  export type GetProductDimensionAggregateType<T extends ProductDimensionAggregateArgs> = {
        [P in keyof T & keyof AggregateProductDimension]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductDimension[P]>
      : GetScalarType<T[P], AggregateProductDimension[P]>
  }




  export type ProductDimensionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductDimensionWhereInput
    orderBy?: ProductDimensionOrderByWithAggregationInput | ProductDimensionOrderByWithAggregationInput[]
    by: ProductDimensionScalarFieldEnum[] | ProductDimensionScalarFieldEnum
    having?: ProductDimensionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductDimensionCountAggregateInputType | true
    _avg?: ProductDimensionAvgAggregateInputType
    _sum?: ProductDimensionSumAggregateInputType
    _min?: ProductDimensionMinAggregateInputType
    _max?: ProductDimensionMaxAggregateInputType
  }

  export type ProductDimensionGroupByOutputType = {
    id: string
    length: number
    width: number
    height: number
    weight: number
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: ProductDimensionCountAggregateOutputType | null
    _avg: ProductDimensionAvgAggregateOutputType | null
    _sum: ProductDimensionSumAggregateOutputType | null
    _min: ProductDimensionMinAggregateOutputType | null
    _max: ProductDimensionMaxAggregateOutputType | null
  }

  type GetProductDimensionGroupByPayload<T extends ProductDimensionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductDimensionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductDimensionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductDimensionGroupByOutputType[P]>
            : GetScalarType<T[P], ProductDimensionGroupByOutputType[P]>
        }
      >
    >


  export type ProductDimensionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    weight?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productDimension"]>



  export type ProductDimensionSelectScalar = {
    id?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    weight?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductDimensionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "length" | "width" | "height" | "weight" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["productDimension"]>
  export type ProductDimensionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductDimensionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductDimension"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      length: number
      width: number
      height: number
      weight: number
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productDimension"]>
    composites: {}
  }

  type ProductDimensionGetPayload<S extends boolean | null | undefined | ProductDimensionDefaultArgs> = $Result.GetResult<Prisma.$ProductDimensionPayload, S>

  type ProductDimensionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductDimensionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductDimensionCountAggregateInputType | true
    }

  export interface ProductDimensionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductDimension'], meta: { name: 'ProductDimension' } }
    /**
     * Find zero or one ProductDimension that matches the filter.
     * @param {ProductDimensionFindUniqueArgs} args - Arguments to find a ProductDimension
     * @example
     * // Get one ProductDimension
     * const productDimension = await prisma.productDimension.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductDimensionFindUniqueArgs>(args: SelectSubset<T, ProductDimensionFindUniqueArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductDimension that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductDimensionFindUniqueOrThrowArgs} args - Arguments to find a ProductDimension
     * @example
     * // Get one ProductDimension
     * const productDimension = await prisma.productDimension.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductDimensionFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductDimensionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductDimension that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionFindFirstArgs} args - Arguments to find a ProductDimension
     * @example
     * // Get one ProductDimension
     * const productDimension = await prisma.productDimension.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductDimensionFindFirstArgs>(args?: SelectSubset<T, ProductDimensionFindFirstArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductDimension that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionFindFirstOrThrowArgs} args - Arguments to find a ProductDimension
     * @example
     * // Get one ProductDimension
     * const productDimension = await prisma.productDimension.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductDimensionFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductDimensionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductDimensions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductDimensions
     * const productDimensions = await prisma.productDimension.findMany()
     * 
     * // Get first 10 ProductDimensions
     * const productDimensions = await prisma.productDimension.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productDimensionWithIdOnly = await prisma.productDimension.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductDimensionFindManyArgs>(args?: SelectSubset<T, ProductDimensionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductDimension.
     * @param {ProductDimensionCreateArgs} args - Arguments to create a ProductDimension.
     * @example
     * // Create one ProductDimension
     * const ProductDimension = await prisma.productDimension.create({
     *   data: {
     *     // ... data to create a ProductDimension
     *   }
     * })
     * 
     */
    create<T extends ProductDimensionCreateArgs>(args: SelectSubset<T, ProductDimensionCreateArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductDimensions.
     * @param {ProductDimensionCreateManyArgs} args - Arguments to create many ProductDimensions.
     * @example
     * // Create many ProductDimensions
     * const productDimension = await prisma.productDimension.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductDimensionCreateManyArgs>(args?: SelectSubset<T, ProductDimensionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductDimension.
     * @param {ProductDimensionDeleteArgs} args - Arguments to delete one ProductDimension.
     * @example
     * // Delete one ProductDimension
     * const ProductDimension = await prisma.productDimension.delete({
     *   where: {
     *     // ... filter to delete one ProductDimension
     *   }
     * })
     * 
     */
    delete<T extends ProductDimensionDeleteArgs>(args: SelectSubset<T, ProductDimensionDeleteArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductDimension.
     * @param {ProductDimensionUpdateArgs} args - Arguments to update one ProductDimension.
     * @example
     * // Update one ProductDimension
     * const productDimension = await prisma.productDimension.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductDimensionUpdateArgs>(args: SelectSubset<T, ProductDimensionUpdateArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductDimensions.
     * @param {ProductDimensionDeleteManyArgs} args - Arguments to filter ProductDimensions to delete.
     * @example
     * // Delete a few ProductDimensions
     * const { count } = await prisma.productDimension.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDimensionDeleteManyArgs>(args?: SelectSubset<T, ProductDimensionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductDimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductDimensions
     * const productDimension = await prisma.productDimension.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductDimensionUpdateManyArgs>(args: SelectSubset<T, ProductDimensionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductDimension.
     * @param {ProductDimensionUpsertArgs} args - Arguments to update or create a ProductDimension.
     * @example
     * // Update or create a ProductDimension
     * const productDimension = await prisma.productDimension.upsert({
     *   create: {
     *     // ... data to create a ProductDimension
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductDimension we want to update
     *   }
     * })
     */
    upsert<T extends ProductDimensionUpsertArgs>(args: SelectSubset<T, ProductDimensionUpsertArgs<ExtArgs>>): Prisma__ProductDimensionClient<$Result.GetResult<Prisma.$ProductDimensionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductDimensions that matches the filter.
     * @param {ProductDimensionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productDimension = await prisma.productDimension.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductDimensionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductDimension.
     * @param {ProductDimensionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productDimension = await prisma.productDimension.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductDimensionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductDimensions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionCountArgs} args - Arguments to filter ProductDimensions to count.
     * @example
     * // Count the number of ProductDimensions
     * const count = await prisma.productDimension.count({
     *   where: {
     *     // ... the filter for the ProductDimensions we want to count
     *   }
     * })
    **/
    count<T extends ProductDimensionCountArgs>(
      args?: Subset<T, ProductDimensionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductDimensionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductDimension.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductDimensionAggregateArgs>(args: Subset<T, ProductDimensionAggregateArgs>): Prisma.PrismaPromise<GetProductDimensionAggregateType<T>>

    /**
     * Group by ProductDimension.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDimensionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductDimensionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductDimensionGroupByArgs['orderBy'] }
        : { orderBy?: ProductDimensionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductDimensionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductDimensionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductDimension model
   */
  readonly fields: ProductDimensionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductDimension.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductDimensionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductDimension model
   */
  interface ProductDimensionFieldRefs {
    readonly id: FieldRef<"ProductDimension", 'String'>
    readonly length: FieldRef<"ProductDimension", 'Float'>
    readonly width: FieldRef<"ProductDimension", 'Float'>
    readonly height: FieldRef<"ProductDimension", 'Float'>
    readonly weight: FieldRef<"ProductDimension", 'Float'>
    readonly productId: FieldRef<"ProductDimension", 'String'>
    readonly createdAt: FieldRef<"ProductDimension", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductDimension", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductDimension findUnique
   */
  export type ProductDimensionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter, which ProductDimension to fetch.
     */
    where: ProductDimensionWhereUniqueInput
  }

  /**
   * ProductDimension findUniqueOrThrow
   */
  export type ProductDimensionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter, which ProductDimension to fetch.
     */
    where: ProductDimensionWhereUniqueInput
  }

  /**
   * ProductDimension findFirst
   */
  export type ProductDimensionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter, which ProductDimension to fetch.
     */
    where?: ProductDimensionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDimensions to fetch.
     */
    orderBy?: ProductDimensionOrderByWithRelationInput | ProductDimensionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductDimensions.
     */
    cursor?: ProductDimensionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductDimensions.
     */
    distinct?: ProductDimensionScalarFieldEnum | ProductDimensionScalarFieldEnum[]
  }

  /**
   * ProductDimension findFirstOrThrow
   */
  export type ProductDimensionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter, which ProductDimension to fetch.
     */
    where?: ProductDimensionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDimensions to fetch.
     */
    orderBy?: ProductDimensionOrderByWithRelationInput | ProductDimensionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductDimensions.
     */
    cursor?: ProductDimensionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDimensions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductDimensions.
     */
    distinct?: ProductDimensionScalarFieldEnum | ProductDimensionScalarFieldEnum[]
  }

  /**
   * ProductDimension findMany
   */
  export type ProductDimensionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter, which ProductDimensions to fetch.
     */
    where?: ProductDimensionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDimensions to fetch.
     */
    orderBy?: ProductDimensionOrderByWithRelationInput | ProductDimensionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductDimensions.
     */
    cursor?: ProductDimensionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDimensions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDimensions.
     */
    skip?: number
    distinct?: ProductDimensionScalarFieldEnum | ProductDimensionScalarFieldEnum[]
  }

  /**
   * ProductDimension create
   */
  export type ProductDimensionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductDimension.
     */
    data: XOR<ProductDimensionCreateInput, ProductDimensionUncheckedCreateInput>
  }

  /**
   * ProductDimension createMany
   */
  export type ProductDimensionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductDimensions.
     */
    data: ProductDimensionCreateManyInput | ProductDimensionCreateManyInput[]
  }

  /**
   * ProductDimension update
   */
  export type ProductDimensionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductDimension.
     */
    data: XOR<ProductDimensionUpdateInput, ProductDimensionUncheckedUpdateInput>
    /**
     * Choose, which ProductDimension to update.
     */
    where: ProductDimensionWhereUniqueInput
  }

  /**
   * ProductDimension updateMany
   */
  export type ProductDimensionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductDimensions.
     */
    data: XOR<ProductDimensionUpdateManyMutationInput, ProductDimensionUncheckedUpdateManyInput>
    /**
     * Filter which ProductDimensions to update
     */
    where?: ProductDimensionWhereInput
    /**
     * Limit how many ProductDimensions to update.
     */
    limit?: number
  }

  /**
   * ProductDimension upsert
   */
  export type ProductDimensionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductDimension to update in case it exists.
     */
    where: ProductDimensionWhereUniqueInput
    /**
     * In case the ProductDimension found by the `where` argument doesn't exist, create a new ProductDimension with this data.
     */
    create: XOR<ProductDimensionCreateInput, ProductDimensionUncheckedCreateInput>
    /**
     * In case the ProductDimension was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductDimensionUpdateInput, ProductDimensionUncheckedUpdateInput>
  }

  /**
   * ProductDimension delete
   */
  export type ProductDimensionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
    /**
     * Filter which ProductDimension to delete.
     */
    where: ProductDimensionWhereUniqueInput
  }

  /**
   * ProductDimension deleteMany
   */
  export type ProductDimensionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductDimensions to delete
     */
    where?: ProductDimensionWhereInput
    /**
     * Limit how many ProductDimensions to delete.
     */
    limit?: number
  }

  /**
   * ProductDimension findRaw
   */
  export type ProductDimensionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductDimension aggregateRaw
   */
  export type ProductDimensionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductDimension without action
   */
  export type ProductDimensionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDimension
     */
    select?: ProductDimensionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDimension
     */
    omit?: ProductDimensionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDimensionInclude<ExtArgs> | null
  }


  /**
   * Model ProductSEO
   */

  export type AggregateProductSEO = {
    _count: ProductSEOCountAggregateOutputType | null
    _min: ProductSEOMinAggregateOutputType | null
    _max: ProductSEOMaxAggregateOutputType | null
  }

  export type ProductSEOMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    keywords: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductSEOMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    keywords: string | null
    productId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductSEOCountAggregateOutputType = {
    id: number
    title: number
    description: number
    keywords: number
    productId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductSEOMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    keywords?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductSEOMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    keywords?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductSEOCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    keywords?: true
    productId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductSEOAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSEO to aggregate.
     */
    where?: ProductSEOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSEOS to fetch.
     */
    orderBy?: ProductSEOOrderByWithRelationInput | ProductSEOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSEOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSEOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSEOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSEOS
    **/
    _count?: true | ProductSEOCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSEOMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSEOMaxAggregateInputType
  }

  export type GetProductSEOAggregateType<T extends ProductSEOAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSEO]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSEO[P]>
      : GetScalarType<T[P], AggregateProductSEO[P]>
  }




  export type ProductSEOGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSEOWhereInput
    orderBy?: ProductSEOOrderByWithAggregationInput | ProductSEOOrderByWithAggregationInput[]
    by: ProductSEOScalarFieldEnum[] | ProductSEOScalarFieldEnum
    having?: ProductSEOScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSEOCountAggregateInputType | true
    _min?: ProductSEOMinAggregateInputType
    _max?: ProductSEOMaxAggregateInputType
  }

  export type ProductSEOGroupByOutputType = {
    id: string
    title: string
    description: string
    keywords: string
    productId: string
    createdAt: Date
    updatedAt: Date
    _count: ProductSEOCountAggregateOutputType | null
    _min: ProductSEOMinAggregateOutputType | null
    _max: ProductSEOMaxAggregateOutputType | null
  }

  type GetProductSEOGroupByPayload<T extends ProductSEOGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductSEOGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSEOGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSEOGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSEOGroupByOutputType[P]>
        }
      >
    >


  export type ProductSEOSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    keywords?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSEO"]>



  export type ProductSEOSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    keywords?: boolean
    productId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductSEOOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "keywords" | "productId" | "createdAt" | "updatedAt", ExtArgs["result"]["productSEO"]>
  export type ProductSEOInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductSEOPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductSEO"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      keywords: string
      productId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productSEO"]>
    composites: {}
  }

  type ProductSEOGetPayload<S extends boolean | null | undefined | ProductSEODefaultArgs> = $Result.GetResult<Prisma.$ProductSEOPayload, S>

  type ProductSEOCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductSEOFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductSEOCountAggregateInputType | true
    }

  export interface ProductSEODelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSEO'], meta: { name: 'ProductSEO' } }
    /**
     * Find zero or one ProductSEO that matches the filter.
     * @param {ProductSEOFindUniqueArgs} args - Arguments to find a ProductSEO
     * @example
     * // Get one ProductSEO
     * const productSEO = await prisma.productSEO.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductSEOFindUniqueArgs>(args: SelectSubset<T, ProductSEOFindUniqueArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductSEO that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductSEOFindUniqueOrThrowArgs} args - Arguments to find a ProductSEO
     * @example
     * // Get one ProductSEO
     * const productSEO = await prisma.productSEO.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductSEOFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductSEOFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSEO that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOFindFirstArgs} args - Arguments to find a ProductSEO
     * @example
     * // Get one ProductSEO
     * const productSEO = await prisma.productSEO.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductSEOFindFirstArgs>(args?: SelectSubset<T, ProductSEOFindFirstArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductSEO that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOFindFirstOrThrowArgs} args - Arguments to find a ProductSEO
     * @example
     * // Get one ProductSEO
     * const productSEO = await prisma.productSEO.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductSEOFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductSEOFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductSEOS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSEOS
     * const productSEOS = await prisma.productSEO.findMany()
     * 
     * // Get first 10 ProductSEOS
     * const productSEOS = await prisma.productSEO.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSEOWithIdOnly = await prisma.productSEO.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductSEOFindManyArgs>(args?: SelectSubset<T, ProductSEOFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductSEO.
     * @param {ProductSEOCreateArgs} args - Arguments to create a ProductSEO.
     * @example
     * // Create one ProductSEO
     * const ProductSEO = await prisma.productSEO.create({
     *   data: {
     *     // ... data to create a ProductSEO
     *   }
     * })
     * 
     */
    create<T extends ProductSEOCreateArgs>(args: SelectSubset<T, ProductSEOCreateArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductSEOS.
     * @param {ProductSEOCreateManyArgs} args - Arguments to create many ProductSEOS.
     * @example
     * // Create many ProductSEOS
     * const productSEO = await prisma.productSEO.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductSEOCreateManyArgs>(args?: SelectSubset<T, ProductSEOCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductSEO.
     * @param {ProductSEODeleteArgs} args - Arguments to delete one ProductSEO.
     * @example
     * // Delete one ProductSEO
     * const ProductSEO = await prisma.productSEO.delete({
     *   where: {
     *     // ... filter to delete one ProductSEO
     *   }
     * })
     * 
     */
    delete<T extends ProductSEODeleteArgs>(args: SelectSubset<T, ProductSEODeleteArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductSEO.
     * @param {ProductSEOUpdateArgs} args - Arguments to update one ProductSEO.
     * @example
     * // Update one ProductSEO
     * const productSEO = await prisma.productSEO.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductSEOUpdateArgs>(args: SelectSubset<T, ProductSEOUpdateArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductSEOS.
     * @param {ProductSEODeleteManyArgs} args - Arguments to filter ProductSEOS to delete.
     * @example
     * // Delete a few ProductSEOS
     * const { count } = await prisma.productSEO.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductSEODeleteManyArgs>(args?: SelectSubset<T, ProductSEODeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSEOS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSEOS
     * const productSEO = await prisma.productSEO.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductSEOUpdateManyArgs>(args: SelectSubset<T, ProductSEOUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductSEO.
     * @param {ProductSEOUpsertArgs} args - Arguments to update or create a ProductSEO.
     * @example
     * // Update or create a ProductSEO
     * const productSEO = await prisma.productSEO.upsert({
     *   create: {
     *     // ... data to create a ProductSEO
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSEO we want to update
     *   }
     * })
     */
    upsert<T extends ProductSEOUpsertArgs>(args: SelectSubset<T, ProductSEOUpsertArgs<ExtArgs>>): Prisma__ProductSEOClient<$Result.GetResult<Prisma.$ProductSEOPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductSEOS that matches the filter.
     * @param {ProductSEOFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productSEO = await prisma.productSEO.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductSEOFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductSEO.
     * @param {ProductSEOAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productSEO = await prisma.productSEO.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductSEOAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductSEOS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOCountArgs} args - Arguments to filter ProductSEOS to count.
     * @example
     * // Count the number of ProductSEOS
     * const count = await prisma.productSEO.count({
     *   where: {
     *     // ... the filter for the ProductSEOS we want to count
     *   }
     * })
    **/
    count<T extends ProductSEOCountArgs>(
      args?: Subset<T, ProductSEOCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSEOCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSEO.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSEOAggregateArgs>(args: Subset<T, ProductSEOAggregateArgs>): Prisma.PrismaPromise<GetProductSEOAggregateType<T>>

    /**
     * Group by ProductSEO.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSEOGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSEOGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSEOGroupByArgs['orderBy'] }
        : { orderBy?: ProductSEOGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSEOGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSEOGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductSEO model
   */
  readonly fields: ProductSEOFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSEO.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductSEOClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductSEO model
   */
  interface ProductSEOFieldRefs {
    readonly id: FieldRef<"ProductSEO", 'String'>
    readonly title: FieldRef<"ProductSEO", 'String'>
    readonly description: FieldRef<"ProductSEO", 'String'>
    readonly keywords: FieldRef<"ProductSEO", 'String'>
    readonly productId: FieldRef<"ProductSEO", 'String'>
    readonly createdAt: FieldRef<"ProductSEO", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductSEO", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductSEO findUnique
   */
  export type ProductSEOFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter, which ProductSEO to fetch.
     */
    where: ProductSEOWhereUniqueInput
  }

  /**
   * ProductSEO findUniqueOrThrow
   */
  export type ProductSEOFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter, which ProductSEO to fetch.
     */
    where: ProductSEOWhereUniqueInput
  }

  /**
   * ProductSEO findFirst
   */
  export type ProductSEOFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter, which ProductSEO to fetch.
     */
    where?: ProductSEOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSEOS to fetch.
     */
    orderBy?: ProductSEOOrderByWithRelationInput | ProductSEOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSEOS.
     */
    cursor?: ProductSEOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSEOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSEOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSEOS.
     */
    distinct?: ProductSEOScalarFieldEnum | ProductSEOScalarFieldEnum[]
  }

  /**
   * ProductSEO findFirstOrThrow
   */
  export type ProductSEOFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter, which ProductSEO to fetch.
     */
    where?: ProductSEOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSEOS to fetch.
     */
    orderBy?: ProductSEOOrderByWithRelationInput | ProductSEOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSEOS.
     */
    cursor?: ProductSEOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSEOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSEOS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSEOS.
     */
    distinct?: ProductSEOScalarFieldEnum | ProductSEOScalarFieldEnum[]
  }

  /**
   * ProductSEO findMany
   */
  export type ProductSEOFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter, which ProductSEOS to fetch.
     */
    where?: ProductSEOWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSEOS to fetch.
     */
    orderBy?: ProductSEOOrderByWithRelationInput | ProductSEOOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSEOS.
     */
    cursor?: ProductSEOWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSEOS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSEOS.
     */
    skip?: number
    distinct?: ProductSEOScalarFieldEnum | ProductSEOScalarFieldEnum[]
  }

  /**
   * ProductSEO create
   */
  export type ProductSEOCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductSEO.
     */
    data: XOR<ProductSEOCreateInput, ProductSEOUncheckedCreateInput>
  }

  /**
   * ProductSEO createMany
   */
  export type ProductSEOCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductSEOS.
     */
    data: ProductSEOCreateManyInput | ProductSEOCreateManyInput[]
  }

  /**
   * ProductSEO update
   */
  export type ProductSEOUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductSEO.
     */
    data: XOR<ProductSEOUpdateInput, ProductSEOUncheckedUpdateInput>
    /**
     * Choose, which ProductSEO to update.
     */
    where: ProductSEOWhereUniqueInput
  }

  /**
   * ProductSEO updateMany
   */
  export type ProductSEOUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductSEOS.
     */
    data: XOR<ProductSEOUpdateManyMutationInput, ProductSEOUncheckedUpdateManyInput>
    /**
     * Filter which ProductSEOS to update
     */
    where?: ProductSEOWhereInput
    /**
     * Limit how many ProductSEOS to update.
     */
    limit?: number
  }

  /**
   * ProductSEO upsert
   */
  export type ProductSEOUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductSEO to update in case it exists.
     */
    where: ProductSEOWhereUniqueInput
    /**
     * In case the ProductSEO found by the `where` argument doesn't exist, create a new ProductSEO with this data.
     */
    create: XOR<ProductSEOCreateInput, ProductSEOUncheckedCreateInput>
    /**
     * In case the ProductSEO was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSEOUpdateInput, ProductSEOUncheckedUpdateInput>
  }

  /**
   * ProductSEO delete
   */
  export type ProductSEODeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
    /**
     * Filter which ProductSEO to delete.
     */
    where: ProductSEOWhereUniqueInput
  }

  /**
   * ProductSEO deleteMany
   */
  export type ProductSEODeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSEOS to delete
     */
    where?: ProductSEOWhereInput
    /**
     * Limit how many ProductSEOS to delete.
     */
    limit?: number
  }

  /**
   * ProductSEO findRaw
   */
  export type ProductSEOFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductSEO aggregateRaw
   */
  export type ProductSEOAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductSEO without action
   */
  export type ProductSEODefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSEO
     */
    select?: ProductSEOSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductSEO
     */
    omit?: ProductSEOOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSEOInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    parentId: number
    productIds: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    parentId?: true
    productIds?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    parentId: string | null
    productIds: string[]
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    parentId?: boolean
    productIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    parentId?: boolean
    productIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "parentId" | "productIds" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      parentId: string | null
      productIds: string[]
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {CategoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const category = await prisma.category.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CategoryFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Category.
     * @param {CategoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const category = await prisma.category.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CategoryAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly parentId: FieldRef<"Category", 'String'>
    readonly productIds: FieldRef<"Category", 'String[]'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category findRaw
   */
  export type CategoryFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Category aggregateRaw
   */
  export type CategoryAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productTags?: boolean | Tag$productTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>



  export type TagSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["tag"]>
  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productTags?: boolean | Tag$productTagsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      productTags: Prisma.$ProductTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }

  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TagFindUniqueArgs>(args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs>(args: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TagFindFirstArgs>(args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs>(args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagWithIdOnly = await prisma.tag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TagFindManyArgs>(args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
     */
    create<T extends TagCreateArgs>(args: SelectSubset<T, TagCreateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tags.
     * @param {TagCreateManyArgs} args - Arguments to create many Tags.
     * @example
     * // Create many Tags
     * const tag = await prisma.tag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TagCreateManyArgs>(args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
     */
    delete<T extends TagDeleteArgs>(args: SelectSubset<T, TagDeleteArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TagUpdateArgs>(args: SelectSubset<T, TagUpdateArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TagDeleteManyArgs>(args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TagUpdateManyArgs>(args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
     */
    upsert<T extends TagUpsertArgs>(args: SelectSubset<T, TagUpsertArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tags that matches the filter.
     * @param {TagFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const tag = await prisma.tag.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: TagFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Tag.
     * @param {TagAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const tag = await prisma.tag.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: TagAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productTags<T extends Tag$productTagsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$productTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tag model
   */
  interface TagFieldRefs {
    readonly id: FieldRef<"Tag", 'String'>
    readonly name: FieldRef<"Tag", 'String'>
    readonly createdAt: FieldRef<"Tag", 'DateTime'>
    readonly updatedAt: FieldRef<"Tag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to update.
     */
    limit?: number
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
    /**
     * Limit how many Tags to delete.
     */
    limit?: number
  }

  /**
   * Tag findRaw
   */
  export type TagFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Tag aggregateRaw
   */
  export type TagAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Tag.productTags
   */
  export type Tag$productTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    where?: ProductTagWhereInput
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    cursor?: ProductTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductTagScalarFieldEnum | ProductTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Tag
     */
    omit?: TagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model ProductTag
   */

  export type AggregateProductTag = {
    _count: ProductTagCountAggregateOutputType | null
    _min: ProductTagMinAggregateOutputType | null
    _max: ProductTagMaxAggregateOutputType | null
  }

  export type ProductTagMinAggregateOutputType = {
    id: string | null
    productId: string | null
    tagId: string | null
    createdAt: Date | null
  }

  export type ProductTagMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    tagId: string | null
    createdAt: Date | null
  }

  export type ProductTagCountAggregateOutputType = {
    id: number
    productId: number
    tagId: number
    createdAt: number
    _all: number
  }


  export type ProductTagMinAggregateInputType = {
    id?: true
    productId?: true
    tagId?: true
    createdAt?: true
  }

  export type ProductTagMaxAggregateInputType = {
    id?: true
    productId?: true
    tagId?: true
    createdAt?: true
  }

  export type ProductTagCountAggregateInputType = {
    id?: true
    productId?: true
    tagId?: true
    createdAt?: true
    _all?: true
  }

  export type ProductTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTag to aggregate.
     */
    where?: ProductTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTags to fetch.
     */
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTags
    **/
    _count?: true | ProductTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTagMaxAggregateInputType
  }

  export type GetProductTagAggregateType<T extends ProductTagAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTag[P]>
      : GetScalarType<T[P], AggregateProductTag[P]>
  }




  export type ProductTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTagWhereInput
    orderBy?: ProductTagOrderByWithAggregationInput | ProductTagOrderByWithAggregationInput[]
    by: ProductTagScalarFieldEnum[] | ProductTagScalarFieldEnum
    having?: ProductTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTagCountAggregateInputType | true
    _min?: ProductTagMinAggregateInputType
    _max?: ProductTagMaxAggregateInputType
  }

  export type ProductTagGroupByOutputType = {
    id: string
    productId: string
    tagId: string
    createdAt: Date
    _count: ProductTagCountAggregateOutputType | null
    _min: ProductTagMinAggregateOutputType | null
    _max: ProductTagMaxAggregateOutputType | null
  }

  type GetProductTagGroupByPayload<T extends ProductTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductTagGroupByOutputType[P]>
            : GetScalarType<T[P], ProductTagGroupByOutputType[P]>
        }
      >
    >


  export type ProductTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    tagId?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTag"]>



  export type ProductTagSelectScalar = {
    id?: boolean
    productId?: boolean
    tagId?: boolean
    createdAt?: boolean
  }

  export type ProductTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "tagId" | "createdAt", ExtArgs["result"]["productTag"]>
  export type ProductTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    tag?: boolean | TagDefaultArgs<ExtArgs>
  }

  export type $ProductTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTag"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      tag: Prisma.$TagPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      tagId: string
      createdAt: Date
    }, ExtArgs["result"]["productTag"]>
    composites: {}
  }

  type ProductTagGetPayload<S extends boolean | null | undefined | ProductTagDefaultArgs> = $Result.GetResult<Prisma.$ProductTagPayload, S>

  type ProductTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductTagCountAggregateInputType | true
    }

  export interface ProductTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTag'], meta: { name: 'ProductTag' } }
    /**
     * Find zero or one ProductTag that matches the filter.
     * @param {ProductTagFindUniqueArgs} args - Arguments to find a ProductTag
     * @example
     * // Get one ProductTag
     * const productTag = await prisma.productTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductTagFindUniqueArgs>(args: SelectSubset<T, ProductTagFindUniqueArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductTagFindUniqueOrThrowArgs} args - Arguments to find a ProductTag
     * @example
     * // Get one ProductTag
     * const productTag = await prisma.productTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductTagFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagFindFirstArgs} args - Arguments to find a ProductTag
     * @example
     * // Get one ProductTag
     * const productTag = await prisma.productTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductTagFindFirstArgs>(args?: SelectSubset<T, ProductTagFindFirstArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagFindFirstOrThrowArgs} args - Arguments to find a ProductTag
     * @example
     * // Get one ProductTag
     * const productTag = await prisma.productTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductTagFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTags
     * const productTags = await prisma.productTag.findMany()
     * 
     * // Get first 10 ProductTags
     * const productTags = await prisma.productTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productTagWithIdOnly = await prisma.productTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductTagFindManyArgs>(args?: SelectSubset<T, ProductTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductTag.
     * @param {ProductTagCreateArgs} args - Arguments to create a ProductTag.
     * @example
     * // Create one ProductTag
     * const ProductTag = await prisma.productTag.create({
     *   data: {
     *     // ... data to create a ProductTag
     *   }
     * })
     * 
     */
    create<T extends ProductTagCreateArgs>(args: SelectSubset<T, ProductTagCreateArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductTags.
     * @param {ProductTagCreateManyArgs} args - Arguments to create many ProductTags.
     * @example
     * // Create many ProductTags
     * const productTag = await prisma.productTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductTagCreateManyArgs>(args?: SelectSubset<T, ProductTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductTag.
     * @param {ProductTagDeleteArgs} args - Arguments to delete one ProductTag.
     * @example
     * // Delete one ProductTag
     * const ProductTag = await prisma.productTag.delete({
     *   where: {
     *     // ... filter to delete one ProductTag
     *   }
     * })
     * 
     */
    delete<T extends ProductTagDeleteArgs>(args: SelectSubset<T, ProductTagDeleteArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductTag.
     * @param {ProductTagUpdateArgs} args - Arguments to update one ProductTag.
     * @example
     * // Update one ProductTag
     * const productTag = await prisma.productTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductTagUpdateArgs>(args: SelectSubset<T, ProductTagUpdateArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductTags.
     * @param {ProductTagDeleteManyArgs} args - Arguments to filter ProductTags to delete.
     * @example
     * // Delete a few ProductTags
     * const { count } = await prisma.productTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductTagDeleteManyArgs>(args?: SelectSubset<T, ProductTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTags
     * const productTag = await prisma.productTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductTagUpdateManyArgs>(args: SelectSubset<T, ProductTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductTag.
     * @param {ProductTagUpsertArgs} args - Arguments to update or create a ProductTag.
     * @example
     * // Update or create a ProductTag
     * const productTag = await prisma.productTag.upsert({
     *   create: {
     *     // ... data to create a ProductTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTag we want to update
     *   }
     * })
     */
    upsert<T extends ProductTagUpsertArgs>(args: SelectSubset<T, ProductTagUpsertArgs<ExtArgs>>): Prisma__ProductTagClient<$Result.GetResult<Prisma.$ProductTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTags that matches the filter.
     * @param {ProductTagFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productTag = await prisma.productTag.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductTagFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductTag.
     * @param {ProductTagAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productTag = await prisma.productTag.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductTagAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagCountArgs} args - Arguments to filter ProductTags to count.
     * @example
     * // Count the number of ProductTags
     * const count = await prisma.productTag.count({
     *   where: {
     *     // ... the filter for the ProductTags we want to count
     *   }
     * })
    **/
    count<T extends ProductTagCountArgs>(
      args?: Subset<T, ProductTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTagAggregateArgs>(args: Subset<T, ProductTagAggregateArgs>): Prisma.PrismaPromise<GetProductTagAggregateType<T>>

    /**
     * Group by ProductTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTagGroupByArgs['orderBy'] }
        : { orderBy?: ProductTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTag model
   */
  readonly fields: ProductTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductTag model
   */
  interface ProductTagFieldRefs {
    readonly id: FieldRef<"ProductTag", 'String'>
    readonly productId: FieldRef<"ProductTag", 'String'>
    readonly tagId: FieldRef<"ProductTag", 'String'>
    readonly createdAt: FieldRef<"ProductTag", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductTag findUnique
   */
  export type ProductTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter, which ProductTag to fetch.
     */
    where: ProductTagWhereUniqueInput
  }

  /**
   * ProductTag findUniqueOrThrow
   */
  export type ProductTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter, which ProductTag to fetch.
     */
    where: ProductTagWhereUniqueInput
  }

  /**
   * ProductTag findFirst
   */
  export type ProductTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter, which ProductTag to fetch.
     */
    where?: ProductTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTags to fetch.
     */
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTags.
     */
    cursor?: ProductTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTags.
     */
    distinct?: ProductTagScalarFieldEnum | ProductTagScalarFieldEnum[]
  }

  /**
   * ProductTag findFirstOrThrow
   */
  export type ProductTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter, which ProductTag to fetch.
     */
    where?: ProductTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTags to fetch.
     */
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTags.
     */
    cursor?: ProductTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTags.
     */
    distinct?: ProductTagScalarFieldEnum | ProductTagScalarFieldEnum[]
  }

  /**
   * ProductTag findMany
   */
  export type ProductTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter, which ProductTags to fetch.
     */
    where?: ProductTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTags to fetch.
     */
    orderBy?: ProductTagOrderByWithRelationInput | ProductTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTags.
     */
    cursor?: ProductTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTags.
     */
    skip?: number
    distinct?: ProductTagScalarFieldEnum | ProductTagScalarFieldEnum[]
  }

  /**
   * ProductTag create
   */
  export type ProductTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductTag.
     */
    data: XOR<ProductTagCreateInput, ProductTagUncheckedCreateInput>
  }

  /**
   * ProductTag createMany
   */
  export type ProductTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTags.
     */
    data: ProductTagCreateManyInput | ProductTagCreateManyInput[]
  }

  /**
   * ProductTag update
   */
  export type ProductTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductTag.
     */
    data: XOR<ProductTagUpdateInput, ProductTagUncheckedUpdateInput>
    /**
     * Choose, which ProductTag to update.
     */
    where: ProductTagWhereUniqueInput
  }

  /**
   * ProductTag updateMany
   */
  export type ProductTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTags.
     */
    data: XOR<ProductTagUpdateManyMutationInput, ProductTagUncheckedUpdateManyInput>
    /**
     * Filter which ProductTags to update
     */
    where?: ProductTagWhereInput
    /**
     * Limit how many ProductTags to update.
     */
    limit?: number
  }

  /**
   * ProductTag upsert
   */
  export type ProductTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductTag to update in case it exists.
     */
    where: ProductTagWhereUniqueInput
    /**
     * In case the ProductTag found by the `where` argument doesn't exist, create a new ProductTag with this data.
     */
    create: XOR<ProductTagCreateInput, ProductTagUncheckedCreateInput>
    /**
     * In case the ProductTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductTagUpdateInput, ProductTagUncheckedUpdateInput>
  }

  /**
   * ProductTag delete
   */
  export type ProductTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
    /**
     * Filter which ProductTag to delete.
     */
    where: ProductTagWhereUniqueInput
  }

  /**
   * ProductTag deleteMany
   */
  export type ProductTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTags to delete
     */
    where?: ProductTagWhereInput
    /**
     * Limit how many ProductTags to delete.
     */
    limit?: number
  }

  /**
   * ProductTag findRaw
   */
  export type ProductTagFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductTag aggregateRaw
   */
  export type ProductTagAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductTag without action
   */
  export type ProductTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTag
     */
    select?: ProductTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTag
     */
    omit?: ProductTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTagInclude<ExtArgs> | null
  }


  /**
   * Model Brand
   */

  export type AggregateBrand = {
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  export type BrandMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BrandCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BrandMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BrandCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BrandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brand to aggregate.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Brands
    **/
    _count?: true | BrandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BrandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BrandMaxAggregateInputType
  }

  export type GetBrandAggregateType<T extends BrandAggregateArgs> = {
        [P in keyof T & keyof AggregateBrand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBrand[P]>
      : GetScalarType<T[P], AggregateBrand[P]>
  }




  export type BrandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BrandWhereInput
    orderBy?: BrandOrderByWithAggregationInput | BrandOrderByWithAggregationInput[]
    by: BrandScalarFieldEnum[] | BrandScalarFieldEnum
    having?: BrandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BrandCountAggregateInputType | true
    _min?: BrandMinAggregateInputType
    _max?: BrandMaxAggregateInputType
  }

  export type BrandGroupByOutputType = {
    id: string
    name: string
    logo: string | null
    createdAt: Date
    updatedAt: Date
    _count: BrandCountAggregateOutputType | null
    _min: BrandMinAggregateOutputType | null
    _max: BrandMaxAggregateOutputType | null
  }

  type GetBrandGroupByPayload<T extends BrandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BrandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BrandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BrandGroupByOutputType[P]>
            : GetScalarType<T[P], BrandGroupByOutputType[P]>
        }
      >
    >


  export type BrandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | Brand$productsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["brand"]>



  export type BrandSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BrandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logo" | "createdAt" | "updatedAt", ExtArgs["result"]["brand"]>
  export type BrandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Brand$productsArgs<ExtArgs>
    _count?: boolean | BrandCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BrandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Brand"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logo: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["brand"]>
    composites: {}
  }

  type BrandGetPayload<S extends boolean | null | undefined | BrandDefaultArgs> = $Result.GetResult<Prisma.$BrandPayload, S>

  type BrandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BrandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BrandCountAggregateInputType | true
    }

  export interface BrandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Brand'], meta: { name: 'Brand' } }
    /**
     * Find zero or one Brand that matches the filter.
     * @param {BrandFindUniqueArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BrandFindUniqueArgs>(args: SelectSubset<T, BrandFindUniqueArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Brand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BrandFindUniqueOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BrandFindUniqueOrThrowArgs>(args: SelectSubset<T, BrandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BrandFindFirstArgs>(args?: SelectSubset<T, BrandFindFirstArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Brand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindFirstOrThrowArgs} args - Arguments to find a Brand
     * @example
     * // Get one Brand
     * const brand = await prisma.brand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BrandFindFirstOrThrowArgs>(args?: SelectSubset<T, BrandFindFirstOrThrowArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Brands
     * const brands = await prisma.brand.findMany()
     * 
     * // Get first 10 Brands
     * const brands = await prisma.brand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const brandWithIdOnly = await prisma.brand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BrandFindManyArgs>(args?: SelectSubset<T, BrandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Brand.
     * @param {BrandCreateArgs} args - Arguments to create a Brand.
     * @example
     * // Create one Brand
     * const Brand = await prisma.brand.create({
     *   data: {
     *     // ... data to create a Brand
     *   }
     * })
     * 
     */
    create<T extends BrandCreateArgs>(args: SelectSubset<T, BrandCreateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Brands.
     * @param {BrandCreateManyArgs} args - Arguments to create many Brands.
     * @example
     * // Create many Brands
     * const brand = await prisma.brand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BrandCreateManyArgs>(args?: SelectSubset<T, BrandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Brand.
     * @param {BrandDeleteArgs} args - Arguments to delete one Brand.
     * @example
     * // Delete one Brand
     * const Brand = await prisma.brand.delete({
     *   where: {
     *     // ... filter to delete one Brand
     *   }
     * })
     * 
     */
    delete<T extends BrandDeleteArgs>(args: SelectSubset<T, BrandDeleteArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Brand.
     * @param {BrandUpdateArgs} args - Arguments to update one Brand.
     * @example
     * // Update one Brand
     * const brand = await prisma.brand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BrandUpdateArgs>(args: SelectSubset<T, BrandUpdateArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Brands.
     * @param {BrandDeleteManyArgs} args - Arguments to filter Brands to delete.
     * @example
     * // Delete a few Brands
     * const { count } = await prisma.brand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BrandDeleteManyArgs>(args?: SelectSubset<T, BrandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Brands
     * const brand = await prisma.brand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BrandUpdateManyArgs>(args: SelectSubset<T, BrandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Brand.
     * @param {BrandUpsertArgs} args - Arguments to update or create a Brand.
     * @example
     * // Update or create a Brand
     * const brand = await prisma.brand.upsert({
     *   create: {
     *     // ... data to create a Brand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Brand we want to update
     *   }
     * })
     */
    upsert<T extends BrandUpsertArgs>(args: SelectSubset<T, BrandUpsertArgs<ExtArgs>>): Prisma__BrandClient<$Result.GetResult<Prisma.$BrandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Brands that matches the filter.
     * @param {BrandFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const brand = await prisma.brand.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BrandFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Brand.
     * @param {BrandAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const brand = await prisma.brand.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BrandAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Brands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandCountArgs} args - Arguments to filter Brands to count.
     * @example
     * // Count the number of Brands
     * const count = await prisma.brand.count({
     *   where: {
     *     // ... the filter for the Brands we want to count
     *   }
     * })
    **/
    count<T extends BrandCountArgs>(
      args?: Subset<T, BrandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BrandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BrandAggregateArgs>(args: Subset<T, BrandAggregateArgs>): Prisma.PrismaPromise<GetBrandAggregateType<T>>

    /**
     * Group by Brand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BrandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BrandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BrandGroupByArgs['orderBy'] }
        : { orderBy?: BrandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BrandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBrandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Brand model
   */
  readonly fields: BrandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Brand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BrandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Brand$productsArgs<ExtArgs> = {}>(args?: Subset<T, Brand$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Brand model
   */
  interface BrandFieldRefs {
    readonly id: FieldRef<"Brand", 'String'>
    readonly name: FieldRef<"Brand", 'String'>
    readonly logo: FieldRef<"Brand", 'String'>
    readonly createdAt: FieldRef<"Brand", 'DateTime'>
    readonly updatedAt: FieldRef<"Brand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Brand findUnique
   */
  export type BrandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findUniqueOrThrow
   */
  export type BrandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand findFirst
   */
  export type BrandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findFirstOrThrow
   */
  export type BrandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brand to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Brands.
     */
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand findMany
   */
  export type BrandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter, which Brands to fetch.
     */
    where?: BrandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Brands to fetch.
     */
    orderBy?: BrandOrderByWithRelationInput | BrandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Brands.
     */
    cursor?: BrandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Brands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Brands.
     */
    skip?: number
    distinct?: BrandScalarFieldEnum | BrandScalarFieldEnum[]
  }

  /**
   * Brand create
   */
  export type BrandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to create a Brand.
     */
    data: XOR<BrandCreateInput, BrandUncheckedCreateInput>
  }

  /**
   * Brand createMany
   */
  export type BrandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Brands.
     */
    data: BrandCreateManyInput | BrandCreateManyInput[]
  }

  /**
   * Brand update
   */
  export type BrandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The data needed to update a Brand.
     */
    data: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
    /**
     * Choose, which Brand to update.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand updateMany
   */
  export type BrandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Brands.
     */
    data: XOR<BrandUpdateManyMutationInput, BrandUncheckedUpdateManyInput>
    /**
     * Filter which Brands to update
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to update.
     */
    limit?: number
  }

  /**
   * Brand upsert
   */
  export type BrandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * The filter to search for the Brand to update in case it exists.
     */
    where: BrandWhereUniqueInput
    /**
     * In case the Brand found by the `where` argument doesn't exist, create a new Brand with this data.
     */
    create: XOR<BrandCreateInput, BrandUncheckedCreateInput>
    /**
     * In case the Brand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BrandUpdateInput, BrandUncheckedUpdateInput>
  }

  /**
   * Brand delete
   */
  export type BrandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
    /**
     * Filter which Brand to delete.
     */
    where: BrandWhereUniqueInput
  }

  /**
   * Brand deleteMany
   */
  export type BrandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Brands to delete
     */
    where?: BrandWhereInput
    /**
     * Limit how many Brands to delete.
     */
    limit?: number
  }

  /**
   * Brand findRaw
   */
  export type BrandFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Brand aggregateRaw
   */
  export type BrandAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Brand.products
   */
  export type Brand$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Brand without action
   */
  export type BrandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Brand
     */
    select?: BrandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Brand
     */
    omit?: BrandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BrandInclude<ExtArgs> | null
  }


  /**
   * Model Warehouse
   */

  export type AggregateWarehouse = {
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  export type WarehouseMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    address: string | null
    manager: string | null
    contact: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WarehouseMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    address: string | null
    manager: string | null
    contact: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WarehouseCountAggregateOutputType = {
    id: number
    name: number
    code: number
    location: number
    address: number
    manager: number
    contact: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WarehouseMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    address?: true
    manager?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WarehouseMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    address?: true
    manager?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WarehouseCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    location?: true
    address?: true
    manager?: true
    contact?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WarehouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouse to aggregate.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Warehouses
    **/
    _count?: true | WarehouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseMaxAggregateInputType
  }

  export type GetWarehouseAggregateType<T extends WarehouseAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouse[P]>
      : GetScalarType<T[P], AggregateWarehouse[P]>
  }




  export type WarehouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseWhereInput
    orderBy?: WarehouseOrderByWithAggregationInput | WarehouseOrderByWithAggregationInput[]
    by: WarehouseScalarFieldEnum[] | WarehouseScalarFieldEnum
    having?: WarehouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseCountAggregateInputType | true
    _min?: WarehouseMinAggregateInputType
    _max?: WarehouseMaxAggregateInputType
  }

  export type WarehouseGroupByOutputType = {
    id: string
    name: string
    code: string
    location: string[]
    address: string
    manager: string
    contact: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  type GetWarehouseGroupByPayload<T extends WarehouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
        }
      >
    >


  export type WarehouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    location?: boolean
    address?: boolean
    manager?: boolean
    contact?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    variants?: boolean | Warehouse$variantsArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouse"]>



  export type WarehouseSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    location?: boolean
    address?: boolean
    manager?: boolean
    contact?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WarehouseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "location" | "address" | "manager" | "contact" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["warehouse"]>
  export type WarehouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variants?: boolean | Warehouse$variantsArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $WarehousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Warehouse"
    objects: {
      variants: Prisma.$ProductVariantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      location: string[]
      address: string
      manager: string
      contact: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["warehouse"]>
    composites: {}
  }

  type WarehouseGetPayload<S extends boolean | null | undefined | WarehouseDefaultArgs> = $Result.GetResult<Prisma.$WarehousePayload, S>

  type WarehouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WarehouseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WarehouseCountAggregateInputType | true
    }

  export interface WarehouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warehouse'], meta: { name: 'Warehouse' } }
    /**
     * Find zero or one Warehouse that matches the filter.
     * @param {WarehouseFindUniqueArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehouseFindUniqueArgs>(args: SelectSubset<T, WarehouseFindUniqueArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Warehouse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WarehouseFindUniqueOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehouseFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehouseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehouseFindFirstArgs>(args?: SelectSubset<T, WarehouseFindFirstArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Warehouse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehouseFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehouseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warehouses
     * const warehouses = await prisma.warehouse.findMany()
     * 
     * // Get first 10 Warehouses
     * const warehouses = await prisma.warehouse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehouseFindManyArgs>(args?: SelectSubset<T, WarehouseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Warehouse.
     * @param {WarehouseCreateArgs} args - Arguments to create a Warehouse.
     * @example
     * // Create one Warehouse
     * const Warehouse = await prisma.warehouse.create({
     *   data: {
     *     // ... data to create a Warehouse
     *   }
     * })
     * 
     */
    create<T extends WarehouseCreateArgs>(args: SelectSubset<T, WarehouseCreateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Warehouses.
     * @param {WarehouseCreateManyArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouse = await prisma.warehouse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehouseCreateManyArgs>(args?: SelectSubset<T, WarehouseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Warehouse.
     * @param {WarehouseDeleteArgs} args - Arguments to delete one Warehouse.
     * @example
     * // Delete one Warehouse
     * const Warehouse = await prisma.warehouse.delete({
     *   where: {
     *     // ... filter to delete one Warehouse
     *   }
     * })
     * 
     */
    delete<T extends WarehouseDeleteArgs>(args: SelectSubset<T, WarehouseDeleteArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Warehouse.
     * @param {WarehouseUpdateArgs} args - Arguments to update one Warehouse.
     * @example
     * // Update one Warehouse
     * const warehouse = await prisma.warehouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehouseUpdateArgs>(args: SelectSubset<T, WarehouseUpdateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Warehouses.
     * @param {WarehouseDeleteManyArgs} args - Arguments to filter Warehouses to delete.
     * @example
     * // Delete a few Warehouses
     * const { count } = await prisma.warehouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehouseDeleteManyArgs>(args?: SelectSubset<T, WarehouseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warehouses
     * const warehouse = await prisma.warehouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehouseUpdateManyArgs>(args: SelectSubset<T, WarehouseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Warehouse.
     * @param {WarehouseUpsertArgs} args - Arguments to update or create a Warehouse.
     * @example
     * // Update or create a Warehouse
     * const warehouse = await prisma.warehouse.upsert({
     *   create: {
     *     // ... data to create a Warehouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warehouse we want to update
     *   }
     * })
     */
    upsert<T extends WarehouseUpsertArgs>(args: SelectSubset<T, WarehouseUpsertArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Warehouses that matches the filter.
     * @param {WarehouseFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const warehouse = await prisma.warehouse.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: WarehouseFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Warehouse.
     * @param {WarehouseAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const warehouse = await prisma.warehouse.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: WarehouseAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseCountArgs} args - Arguments to filter Warehouses to count.
     * @example
     * // Count the number of Warehouses
     * const count = await prisma.warehouse.count({
     *   where: {
     *     // ... the filter for the Warehouses we want to count
     *   }
     * })
    **/
    count<T extends WarehouseCountArgs>(
      args?: Subset<T, WarehouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseAggregateArgs>(args: Subset<T, WarehouseAggregateArgs>): Prisma.PrismaPromise<GetWarehouseAggregateType<T>>

    /**
     * Group by Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Warehouse model
   */
  readonly fields: WarehouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Warehouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    variants<T extends Warehouse$variantsArgs<ExtArgs> = {}>(args?: Subset<T, Warehouse$variantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Warehouse model
   */
  interface WarehouseFieldRefs {
    readonly id: FieldRef<"Warehouse", 'String'>
    readonly name: FieldRef<"Warehouse", 'String'>
    readonly code: FieldRef<"Warehouse", 'String'>
    readonly location: FieldRef<"Warehouse", 'String[]'>
    readonly address: FieldRef<"Warehouse", 'String'>
    readonly manager: FieldRef<"Warehouse", 'String'>
    readonly contact: FieldRef<"Warehouse", 'String'>
    readonly status: FieldRef<"Warehouse", 'String'>
    readonly createdAt: FieldRef<"Warehouse", 'DateTime'>
    readonly updatedAt: FieldRef<"Warehouse", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Warehouse findUnique
   */
  export type WarehouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findUniqueOrThrow
   */
  export type WarehouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findFirst
   */
  export type WarehouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findFirstOrThrow
   */
  export type WarehouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findMany
   */
  export type WarehouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse create
   */
  export type WarehouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to create a Warehouse.
     */
    data: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
  }

  /**
   * Warehouse createMany
   */
  export type WarehouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Warehouses.
     */
    data: WarehouseCreateManyInput | WarehouseCreateManyInput[]
  }

  /**
   * Warehouse update
   */
  export type WarehouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to update a Warehouse.
     */
    data: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
    /**
     * Choose, which Warehouse to update.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse updateMany
   */
  export type WarehouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehouseUpdateManyMutationInput, WarehouseUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehouseWhereInput
    /**
     * Limit how many Warehouses to update.
     */
    limit?: number
  }

  /**
   * Warehouse upsert
   */
  export type WarehouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The filter to search for the Warehouse to update in case it exists.
     */
    where: WarehouseWhereUniqueInput
    /**
     * In case the Warehouse found by the `where` argument doesn't exist, create a new Warehouse with this data.
     */
    create: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
    /**
     * In case the Warehouse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
  }

  /**
   * Warehouse delete
   */
  export type WarehouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter which Warehouse to delete.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse deleteMany
   */
  export type WarehouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouses to delete
     */
    where?: WarehouseWhereInput
    /**
     * Limit how many Warehouses to delete.
     */
    limit?: number
  }

  /**
   * Warehouse findRaw
   */
  export type WarehouseFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Warehouse aggregateRaw
   */
  export type WarehouseAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Warehouse.variants
   */
  export type Warehouse$variantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Warehouse without action
   */
  export type WarehouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Warehouse
     */
    omit?: WarehouseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    description: 'description',
    costPrice: 'costPrice',
    basePrice: 'basePrice',
    sku: 'sku',
    barcode: 'barcode',
    featured: 'featured',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    taxable: 'taxable',
    shippable: 'shippable',
    categories: 'categories',
    categoryIds: 'categoryIds',
    brandId: 'brandId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const RelatedProductScalarFieldEnum: {
    id: 'id',
    fromProductId: 'fromProductId',
    toProductId: 'toProductId'
  };

  export type RelatedProductScalarFieldEnum = (typeof RelatedProductScalarFieldEnum)[keyof typeof RelatedProductScalarFieldEnum]


  export const ProductImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    blurhash: 'blurhash',
    isMain: 'isMain',
    productId: 'productId',
    createdAt: 'createdAt'
  };

  export type ProductImageScalarFieldEnum = (typeof ProductImageScalarFieldEnum)[keyof typeof ProductImageScalarFieldEnum]


  export const WishlistScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WishlistScalarFieldEnum = (typeof WishlistScalarFieldEnum)[keyof typeof WishlistScalarFieldEnum]


  export const StockScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    reserved: 'reserved',
    variantId: 'variantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const ReservationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReservationScalarFieldEnum = (typeof ReservationScalarFieldEnum)[keyof typeof ReservationScalarFieldEnum]


  export const ReservationItemScalarFieldEnum: {
    id: 'id',
    quantity: 'quantity',
    variantId: 'variantId',
    reservationId: 'reservationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReservationItemScalarFieldEnum = (typeof ReservationItemScalarFieldEnum)[keyof typeof ReservationItemScalarFieldEnum]


  export const ProductVariantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    sku: 'sku',
    price: 'price',
    lowStockThreshold: 'lowStockThreshold',
    colorValue: 'colorValue',
    colorName: 'colorName',
    attributesIds: 'attributesIds',
    imageIds: 'imageIds',
    productId: 'productId',
    warehouseId: 'warehouseId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductVariantScalarFieldEnum = (typeof ProductVariantScalarFieldEnum)[keyof typeof ProductVariantScalarFieldEnum]


  export const VariantAttributeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    extraValue: 'extraValue',
    variantId: 'variantId'
  };

  export type VariantAttributeScalarFieldEnum = (typeof VariantAttributeScalarFieldEnum)[keyof typeof VariantAttributeScalarFieldEnum]


  export const ProductAttributeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    required: 'required',
    visible: 'visible',
    variantable: 'variantable',
    filterable: 'filterable',
    searchable: 'searchable',
    displayOrder: 'displayOrder',
    values: 'values',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductAttributeScalarFieldEnum = (typeof ProductAttributeScalarFieldEnum)[keyof typeof ProductAttributeScalarFieldEnum]


  export const SizeChartScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SizeChartScalarFieldEnum = (typeof SizeChartScalarFieldEnum)[keyof typeof SizeChartScalarFieldEnum]


  export const SizeChartColumnScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    unit: 'unit',
    sizeChartId: 'sizeChartId',
    createdAt: 'createdAt'
  };

  export type SizeChartColumnScalarFieldEnum = (typeof SizeChartColumnScalarFieldEnum)[keyof typeof SizeChartColumnScalarFieldEnum]


  export const SizeChartRowScalarFieldEnum: {
    id: 'id',
    name: 'name',
    values: 'values',
    sizeChartId: 'sizeChartId',
    createdAt: 'createdAt'
  };

  export type SizeChartRowScalarFieldEnum = (typeof SizeChartRowScalarFieldEnum)[keyof typeof SizeChartRowScalarFieldEnum]


  export const SizeChartImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    name: 'name',
    sizeChartId: 'sizeChartId',
    createdAt: 'createdAt'
  };

  export type SizeChartImageScalarFieldEnum = (typeof SizeChartImageScalarFieldEnum)[keyof typeof SizeChartImageScalarFieldEnum]


  export const ProductDimensionScalarFieldEnum: {
    id: 'id',
    length: 'length',
    width: 'width',
    height: 'height',
    weight: 'weight',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductDimensionScalarFieldEnum = (typeof ProductDimensionScalarFieldEnum)[keyof typeof ProductDimensionScalarFieldEnum]


  export const ProductSEOScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    keywords: 'keywords',
    productId: 'productId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductSEOScalarFieldEnum = (typeof ProductSEOScalarFieldEnum)[keyof typeof ProductSEOScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    parentId: 'parentId',
    productIds: 'productIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const TagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const ProductTagScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    tagId: 'tagId',
    createdAt: 'createdAt'
  };

  export type ProductTagScalarFieldEnum = (typeof ProductTagScalarFieldEnum)[keyof typeof ProductTagScalarFieldEnum]


  export const BrandScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BrandScalarFieldEnum = (typeof BrandScalarFieldEnum)[keyof typeof BrandScalarFieldEnum]


  export const WarehouseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    location: 'location',
    address: 'address',
    manager: 'manager',
    contact: 'contact',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WarehouseScalarFieldEnum = (typeof WarehouseScalarFieldEnum)[keyof typeof WarehouseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    costPrice?: FloatFilter<"Product"> | number
    basePrice?: FloatFilter<"Product"> | number
    sku?: StringFilter<"Product"> | string
    barcode?: StringNullableFilter<"Product"> | string | null
    featured?: BoolFilter<"Product"> | boolean
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    taxable?: BoolFilter<"Product"> | boolean
    shippable?: BoolFilter<"Product"> | boolean
    categories?: StringNullableListFilter<"Product">
    categoryIds?: StringNullableListFilter<"Product">
    brandId?: StringNullableFilter<"Product"> | string | null
    images?: ProductImageListRelationFilter
    variants?: ProductVariantListRelationFilter
    attributes?: ProductAttributeListRelationFilter
    sizeCharts?: SizeChartListRelationFilter
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    dimensions?: XOR<ProductDimensionNullableScalarRelationFilter, ProductDimensionWhereInput> | null
    seo?: XOR<ProductSEONullableScalarRelationFilter, ProductSEOWhereInput> | null
    productTags?: ProductTagListRelationFilter
    relatedFrom?: RelatedProductListRelationFilter
    relatedTo?: RelatedProductListRelationFilter
    wishlists?: WishlistListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    costPrice?: SortOrder
    basePrice?: SortOrder
    sku?: SortOrder
    barcode?: SortOrder
    featured?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxable?: SortOrder
    shippable?: SortOrder
    categories?: SortOrder
    categoryIds?: SortOrder
    brandId?: SortOrder
    images?: ProductImageOrderByRelationAggregateInput
    variants?: ProductVariantOrderByRelationAggregateInput
    attributes?: ProductAttributeOrderByRelationAggregateInput
    sizeCharts?: SizeChartOrderByRelationAggregateInput
    brand?: BrandOrderByWithRelationInput
    dimensions?: ProductDimensionOrderByWithRelationInput
    seo?: ProductSEOOrderByWithRelationInput
    productTags?: ProductTagOrderByRelationAggregateInput
    relatedFrom?: RelatedProductOrderByRelationAggregateInput
    relatedTo?: RelatedProductOrderByRelationAggregateInput
    wishlists?: WishlistOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    sku?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    costPrice?: FloatFilter<"Product"> | number
    basePrice?: FloatFilter<"Product"> | number
    barcode?: StringNullableFilter<"Product"> | string | null
    featured?: BoolFilter<"Product"> | boolean
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    taxable?: BoolFilter<"Product"> | boolean
    shippable?: BoolFilter<"Product"> | boolean
    categories?: StringNullableListFilter<"Product">
    categoryIds?: StringNullableListFilter<"Product">
    brandId?: StringNullableFilter<"Product"> | string | null
    images?: ProductImageListRelationFilter
    variants?: ProductVariantListRelationFilter
    attributes?: ProductAttributeListRelationFilter
    sizeCharts?: SizeChartListRelationFilter
    brand?: XOR<BrandNullableScalarRelationFilter, BrandWhereInput> | null
    dimensions?: XOR<ProductDimensionNullableScalarRelationFilter, ProductDimensionWhereInput> | null
    seo?: XOR<ProductSEONullableScalarRelationFilter, ProductSEOWhereInput> | null
    productTags?: ProductTagListRelationFilter
    relatedFrom?: RelatedProductListRelationFilter
    relatedTo?: RelatedProductListRelationFilter
    wishlists?: WishlistListRelationFilter
  }, "id" | "slug" | "sku">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    costPrice?: SortOrder
    basePrice?: SortOrder
    sku?: SortOrder
    barcode?: SortOrder
    featured?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxable?: SortOrder
    shippable?: SortOrder
    categories?: SortOrder
    categoryIds?: SortOrder
    brandId?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    slug?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    costPrice?: FloatWithAggregatesFilter<"Product"> | number
    basePrice?: FloatWithAggregatesFilter<"Product"> | number
    sku?: StringWithAggregatesFilter<"Product"> | string
    barcode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    featured?: BoolWithAggregatesFilter<"Product"> | boolean
    status?: StringWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    taxable?: BoolWithAggregatesFilter<"Product"> | boolean
    shippable?: BoolWithAggregatesFilter<"Product"> | boolean
    categories?: StringNullableListFilter<"Product">
    categoryIds?: StringNullableListFilter<"Product">
    brandId?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type RelatedProductWhereInput = {
    AND?: RelatedProductWhereInput | RelatedProductWhereInput[]
    OR?: RelatedProductWhereInput[]
    NOT?: RelatedProductWhereInput | RelatedProductWhereInput[]
    id?: StringFilter<"RelatedProduct"> | string
    fromProductId?: StringFilter<"RelatedProduct"> | string
    toProductId?: StringFilter<"RelatedProduct"> | string
    fromProduct?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    toProduct?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type RelatedProductOrderByWithRelationInput = {
    id?: SortOrder
    fromProductId?: SortOrder
    toProductId?: SortOrder
    fromProduct?: ProductOrderByWithRelationInput
    toProduct?: ProductOrderByWithRelationInput
  }

  export type RelatedProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    fromProductId_toProductId?: RelatedProductFromProductIdToProductIdCompoundUniqueInput
    AND?: RelatedProductWhereInput | RelatedProductWhereInput[]
    OR?: RelatedProductWhereInput[]
    NOT?: RelatedProductWhereInput | RelatedProductWhereInput[]
    fromProductId?: StringFilter<"RelatedProduct"> | string
    toProductId?: StringFilter<"RelatedProduct"> | string
    fromProduct?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    toProduct?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "fromProductId_toProductId">

  export type RelatedProductOrderByWithAggregationInput = {
    id?: SortOrder
    fromProductId?: SortOrder
    toProductId?: SortOrder
    _count?: RelatedProductCountOrderByAggregateInput
    _max?: RelatedProductMaxOrderByAggregateInput
    _min?: RelatedProductMinOrderByAggregateInput
  }

  export type RelatedProductScalarWhereWithAggregatesInput = {
    AND?: RelatedProductScalarWhereWithAggregatesInput | RelatedProductScalarWhereWithAggregatesInput[]
    OR?: RelatedProductScalarWhereWithAggregatesInput[]
    NOT?: RelatedProductScalarWhereWithAggregatesInput | RelatedProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RelatedProduct"> | string
    fromProductId?: StringWithAggregatesFilter<"RelatedProduct"> | string
    toProductId?: StringWithAggregatesFilter<"RelatedProduct"> | string
  }

  export type ProductImageWhereInput = {
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    id?: StringFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    blurhash?: StringFilter<"ProductImage"> | string
    isMain?: BoolFilter<"ProductImage"> | boolean
    productId?: StringFilter<"ProductImage"> | string
    createdAt?: DateTimeFilter<"ProductImage"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    blurhash?: SortOrder
    isMain?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    url?: StringFilter<"ProductImage"> | string
    blurhash?: StringFilter<"ProductImage"> | string
    isMain?: BoolFilter<"ProductImage"> | boolean
    productId?: StringFilter<"ProductImage"> | string
    createdAt?: DateTimeFilter<"ProductImage"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    blurhash?: SortOrder
    isMain?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    _count?: ProductImageCountOrderByAggregateInput
    _max?: ProductImageMaxOrderByAggregateInput
    _min?: ProductImageMinOrderByAggregateInput
  }

  export type ProductImageScalarWhereWithAggregatesInput = {
    AND?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    OR?: ProductImageScalarWhereWithAggregatesInput[]
    NOT?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductImage"> | string
    url?: StringWithAggregatesFilter<"ProductImage"> | string
    blurhash?: StringWithAggregatesFilter<"ProductImage"> | string
    isMain?: BoolWithAggregatesFilter<"ProductImage"> | boolean
    productId?: StringWithAggregatesFilter<"ProductImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductImage"> | Date | string
  }

  export type WishlistWhereInput = {
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    id?: StringFilter<"Wishlist"> | string
    userId?: StringFilter<"Wishlist"> | string
    productId?: StringFilter<"Wishlist"> | string
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
    updatedAt?: DateTimeFilter<"Wishlist"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type WishlistOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type WishlistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_productId?: WishlistUserIdProductIdCompoundUniqueInput
    AND?: WishlistWhereInput | WishlistWhereInput[]
    OR?: WishlistWhereInput[]
    NOT?: WishlistWhereInput | WishlistWhereInput[]
    userId?: StringFilter<"Wishlist"> | string
    productId?: StringFilter<"Wishlist"> | string
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
    updatedAt?: DateTimeFilter<"Wishlist"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "userId_productId">

  export type WishlistOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WishlistCountOrderByAggregateInput
    _max?: WishlistMaxOrderByAggregateInput
    _min?: WishlistMinOrderByAggregateInput
  }

  export type WishlistScalarWhereWithAggregatesInput = {
    AND?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    OR?: WishlistScalarWhereWithAggregatesInput[]
    NOT?: WishlistScalarWhereWithAggregatesInput | WishlistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wishlist"> | string
    userId?: StringWithAggregatesFilter<"Wishlist"> | string
    productId?: StringWithAggregatesFilter<"Wishlist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Wishlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wishlist"> | Date | string
  }

  export type StockWhereInput = {
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    id?: StringFilter<"Stock"> | string
    quantity?: IntFilter<"Stock"> | number
    reserved?: IntFilter<"Stock"> | number
    variantId?: StringFilter<"Stock"> | string
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }

  export type StockOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    variantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    variant?: ProductVariantOrderByWithRelationInput
  }

  export type StockWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    variantId?: string
    AND?: StockWhereInput | StockWhereInput[]
    OR?: StockWhereInput[]
    NOT?: StockWhereInput | StockWhereInput[]
    quantity?: IntFilter<"Stock"> | number
    reserved?: IntFilter<"Stock"> | number
    createdAt?: DateTimeFilter<"Stock"> | Date | string
    updatedAt?: DateTimeFilter<"Stock"> | Date | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }, "id" | "variantId">

  export type StockOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    variantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    OR?: StockScalarWhereWithAggregatesInput[]
    NOT?: StockScalarWhereWithAggregatesInput | StockScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stock"> | string
    quantity?: IntWithAggregatesFilter<"Stock"> | number
    reserved?: IntWithAggregatesFilter<"Stock"> | number
    variantId?: StringWithAggregatesFilter<"Stock"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Stock"> | Date | string
  }

  export type ReservationWhereInput = {
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    id?: StringFilter<"Reservation"> | string
    userId?: StringFilter<"Reservation"> | string
    createdAt?: DateTimeFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeFilter<"Reservation"> | Date | string
    items?: ReservationItemListRelationFilter
  }

  export type ReservationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    items?: ReservationItemOrderByRelationAggregateInput
  }

  export type ReservationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReservationWhereInput | ReservationWhereInput[]
    OR?: ReservationWhereInput[]
    NOT?: ReservationWhereInput | ReservationWhereInput[]
    userId?: StringFilter<"Reservation"> | string
    createdAt?: DateTimeFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeFilter<"Reservation"> | Date | string
    items?: ReservationItemListRelationFilter
  }, "id">

  export type ReservationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReservationCountOrderByAggregateInput
    _max?: ReservationMaxOrderByAggregateInput
    _min?: ReservationMinOrderByAggregateInput
  }

  export type ReservationScalarWhereWithAggregatesInput = {
    AND?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    OR?: ReservationScalarWhereWithAggregatesInput[]
    NOT?: ReservationScalarWhereWithAggregatesInput | ReservationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Reservation"> | string
    userId?: StringWithAggregatesFilter<"Reservation"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Reservation"> | Date | string
  }

  export type ReservationItemWhereInput = {
    AND?: ReservationItemWhereInput | ReservationItemWhereInput[]
    OR?: ReservationItemWhereInput[]
    NOT?: ReservationItemWhereInput | ReservationItemWhereInput[]
    id?: StringFilter<"ReservationItem"> | string
    quantity?: IntFilter<"ReservationItem"> | number
    variantId?: StringFilter<"ReservationItem"> | string
    reservationId?: StringFilter<"ReservationItem"> | string
    createdAt?: DateTimeFilter<"ReservationItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReservationItem"> | Date | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
  }

  export type ReservationItemOrderByWithRelationInput = {
    id?: SortOrder
    quantity?: SortOrder
    variantId?: SortOrder
    reservationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    variant?: ProductVariantOrderByWithRelationInput
    reservation?: ReservationOrderByWithRelationInput
  }

  export type ReservationItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReservationItemWhereInput | ReservationItemWhereInput[]
    OR?: ReservationItemWhereInput[]
    NOT?: ReservationItemWhereInput | ReservationItemWhereInput[]
    quantity?: IntFilter<"ReservationItem"> | number
    variantId?: StringFilter<"ReservationItem"> | string
    reservationId?: StringFilter<"ReservationItem"> | string
    createdAt?: DateTimeFilter<"ReservationItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReservationItem"> | Date | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    reservation?: XOR<ReservationScalarRelationFilter, ReservationWhereInput>
  }, "id">

  export type ReservationItemOrderByWithAggregationInput = {
    id?: SortOrder
    quantity?: SortOrder
    variantId?: SortOrder
    reservationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReservationItemCountOrderByAggregateInput
    _avg?: ReservationItemAvgOrderByAggregateInput
    _max?: ReservationItemMaxOrderByAggregateInput
    _min?: ReservationItemMinOrderByAggregateInput
    _sum?: ReservationItemSumOrderByAggregateInput
  }

  export type ReservationItemScalarWhereWithAggregatesInput = {
    AND?: ReservationItemScalarWhereWithAggregatesInput | ReservationItemScalarWhereWithAggregatesInput[]
    OR?: ReservationItemScalarWhereWithAggregatesInput[]
    NOT?: ReservationItemScalarWhereWithAggregatesInput | ReservationItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReservationItem"> | string
    quantity?: IntWithAggregatesFilter<"ReservationItem"> | number
    variantId?: StringWithAggregatesFilter<"ReservationItem"> | string
    reservationId?: StringWithAggregatesFilter<"ReservationItem"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ReservationItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReservationItem"> | Date | string
  }

  export type ProductVariantWhereInput = {
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    id?: StringFilter<"ProductVariant"> | string
    name?: StringFilter<"ProductVariant"> | string
    sku?: StringFilter<"ProductVariant"> | string
    price?: FloatFilter<"ProductVariant"> | number
    lowStockThreshold?: IntFilter<"ProductVariant"> | number
    colorValue?: StringNullableFilter<"ProductVariant"> | string | null
    colorName?: StringNullableFilter<"ProductVariant"> | string | null
    attributesIds?: StringNullableListFilter<"ProductVariant">
    imageIds?: StringNullableListFilter<"ProductVariant">
    productId?: StringFilter<"ProductVariant"> | string
    warehouseId?: StringFilter<"ProductVariant"> | string
    createdAt?: DateTimeFilter<"ProductVariant"> | Date | string
    updatedAt?: DateTimeFilter<"ProductVariant"> | Date | string
    attributes?: VariantAttributeListRelationFilter
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    warehouse?: XOR<WarehouseScalarRelationFilter, WarehouseWhereInput>
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    reservationItems?: ReservationItemListRelationFilter
  }

  export type ProductVariantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    price?: SortOrder
    lowStockThreshold?: SortOrder
    colorValue?: SortOrder
    colorName?: SortOrder
    attributesIds?: SortOrder
    imageIds?: SortOrder
    productId?: SortOrder
    warehouseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    attributes?: VariantAttributeOrderByRelationAggregateInput
    product?: ProductOrderByWithRelationInput
    warehouse?: WarehouseOrderByWithRelationInput
    stock?: StockOrderByWithRelationInput
    reservationItems?: ReservationItemOrderByRelationAggregateInput
  }

  export type ProductVariantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sku?: string
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    name?: StringFilter<"ProductVariant"> | string
    price?: FloatFilter<"ProductVariant"> | number
    lowStockThreshold?: IntFilter<"ProductVariant"> | number
    colorValue?: StringNullableFilter<"ProductVariant"> | string | null
    colorName?: StringNullableFilter<"ProductVariant"> | string | null
    attributesIds?: StringNullableListFilter<"ProductVariant">
    imageIds?: StringNullableListFilter<"ProductVariant">
    productId?: StringFilter<"ProductVariant"> | string
    warehouseId?: StringFilter<"ProductVariant"> | string
    createdAt?: DateTimeFilter<"ProductVariant"> | Date | string
    updatedAt?: DateTimeFilter<"ProductVariant"> | Date | string
    attributes?: VariantAttributeListRelationFilter
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    warehouse?: XOR<WarehouseScalarRelationFilter, WarehouseWhereInput>
    stock?: XOR<StockNullableScalarRelationFilter, StockWhereInput> | null
    reservationItems?: ReservationItemListRelationFilter
  }, "id" | "sku">

  export type ProductVariantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    price?: SortOrder
    lowStockThreshold?: SortOrder
    colorValue?: SortOrder
    colorName?: SortOrder
    attributesIds?: SortOrder
    imageIds?: SortOrder
    productId?: SortOrder
    warehouseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductVariantCountOrderByAggregateInput
    _avg?: ProductVariantAvgOrderByAggregateInput
    _max?: ProductVariantMaxOrderByAggregateInput
    _min?: ProductVariantMinOrderByAggregateInput
    _sum?: ProductVariantSumOrderByAggregateInput
  }

  export type ProductVariantScalarWhereWithAggregatesInput = {
    AND?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    OR?: ProductVariantScalarWhereWithAggregatesInput[]
    NOT?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductVariant"> | string
    name?: StringWithAggregatesFilter<"ProductVariant"> | string
    sku?: StringWithAggregatesFilter<"ProductVariant"> | string
    price?: FloatWithAggregatesFilter<"ProductVariant"> | number
    lowStockThreshold?: IntWithAggregatesFilter<"ProductVariant"> | number
    colorValue?: StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
    colorName?: StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
    attributesIds?: StringNullableListFilter<"ProductVariant">
    imageIds?: StringNullableListFilter<"ProductVariant">
    productId?: StringWithAggregatesFilter<"ProductVariant"> | string
    warehouseId?: StringWithAggregatesFilter<"ProductVariant"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductVariant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductVariant"> | Date | string
  }

  export type VariantAttributeWhereInput = {
    AND?: VariantAttributeWhereInput | VariantAttributeWhereInput[]
    OR?: VariantAttributeWhereInput[]
    NOT?: VariantAttributeWhereInput | VariantAttributeWhereInput[]
    id?: StringFilter<"VariantAttribute"> | string
    name?: StringFilter<"VariantAttribute"> | string
    value?: StringFilter<"VariantAttribute"> | string
    extraValue?: StringNullableFilter<"VariantAttribute"> | string | null
    variantId?: StringFilter<"VariantAttribute"> | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }

  export type VariantAttributeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    extraValue?: SortOrder
    variantId?: SortOrder
    variant?: ProductVariantOrderByWithRelationInput
  }

  export type VariantAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VariantAttributeWhereInput | VariantAttributeWhereInput[]
    OR?: VariantAttributeWhereInput[]
    NOT?: VariantAttributeWhereInput | VariantAttributeWhereInput[]
    name?: StringFilter<"VariantAttribute"> | string
    value?: StringFilter<"VariantAttribute"> | string
    extraValue?: StringNullableFilter<"VariantAttribute"> | string | null
    variantId?: StringFilter<"VariantAttribute"> | string
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }, "id">

  export type VariantAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    extraValue?: SortOrder
    variantId?: SortOrder
    _count?: VariantAttributeCountOrderByAggregateInput
    _max?: VariantAttributeMaxOrderByAggregateInput
    _min?: VariantAttributeMinOrderByAggregateInput
  }

  export type VariantAttributeScalarWhereWithAggregatesInput = {
    AND?: VariantAttributeScalarWhereWithAggregatesInput | VariantAttributeScalarWhereWithAggregatesInput[]
    OR?: VariantAttributeScalarWhereWithAggregatesInput[]
    NOT?: VariantAttributeScalarWhereWithAggregatesInput | VariantAttributeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"VariantAttribute"> | string
    name?: StringWithAggregatesFilter<"VariantAttribute"> | string
    value?: StringWithAggregatesFilter<"VariantAttribute"> | string
    extraValue?: StringNullableWithAggregatesFilter<"VariantAttribute"> | string | null
    variantId?: StringWithAggregatesFilter<"VariantAttribute"> | string
  }

  export type ProductAttributeWhereInput = {
    AND?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    OR?: ProductAttributeWhereInput[]
    NOT?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    id?: StringFilter<"ProductAttribute"> | string
    name?: StringFilter<"ProductAttribute"> | string
    required?: BoolFilter<"ProductAttribute"> | boolean
    visible?: BoolFilter<"ProductAttribute"> | boolean
    variantable?: BoolFilter<"ProductAttribute"> | boolean
    filterable?: BoolFilter<"ProductAttribute"> | boolean
    searchable?: BoolFilter<"ProductAttribute"> | boolean
    displayOrder?: IntFilter<"ProductAttribute"> | number
    values?: StringNullableListFilter<"ProductAttribute">
    productId?: StringFilter<"ProductAttribute"> | string
    createdAt?: DateTimeFilter<"ProductAttribute"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAttribute"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductAttributeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    required?: SortOrder
    visible?: SortOrder
    variantable?: SortOrder
    filterable?: SortOrder
    searchable?: SortOrder
    displayOrder?: SortOrder
    values?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    OR?: ProductAttributeWhereInput[]
    NOT?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    name?: StringFilter<"ProductAttribute"> | string
    required?: BoolFilter<"ProductAttribute"> | boolean
    visible?: BoolFilter<"ProductAttribute"> | boolean
    variantable?: BoolFilter<"ProductAttribute"> | boolean
    filterable?: BoolFilter<"ProductAttribute"> | boolean
    searchable?: BoolFilter<"ProductAttribute"> | boolean
    displayOrder?: IntFilter<"ProductAttribute"> | number
    values?: StringNullableListFilter<"ProductAttribute">
    productId?: StringFilter<"ProductAttribute"> | string
    createdAt?: DateTimeFilter<"ProductAttribute"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAttribute"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    required?: SortOrder
    visible?: SortOrder
    variantable?: SortOrder
    filterable?: SortOrder
    searchable?: SortOrder
    displayOrder?: SortOrder
    values?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductAttributeCountOrderByAggregateInput
    _avg?: ProductAttributeAvgOrderByAggregateInput
    _max?: ProductAttributeMaxOrderByAggregateInput
    _min?: ProductAttributeMinOrderByAggregateInput
    _sum?: ProductAttributeSumOrderByAggregateInput
  }

  export type ProductAttributeScalarWhereWithAggregatesInput = {
    AND?: ProductAttributeScalarWhereWithAggregatesInput | ProductAttributeScalarWhereWithAggregatesInput[]
    OR?: ProductAttributeScalarWhereWithAggregatesInput[]
    NOT?: ProductAttributeScalarWhereWithAggregatesInput | ProductAttributeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductAttribute"> | string
    name?: StringWithAggregatesFilter<"ProductAttribute"> | string
    required?: BoolWithAggregatesFilter<"ProductAttribute"> | boolean
    visible?: BoolWithAggregatesFilter<"ProductAttribute"> | boolean
    variantable?: BoolWithAggregatesFilter<"ProductAttribute"> | boolean
    filterable?: BoolWithAggregatesFilter<"ProductAttribute"> | boolean
    searchable?: BoolWithAggregatesFilter<"ProductAttribute"> | boolean
    displayOrder?: IntWithAggregatesFilter<"ProductAttribute"> | number
    values?: StringNullableListFilter<"ProductAttribute">
    productId?: StringWithAggregatesFilter<"ProductAttribute"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductAttribute"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductAttribute"> | Date | string
  }

  export type SizeChartWhereInput = {
    AND?: SizeChartWhereInput | SizeChartWhereInput[]
    OR?: SizeChartWhereInput[]
    NOT?: SizeChartWhereInput | SizeChartWhereInput[]
    id?: StringFilter<"SizeChart"> | string
    name?: StringFilter<"SizeChart"> | string
    category?: StringFilter<"SizeChart"> | string
    description?: StringNullableFilter<"SizeChart"> | string | null
    productId?: StringFilter<"SizeChart"> | string
    createdAt?: DateTimeFilter<"SizeChart"> | Date | string
    updatedAt?: DateTimeFilter<"SizeChart"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    columns?: SizeChartColumnListRelationFilter
    rows?: SizeChartRowListRelationFilter
    images?: SizeChartImageListRelationFilter
  }

  export type SizeChartOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    columns?: SizeChartColumnOrderByRelationAggregateInput
    rows?: SizeChartRowOrderByRelationAggregateInput
    images?: SizeChartImageOrderByRelationAggregateInput
  }

  export type SizeChartWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeChartWhereInput | SizeChartWhereInput[]
    OR?: SizeChartWhereInput[]
    NOT?: SizeChartWhereInput | SizeChartWhereInput[]
    name?: StringFilter<"SizeChart"> | string
    category?: StringFilter<"SizeChart"> | string
    description?: StringNullableFilter<"SizeChart"> | string | null
    productId?: StringFilter<"SizeChart"> | string
    createdAt?: DateTimeFilter<"SizeChart"> | Date | string
    updatedAt?: DateTimeFilter<"SizeChart"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    columns?: SizeChartColumnListRelationFilter
    rows?: SizeChartRowListRelationFilter
    images?: SizeChartImageListRelationFilter
  }, "id">

  export type SizeChartOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SizeChartCountOrderByAggregateInput
    _max?: SizeChartMaxOrderByAggregateInput
    _min?: SizeChartMinOrderByAggregateInput
  }

  export type SizeChartScalarWhereWithAggregatesInput = {
    AND?: SizeChartScalarWhereWithAggregatesInput | SizeChartScalarWhereWithAggregatesInput[]
    OR?: SizeChartScalarWhereWithAggregatesInput[]
    NOT?: SizeChartScalarWhereWithAggregatesInput | SizeChartScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SizeChart"> | string
    name?: StringWithAggregatesFilter<"SizeChart"> | string
    category?: StringWithAggregatesFilter<"SizeChart"> | string
    description?: StringNullableWithAggregatesFilter<"SizeChart"> | string | null
    productId?: StringWithAggregatesFilter<"SizeChart"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SizeChart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SizeChart"> | Date | string
  }

  export type SizeChartColumnWhereInput = {
    AND?: SizeChartColumnWhereInput | SizeChartColumnWhereInput[]
    OR?: SizeChartColumnWhereInput[]
    NOT?: SizeChartColumnWhereInput | SizeChartColumnWhereInput[]
    id?: StringFilter<"SizeChartColumn"> | string
    name?: StringFilter<"SizeChartColumn"> | string
    type?: StringFilter<"SizeChartColumn"> | string
    unit?: StringNullableFilter<"SizeChartColumn"> | string | null
    sizeChartId?: StringFilter<"SizeChartColumn"> | string
    createdAt?: DateTimeFilter<"SizeChartColumn"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }

  export type SizeChartColumnOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    sizeChart?: SizeChartOrderByWithRelationInput
  }

  export type SizeChartColumnWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeChartColumnWhereInput | SizeChartColumnWhereInput[]
    OR?: SizeChartColumnWhereInput[]
    NOT?: SizeChartColumnWhereInput | SizeChartColumnWhereInput[]
    name?: StringFilter<"SizeChartColumn"> | string
    type?: StringFilter<"SizeChartColumn"> | string
    unit?: StringNullableFilter<"SizeChartColumn"> | string | null
    sizeChartId?: StringFilter<"SizeChartColumn"> | string
    createdAt?: DateTimeFilter<"SizeChartColumn"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }, "id">

  export type SizeChartColumnOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    _count?: SizeChartColumnCountOrderByAggregateInput
    _max?: SizeChartColumnMaxOrderByAggregateInput
    _min?: SizeChartColumnMinOrderByAggregateInput
  }

  export type SizeChartColumnScalarWhereWithAggregatesInput = {
    AND?: SizeChartColumnScalarWhereWithAggregatesInput | SizeChartColumnScalarWhereWithAggregatesInput[]
    OR?: SizeChartColumnScalarWhereWithAggregatesInput[]
    NOT?: SizeChartColumnScalarWhereWithAggregatesInput | SizeChartColumnScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SizeChartColumn"> | string
    name?: StringWithAggregatesFilter<"SizeChartColumn"> | string
    type?: StringWithAggregatesFilter<"SizeChartColumn"> | string
    unit?: StringNullableWithAggregatesFilter<"SizeChartColumn"> | string | null
    sizeChartId?: StringWithAggregatesFilter<"SizeChartColumn"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SizeChartColumn"> | Date | string
  }

  export type SizeChartRowWhereInput = {
    AND?: SizeChartRowWhereInput | SizeChartRowWhereInput[]
    OR?: SizeChartRowWhereInput[]
    NOT?: SizeChartRowWhereInput | SizeChartRowWhereInput[]
    id?: StringFilter<"SizeChartRow"> | string
    name?: StringFilter<"SizeChartRow"> | string
    values?: JsonFilter<"SizeChartRow">
    sizeChartId?: StringFilter<"SizeChartRow"> | string
    createdAt?: DateTimeFilter<"SizeChartRow"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }

  export type SizeChartRowOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    values?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    sizeChart?: SizeChartOrderByWithRelationInput
  }

  export type SizeChartRowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeChartRowWhereInput | SizeChartRowWhereInput[]
    OR?: SizeChartRowWhereInput[]
    NOT?: SizeChartRowWhereInput | SizeChartRowWhereInput[]
    name?: StringFilter<"SizeChartRow"> | string
    values?: JsonFilter<"SizeChartRow">
    sizeChartId?: StringFilter<"SizeChartRow"> | string
    createdAt?: DateTimeFilter<"SizeChartRow"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }, "id">

  export type SizeChartRowOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    values?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    _count?: SizeChartRowCountOrderByAggregateInput
    _max?: SizeChartRowMaxOrderByAggregateInput
    _min?: SizeChartRowMinOrderByAggregateInput
  }

  export type SizeChartRowScalarWhereWithAggregatesInput = {
    AND?: SizeChartRowScalarWhereWithAggregatesInput | SizeChartRowScalarWhereWithAggregatesInput[]
    OR?: SizeChartRowScalarWhereWithAggregatesInput[]
    NOT?: SizeChartRowScalarWhereWithAggregatesInput | SizeChartRowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SizeChartRow"> | string
    name?: StringWithAggregatesFilter<"SizeChartRow"> | string
    values?: JsonWithAggregatesFilter<"SizeChartRow">
    sizeChartId?: StringWithAggregatesFilter<"SizeChartRow"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SizeChartRow"> | Date | string
  }

  export type SizeChartImageWhereInput = {
    AND?: SizeChartImageWhereInput | SizeChartImageWhereInput[]
    OR?: SizeChartImageWhereInput[]
    NOT?: SizeChartImageWhereInput | SizeChartImageWhereInput[]
    id?: StringFilter<"SizeChartImage"> | string
    url?: StringFilter<"SizeChartImage"> | string
    name?: StringFilter<"SizeChartImage"> | string
    sizeChartId?: StringFilter<"SizeChartImage"> | string
    createdAt?: DateTimeFilter<"SizeChartImage"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }

  export type SizeChartImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    sizeChart?: SizeChartOrderByWithRelationInput
  }

  export type SizeChartImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SizeChartImageWhereInput | SizeChartImageWhereInput[]
    OR?: SizeChartImageWhereInput[]
    NOT?: SizeChartImageWhereInput | SizeChartImageWhereInput[]
    url?: StringFilter<"SizeChartImage"> | string
    name?: StringFilter<"SizeChartImage"> | string
    sizeChartId?: StringFilter<"SizeChartImage"> | string
    createdAt?: DateTimeFilter<"SizeChartImage"> | Date | string
    sizeChart?: XOR<SizeChartScalarRelationFilter, SizeChartWhereInput>
  }, "id">

  export type SizeChartImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
    _count?: SizeChartImageCountOrderByAggregateInput
    _max?: SizeChartImageMaxOrderByAggregateInput
    _min?: SizeChartImageMinOrderByAggregateInput
  }

  export type SizeChartImageScalarWhereWithAggregatesInput = {
    AND?: SizeChartImageScalarWhereWithAggregatesInput | SizeChartImageScalarWhereWithAggregatesInput[]
    OR?: SizeChartImageScalarWhereWithAggregatesInput[]
    NOT?: SizeChartImageScalarWhereWithAggregatesInput | SizeChartImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SizeChartImage"> | string
    url?: StringWithAggregatesFilter<"SizeChartImage"> | string
    name?: StringWithAggregatesFilter<"SizeChartImage"> | string
    sizeChartId?: StringWithAggregatesFilter<"SizeChartImage"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SizeChartImage"> | Date | string
  }

  export type ProductDimensionWhereInput = {
    AND?: ProductDimensionWhereInput | ProductDimensionWhereInput[]
    OR?: ProductDimensionWhereInput[]
    NOT?: ProductDimensionWhereInput | ProductDimensionWhereInput[]
    id?: StringFilter<"ProductDimension"> | string
    length?: FloatFilter<"ProductDimension"> | number
    width?: FloatFilter<"ProductDimension"> | number
    height?: FloatFilter<"ProductDimension"> | number
    weight?: FloatFilter<"ProductDimension"> | number
    productId?: StringFilter<"ProductDimension"> | string
    createdAt?: DateTimeFilter<"ProductDimension"> | Date | string
    updatedAt?: DateTimeFilter<"ProductDimension"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductDimensionOrderByWithRelationInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductDimensionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId?: string
    AND?: ProductDimensionWhereInput | ProductDimensionWhereInput[]
    OR?: ProductDimensionWhereInput[]
    NOT?: ProductDimensionWhereInput | ProductDimensionWhereInput[]
    length?: FloatFilter<"ProductDimension"> | number
    width?: FloatFilter<"ProductDimension"> | number
    height?: FloatFilter<"ProductDimension"> | number
    weight?: FloatFilter<"ProductDimension"> | number
    createdAt?: DateTimeFilter<"ProductDimension"> | Date | string
    updatedAt?: DateTimeFilter<"ProductDimension"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "productId">

  export type ProductDimensionOrderByWithAggregationInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductDimensionCountOrderByAggregateInput
    _avg?: ProductDimensionAvgOrderByAggregateInput
    _max?: ProductDimensionMaxOrderByAggregateInput
    _min?: ProductDimensionMinOrderByAggregateInput
    _sum?: ProductDimensionSumOrderByAggregateInput
  }

  export type ProductDimensionScalarWhereWithAggregatesInput = {
    AND?: ProductDimensionScalarWhereWithAggregatesInput | ProductDimensionScalarWhereWithAggregatesInput[]
    OR?: ProductDimensionScalarWhereWithAggregatesInput[]
    NOT?: ProductDimensionScalarWhereWithAggregatesInput | ProductDimensionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductDimension"> | string
    length?: FloatWithAggregatesFilter<"ProductDimension"> | number
    width?: FloatWithAggregatesFilter<"ProductDimension"> | number
    height?: FloatWithAggregatesFilter<"ProductDimension"> | number
    weight?: FloatWithAggregatesFilter<"ProductDimension"> | number
    productId?: StringWithAggregatesFilter<"ProductDimension"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductDimension"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductDimension"> | Date | string
  }

  export type ProductSEOWhereInput = {
    AND?: ProductSEOWhereInput | ProductSEOWhereInput[]
    OR?: ProductSEOWhereInput[]
    NOT?: ProductSEOWhereInput | ProductSEOWhereInput[]
    id?: StringFilter<"ProductSEO"> | string
    title?: StringFilter<"ProductSEO"> | string
    description?: StringFilter<"ProductSEO"> | string
    keywords?: StringFilter<"ProductSEO"> | string
    productId?: StringFilter<"ProductSEO"> | string
    createdAt?: DateTimeFilter<"ProductSEO"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSEO"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductSEOOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductSEOWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId?: string
    AND?: ProductSEOWhereInput | ProductSEOWhereInput[]
    OR?: ProductSEOWhereInput[]
    NOT?: ProductSEOWhereInput | ProductSEOWhereInput[]
    title?: StringFilter<"ProductSEO"> | string
    description?: StringFilter<"ProductSEO"> | string
    keywords?: StringFilter<"ProductSEO"> | string
    createdAt?: DateTimeFilter<"ProductSEO"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSEO"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "productId">

  export type ProductSEOOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductSEOCountOrderByAggregateInput
    _max?: ProductSEOMaxOrderByAggregateInput
    _min?: ProductSEOMinOrderByAggregateInput
  }

  export type ProductSEOScalarWhereWithAggregatesInput = {
    AND?: ProductSEOScalarWhereWithAggregatesInput | ProductSEOScalarWhereWithAggregatesInput[]
    OR?: ProductSEOScalarWhereWithAggregatesInput[]
    NOT?: ProductSEOScalarWhereWithAggregatesInput | ProductSEOScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductSEO"> | string
    title?: StringWithAggregatesFilter<"ProductSEO"> | string
    description?: StringWithAggregatesFilter<"ProductSEO"> | string
    keywords?: StringWithAggregatesFilter<"ProductSEO"> | string
    productId?: StringWithAggregatesFilter<"ProductSEO"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductSEO"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductSEO"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    productIds?: StringNullableListFilter<"Category">
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    productIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    parentId?: StringNullableFilter<"Category"> | string | null
    productIds?: StringNullableListFilter<"Category">
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    productIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    parentId?: StringNullableWithAggregatesFilter<"Category"> | string | null
    productIds?: StringNullableListFilter<"Category">
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    id?: StringFilter<"Tag"> | string
    name?: StringFilter<"Tag"> | string
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    productTags?: ProductTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productTags?: ProductTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    createdAt?: DateTimeFilter<"Tag"> | Date | string
    updatedAt?: DateTimeFilter<"Tag"> | Date | string
    productTags?: ProductTagListRelationFilter
  }, "id" | "name">

  export type TagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Tag"> | string
    name?: StringWithAggregatesFilter<"Tag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Tag"> | Date | string
  }

  export type ProductTagWhereInput = {
    AND?: ProductTagWhereInput | ProductTagWhereInput[]
    OR?: ProductTagWhereInput[]
    NOT?: ProductTagWhereInput | ProductTagWhereInput[]
    id?: StringFilter<"ProductTag"> | string
    productId?: StringFilter<"ProductTag"> | string
    tagId?: StringFilter<"ProductTag"> | string
    createdAt?: DateTimeFilter<"ProductTag"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }

  export type ProductTagOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    tag?: TagOrderByWithRelationInput
  }

  export type ProductTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    productId_tagId?: ProductTagProductIdTagIdCompoundUniqueInput
    AND?: ProductTagWhereInput | ProductTagWhereInput[]
    OR?: ProductTagWhereInput[]
    NOT?: ProductTagWhereInput | ProductTagWhereInput[]
    productId?: StringFilter<"ProductTag"> | string
    tagId?: StringFilter<"ProductTag"> | string
    createdAt?: DateTimeFilter<"ProductTag"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    tag?: XOR<TagScalarRelationFilter, TagWhereInput>
  }, "id" | "productId_tagId">

  export type ProductTagOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
    _count?: ProductTagCountOrderByAggregateInput
    _max?: ProductTagMaxOrderByAggregateInput
    _min?: ProductTagMinOrderByAggregateInput
  }

  export type ProductTagScalarWhereWithAggregatesInput = {
    AND?: ProductTagScalarWhereWithAggregatesInput | ProductTagScalarWhereWithAggregatesInput[]
    OR?: ProductTagScalarWhereWithAggregatesInput[]
    NOT?: ProductTagScalarWhereWithAggregatesInput | ProductTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductTag"> | string
    productId?: StringWithAggregatesFilter<"ProductTag"> | string
    tagId?: StringWithAggregatesFilter<"ProductTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ProductTag"> | Date | string
  }

  export type BrandWhereInput = {
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    id?: StringFilter<"Brand"> | string
    name?: StringFilter<"Brand"> | string
    logo?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    products?: ProductListRelationFilter
  }

  export type BrandOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type BrandWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: BrandWhereInput | BrandWhereInput[]
    OR?: BrandWhereInput[]
    NOT?: BrandWhereInput | BrandWhereInput[]
    logo?: StringNullableFilter<"Brand"> | string | null
    createdAt?: DateTimeFilter<"Brand"> | Date | string
    updatedAt?: DateTimeFilter<"Brand"> | Date | string
    products?: ProductListRelationFilter
  }, "id" | "name">

  export type BrandOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BrandCountOrderByAggregateInput
    _max?: BrandMaxOrderByAggregateInput
    _min?: BrandMinOrderByAggregateInput
  }

  export type BrandScalarWhereWithAggregatesInput = {
    AND?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    OR?: BrandScalarWhereWithAggregatesInput[]
    NOT?: BrandScalarWhereWithAggregatesInput | BrandScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Brand"> | string
    name?: StringWithAggregatesFilter<"Brand"> | string
    logo?: StringNullableWithAggregatesFilter<"Brand"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Brand"> | Date | string
  }

  export type WarehouseWhereInput = {
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    id?: StringFilter<"Warehouse"> | string
    name?: StringFilter<"Warehouse"> | string
    code?: StringFilter<"Warehouse"> | string
    location?: StringNullableListFilter<"Warehouse">
    address?: StringFilter<"Warehouse"> | string
    manager?: StringFilter<"Warehouse"> | string
    contact?: StringFilter<"Warehouse"> | string
    status?: StringFilter<"Warehouse"> | string
    createdAt?: DateTimeFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeFilter<"Warehouse"> | Date | string
    variants?: ProductVariantListRelationFilter
  }

  export type WarehouseOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    location?: SortOrder
    address?: SortOrder
    manager?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    variants?: ProductVariantOrderByRelationAggregateInput
  }

  export type WarehouseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    name?: StringFilter<"Warehouse"> | string
    location?: StringNullableListFilter<"Warehouse">
    address?: StringFilter<"Warehouse"> | string
    manager?: StringFilter<"Warehouse"> | string
    contact?: StringFilter<"Warehouse"> | string
    status?: StringFilter<"Warehouse"> | string
    createdAt?: DateTimeFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeFilter<"Warehouse"> | Date | string
    variants?: ProductVariantListRelationFilter
  }, "id" | "code">

  export type WarehouseOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    location?: SortOrder
    address?: SortOrder
    manager?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WarehouseCountOrderByAggregateInput
    _max?: WarehouseMaxOrderByAggregateInput
    _min?: WarehouseMinOrderByAggregateInput
  }

  export type WarehouseScalarWhereWithAggregatesInput = {
    AND?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    OR?: WarehouseScalarWhereWithAggregatesInput[]
    NOT?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Warehouse"> | string
    name?: StringWithAggregatesFilter<"Warehouse"> | string
    code?: StringWithAggregatesFilter<"Warehouse"> | string
    location?: StringNullableListFilter<"Warehouse">
    address?: StringWithAggregatesFilter<"Warehouse"> | string
    manager?: StringWithAggregatesFilter<"Warehouse"> | string
    contact?: StringWithAggregatesFilter<"Warehouse"> | string
    status?: StringWithAggregatesFilter<"Warehouse"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Warehouse"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Warehouse"> | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
  }

  export type ProductUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RelatedProductCreateInput = {
    id?: string
    fromProduct: ProductCreateNestedOneWithoutRelatedFromInput
    toProduct: ProductCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedProductUncheckedCreateInput = {
    id?: string
    fromProductId: string
    toProductId: string
  }

  export type RelatedProductUpdateInput = {
    fromProduct?: ProductUpdateOneRequiredWithoutRelatedFromNestedInput
    toProduct?: ProductUpdateOneRequiredWithoutRelatedToNestedInput
  }

  export type RelatedProductUncheckedUpdateInput = {
    fromProductId?: StringFieldUpdateOperationsInput | string
    toProductId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedProductCreateManyInput = {
    id?: string
    fromProductId: string
    toProductId: string
  }

  export type RelatedProductUpdateManyMutationInput = {

  }

  export type RelatedProductUncheckedUpdateManyInput = {
    fromProductId?: StringFieldUpdateOperationsInput | string
    toProductId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductImageCreateInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutImagesInput
  }

  export type ProductImageUncheckedCreateInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    productId: string
    createdAt?: Date | string
  }

  export type ProductImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ProductImageUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductImageCreateManyInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    productId: string
    createdAt?: Date | string
  }

  export type ProductImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductImageUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutWishlistsInput
  }

  export type WishlistUncheckedCreateInput = {
    id?: string
    userId: string
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutWishlistsNestedInput
  }

  export type WishlistUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistCreateManyInput = {
    id?: string
    userId: string
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateInput = {
    id?: string
    quantity?: number
    reserved?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    variant: ProductVariantCreateNestedOneWithoutStockInput
  }

  export type StockUncheckedCreateInput = {
    id?: string
    quantity?: number
    reserved?: number
    variantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variant?: ProductVariantUpdateOneRequiredWithoutStockNestedInput
  }

  export type StockUncheckedUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockCreateManyInput = {
    id?: string
    quantity?: number
    reserved?: number
    variantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateManyInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ReservationItemCreateNestedManyWithoutReservationInput
  }

  export type ReservationUncheckedCreateInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: ReservationItemUncheckedCreateNestedManyWithoutReservationInput
  }

  export type ReservationUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ReservationItemUpdateManyWithoutReservationNestedInput
  }

  export type ReservationUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: ReservationItemUncheckedUpdateManyWithoutReservationNestedInput
  }

  export type ReservationCreateManyInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemCreateInput = {
    id?: string
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    variant: ProductVariantCreateNestedOneWithoutReservationItemsInput
    reservation: ReservationCreateNestedOneWithoutItemsInput
  }

  export type ReservationItemUncheckedCreateInput = {
    id?: string
    quantity: number
    variantId: string
    reservationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variant?: ProductVariantUpdateOneRequiredWithoutReservationItemsNestedInput
    reservation?: ReservationUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ReservationItemUncheckedUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    reservationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemCreateManyInput = {
    id?: string
    quantity: number
    variantId: string
    reservationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemUncheckedUpdateManyInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    reservationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantCreateInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeCreateNestedManyWithoutVariantInput
    product: ProductCreateNestedOneWithoutVariantsInput
    warehouse: WarehouseCreateNestedOneWithoutVariantsInput
    stock?: StockCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeUncheckedCreateNestedManyWithoutVariantInput
    stock?: StockUncheckedCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUpdateManyWithoutVariantNestedInput
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutVariantsNestedInput
    stock?: StockUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput
    stock?: StockUncheckedUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantCreateManyInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductVariantUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VariantAttributeCreateInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
    variant: ProductVariantCreateNestedOneWithoutAttributesInput
  }

  export type VariantAttributeUncheckedCreateInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
    variantId: string
  }

  export type VariantAttributeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
    variant?: ProductVariantUpdateOneRequiredWithoutAttributesNestedInput
  }

  export type VariantAttributeUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
    variantId?: StringFieldUpdateOperationsInput | string
  }

  export type VariantAttributeCreateManyInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
    variantId: string
  }

  export type VariantAttributeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VariantAttributeUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
    variantId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductAttributeCreateInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutAttributesInput
  }

  export type ProductAttributeUncheckedCreateInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductAttributeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutAttributesNestedInput
  }

  export type ProductAttributeUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeCreateManyInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductAttributeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartCreateInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSizeChartsInput
    columns?: SizeChartColumnCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUncheckedCreateInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    columns?: SizeChartColumnUncheckedCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowUncheckedCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageUncheckedCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSizeChartsNestedInput
    columns?: SizeChartColumnUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: SizeChartColumnUncheckedUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUncheckedUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUncheckedUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartCreateManyInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeChartUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnCreateInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    createdAt?: Date | string
    sizeChart: SizeChartCreateNestedOneWithoutColumnsInput
  }

  export type SizeChartColumnUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartColumnUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeChart?: SizeChartUpdateOneRequiredWithoutColumnsNestedInput
  }

  export type SizeChartColumnUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnCreateManyInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartColumnUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowCreateInput = {
    id?: string
    name: string
    values: InputJsonValue
    createdAt?: Date | string
    sizeChart: SizeChartCreateNestedOneWithoutRowsInput
  }

  export type SizeChartRowUncheckedCreateInput = {
    id?: string
    name: string
    values: InputJsonValue
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartRowUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeChart?: SizeChartUpdateOneRequiredWithoutRowsNestedInput
  }

  export type SizeChartRowUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowCreateManyInput = {
    id?: string
    name: string
    values: InputJsonValue
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartRowUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageCreateInput = {
    id?: string
    url: string
    name: string
    createdAt?: Date | string
    sizeChart: SizeChartCreateNestedOneWithoutImagesInput
  }

  export type SizeChartImageUncheckedCreateInput = {
    id?: string
    url: string
    name: string
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeChart?: SizeChartUpdateOneRequiredWithoutImagesNestedInput
  }

  export type SizeChartImageUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageCreateManyInput = {
    id?: string
    url: string
    name: string
    sizeChartId: string
    createdAt?: Date | string
  }

  export type SizeChartImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    sizeChartId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductDimensionCreateInput = {
    id?: string
    length: number
    width: number
    height: number
    weight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutDimensionsInput
  }

  export type ProductDimensionUncheckedCreateInput = {
    id?: string
    length: number
    width: number
    height: number
    weight: number
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductDimensionUpdateInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutDimensionsNestedInput
  }

  export type ProductDimensionUncheckedUpdateInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductDimensionCreateManyInput = {
    id?: string
    length: number
    width: number
    height: number
    weight: number
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductDimensionUpdateManyMutationInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductDimensionUncheckedUpdateManyInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSEOCreateInput = {
    id?: string
    title: string
    description: string
    keywords: string
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSeoInput
  }

  export type ProductSEOUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    keywords: string
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSEOUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSeoNestedInput
  }

  export type ProductSEOUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSEOCreateManyInput = {
    id?: string
    title: string
    description: string
    keywords: string
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSEOUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSEOUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    productIds?: CategoryCreateproductIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    parentId?: string | null
    productIds?: CategoryCreateproductIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productIds?: CategoryUpdateproductIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productIds?: CategoryUpdateproductIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    parentId?: string | null
    productIds?: CategoryCreateproductIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productIds?: CategoryUpdateproductIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    productIds?: CategoryUpdateproductIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productTags?: ProductTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    productTags?: ProductTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productTags?: ProductTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productTags?: ProductTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagCreateInput = {
    id?: string
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutProductTagsInput
    tag: TagCreateNestedOneWithoutProductTagsInput
  }

  export type ProductTagUncheckedCreateInput = {
    id?: string
    productId: string
    tagId: string
    createdAt?: Date | string
  }

  export type ProductTagUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutProductTagsNestedInput
    tag?: TagUpdateOneRequiredWithoutProductTagsNestedInput
  }

  export type ProductTagUncheckedUpdateInput = {
    productId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagCreateManyInput = {
    id?: string
    productId: string
    tagId: string
    createdAt?: Date | string
  }

  export type ProductTagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagUncheckedUpdateManyInput = {
    productId?: StringFieldUpdateOperationsInput | string
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandCreateInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutBrandInput
  }

  export type BrandUncheckedCreateInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutBrandInput
  }

  export type BrandUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutBrandNestedInput
  }

  export type BrandUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutBrandNestedInput
  }

  export type BrandCreateManyInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseCreateInput = {
    id?: string
    name: string
    code: string
    location?: WarehouseCreatelocationInput | string[]
    address: string
    manager: string
    contact: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    location?: WarehouseCreatelocationInput | string[]
    address: string
    manager: string
    contact: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    variants?: ProductVariantUncheckedCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variants?: ProductVariantUncheckedUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseCreateManyInput = {
    id?: string
    name: string
    code: string
    location?: WarehouseCreatelocationInput | string[]
    address: string
    manager: string
    contact: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProductImageListRelationFilter = {
    every?: ProductImageWhereInput
    some?: ProductImageWhereInput
    none?: ProductImageWhereInput
  }

  export type ProductVariantListRelationFilter = {
    every?: ProductVariantWhereInput
    some?: ProductVariantWhereInput
    none?: ProductVariantWhereInput
  }

  export type ProductAttributeListRelationFilter = {
    every?: ProductAttributeWhereInput
    some?: ProductAttributeWhereInput
    none?: ProductAttributeWhereInput
  }

  export type SizeChartListRelationFilter = {
    every?: SizeChartWhereInput
    some?: SizeChartWhereInput
    none?: SizeChartWhereInput
  }

  export type BrandNullableScalarRelationFilter = {
    is?: BrandWhereInput | null
    isNot?: BrandWhereInput | null
  }

  export type ProductDimensionNullableScalarRelationFilter = {
    is?: ProductDimensionWhereInput | null
    isNot?: ProductDimensionWhereInput | null
  }

  export type ProductSEONullableScalarRelationFilter = {
    is?: ProductSEOWhereInput | null
    isNot?: ProductSEOWhereInput | null
  }

  export type ProductTagListRelationFilter = {
    every?: ProductTagWhereInput
    some?: ProductTagWhereInput
    none?: ProductTagWhereInput
  }

  export type RelatedProductListRelationFilter = {
    every?: RelatedProductWhereInput
    some?: RelatedProductWhereInput
    none?: RelatedProductWhereInput
  }

  export type WishlistListRelationFilter = {
    every?: WishlistWhereInput
    some?: WishlistWhereInput
    none?: WishlistWhereInput
  }

  export type ProductImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SizeChartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RelatedProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WishlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    costPrice?: SortOrder
    basePrice?: SortOrder
    sku?: SortOrder
    barcode?: SortOrder
    featured?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxable?: SortOrder
    shippable?: SortOrder
    categories?: SortOrder
    categoryIds?: SortOrder
    brandId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    costPrice?: SortOrder
    basePrice?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    costPrice?: SortOrder
    basePrice?: SortOrder
    sku?: SortOrder
    barcode?: SortOrder
    featured?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxable?: SortOrder
    shippable?: SortOrder
    brandId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    description?: SortOrder
    costPrice?: SortOrder
    basePrice?: SortOrder
    sku?: SortOrder
    barcode?: SortOrder
    featured?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    taxable?: SortOrder
    shippable?: SortOrder
    brandId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    costPrice?: SortOrder
    basePrice?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type RelatedProductFromProductIdToProductIdCompoundUniqueInput = {
    fromProductId: string
    toProductId: string
  }

  export type RelatedProductCountOrderByAggregateInput = {
    id?: SortOrder
    fromProductId?: SortOrder
    toProductId?: SortOrder
  }

  export type RelatedProductMaxOrderByAggregateInput = {
    id?: SortOrder
    fromProductId?: SortOrder
    toProductId?: SortOrder
  }

  export type RelatedProductMinOrderByAggregateInput = {
    id?: SortOrder
    fromProductId?: SortOrder
    toProductId?: SortOrder
  }

  export type ProductImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    blurhash?: SortOrder
    isMain?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    blurhash?: SortOrder
    isMain?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    blurhash?: SortOrder
    isMain?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
  }

  export type WishlistUserIdProductIdCompoundUniqueInput = {
    userId: string
    productId: string
  }

  export type WishlistCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WishlistMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProductVariantScalarRelationFilter = {
    is?: ProductVariantWhereInput
    isNot?: ProductVariantWhereInput
  }

  export type StockCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    variantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    quantity?: SortOrder
    reserved?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    variantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    reserved?: SortOrder
    variantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    quantity?: SortOrder
    reserved?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ReservationItemListRelationFilter = {
    every?: ReservationItemWhereInput
    some?: ReservationItemWhereInput
    none?: ReservationItemWhereInput
  }

  export type ReservationItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReservationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationScalarRelationFilter = {
    is?: ReservationWhereInput
    isNot?: ReservationWhereInput
  }

  export type ReservationItemCountOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    variantId?: SortOrder
    reservationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type ReservationItemMaxOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    variantId?: SortOrder
    reservationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationItemMinOrderByAggregateInput = {
    id?: SortOrder
    quantity?: SortOrder
    variantId?: SortOrder
    reservationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReservationItemSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type VariantAttributeListRelationFilter = {
    every?: VariantAttributeWhereInput
    some?: VariantAttributeWhereInput
    none?: VariantAttributeWhereInput
  }

  export type WarehouseScalarRelationFilter = {
    is?: WarehouseWhereInput
    isNot?: WarehouseWhereInput
  }

  export type StockNullableScalarRelationFilter = {
    is?: StockWhereInput | null
    isNot?: StockWhereInput | null
  }

  export type VariantAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    price?: SortOrder
    lowStockThreshold?: SortOrder
    colorValue?: SortOrder
    colorName?: SortOrder
    attributesIds?: SortOrder
    imageIds?: SortOrder
    productId?: SortOrder
    warehouseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductVariantAvgOrderByAggregateInput = {
    price?: SortOrder
    lowStockThreshold?: SortOrder
  }

  export type ProductVariantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    price?: SortOrder
    lowStockThreshold?: SortOrder
    colorValue?: SortOrder
    colorName?: SortOrder
    productId?: SortOrder
    warehouseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductVariantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sku?: SortOrder
    price?: SortOrder
    lowStockThreshold?: SortOrder
    colorValue?: SortOrder
    colorName?: SortOrder
    productId?: SortOrder
    warehouseId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductVariantSumOrderByAggregateInput = {
    price?: SortOrder
    lowStockThreshold?: SortOrder
  }

  export type VariantAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    extraValue?: SortOrder
    variantId?: SortOrder
  }

  export type VariantAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    extraValue?: SortOrder
    variantId?: SortOrder
  }

  export type VariantAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    extraValue?: SortOrder
    variantId?: SortOrder
  }

  export type ProductAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    required?: SortOrder
    visible?: SortOrder
    variantable?: SortOrder
    filterable?: SortOrder
    searchable?: SortOrder
    displayOrder?: SortOrder
    values?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAttributeAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type ProductAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    required?: SortOrder
    visible?: SortOrder
    variantable?: SortOrder
    filterable?: SortOrder
    searchable?: SortOrder
    displayOrder?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    required?: SortOrder
    visible?: SortOrder
    variantable?: SortOrder
    filterable?: SortOrder
    searchable?: SortOrder
    displayOrder?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAttributeSumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type SizeChartColumnListRelationFilter = {
    every?: SizeChartColumnWhereInput
    some?: SizeChartColumnWhereInput
    none?: SizeChartColumnWhereInput
  }

  export type SizeChartRowListRelationFilter = {
    every?: SizeChartRowWhereInput
    some?: SizeChartRowWhereInput
    none?: SizeChartRowWhereInput
  }

  export type SizeChartImageListRelationFilter = {
    every?: SizeChartImageWhereInput
    some?: SizeChartImageWhereInput
    none?: SizeChartImageWhereInput
  }

  export type SizeChartColumnOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SizeChartRowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SizeChartImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SizeChartCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeChartMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeChartMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SizeChartScalarRelationFilter = {
    is?: SizeChartWhereInput
    isNot?: SizeChartWhereInput
  }

  export type SizeChartColumnCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartColumnMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartColumnMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    unit?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type SizeChartRowCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    values?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartRowMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartRowMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type SizeChartImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type SizeChartImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    name?: SortOrder
    sizeChartId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductDimensionCountOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductDimensionAvgOrderByAggregateInput = {
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
  }

  export type ProductDimensionMaxOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductDimensionMinOrderByAggregateInput = {
    id?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductDimensionSumOrderByAggregateInput = {
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    weight?: SortOrder
  }

  export type ProductSEOCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSEOMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSEOMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    keywords?: SortOrder
    productId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    productIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TagScalarRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type ProductTagProductIdTagIdCompoundUniqueInput = {
    productId: string
    tagId: string
  }

  export type ProductTagCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductTagMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductTagMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    tagId?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BrandCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BrandMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WarehouseCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    location?: SortOrder
    address?: SortOrder
    manager?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WarehouseMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    address?: SortOrder
    manager?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WarehouseMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    address?: SortOrder
    manager?: SortOrder
    contact?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductCreatecategoriesInput = {
    set: string[]
  }

  export type ProductCreatecategoryIdsInput = {
    set: string[]
  }

  export type ProductImageCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type ProductVariantCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ProductAttributeCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput> | ProductAttributeCreateWithoutProductInput[] | ProductAttributeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductInput | ProductAttributeCreateOrConnectWithoutProductInput[]
    createMany?: ProductAttributeCreateManyProductInputEnvelope
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
  }

  export type SizeChartCreateNestedManyWithoutProductInput = {
    create?: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput> | SizeChartCreateWithoutProductInput[] | SizeChartUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeChartCreateOrConnectWithoutProductInput | SizeChartCreateOrConnectWithoutProductInput[]
    createMany?: SizeChartCreateManyProductInputEnvelope
    connect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
  }

  export type BrandCreateNestedOneWithoutProductsInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    connect?: BrandWhereUniqueInput
  }

  export type ProductDimensionCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDimensionCreateOrConnectWithoutProductInput
    connect?: ProductDimensionWhereUniqueInput
  }

  export type ProductSEOCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductSEOCreateOrConnectWithoutProductInput
    connect?: ProductSEOWhereUniqueInput
  }

  export type ProductTagCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput> | ProductTagCreateWithoutProductInput[] | ProductTagUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutProductInput | ProductTagCreateOrConnectWithoutProductInput[]
    createMany?: ProductTagCreateManyProductInputEnvelope
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
  }

  export type RelatedProductCreateNestedManyWithoutFromProductInput = {
    create?: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput> | RelatedProductCreateWithoutFromProductInput[] | RelatedProductUncheckedCreateWithoutFromProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutFromProductInput | RelatedProductCreateOrConnectWithoutFromProductInput[]
    createMany?: RelatedProductCreateManyFromProductInputEnvelope
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
  }

  export type RelatedProductCreateNestedManyWithoutToProductInput = {
    create?: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput> | RelatedProductCreateWithoutToProductInput[] | RelatedProductUncheckedCreateWithoutToProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutToProductInput | RelatedProductCreateOrConnectWithoutToProductInput[]
    createMany?: RelatedProductCreateManyToProductInputEnvelope
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
  }

  export type WishlistCreateNestedManyWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput> | WishlistCreateWithoutProductInput[] | WishlistUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput | WishlistCreateOrConnectWithoutProductInput[]
    createMany?: WishlistCreateManyProductInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type ProductImageUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ProductAttributeUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput> | ProductAttributeCreateWithoutProductInput[] | ProductAttributeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductInput | ProductAttributeCreateOrConnectWithoutProductInput[]
    createMany?: ProductAttributeCreateManyProductInputEnvelope
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
  }

  export type SizeChartUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput> | SizeChartCreateWithoutProductInput[] | SizeChartUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeChartCreateOrConnectWithoutProductInput | SizeChartCreateOrConnectWithoutProductInput[]
    createMany?: SizeChartCreateManyProductInputEnvelope
    connect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
  }

  export type ProductDimensionUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDimensionCreateOrConnectWithoutProductInput
    connect?: ProductDimensionWhereUniqueInput
  }

  export type ProductSEOUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductSEOCreateOrConnectWithoutProductInput
    connect?: ProductSEOWhereUniqueInput
  }

  export type ProductTagUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput> | ProductTagCreateWithoutProductInput[] | ProductTagUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutProductInput | ProductTagCreateOrConnectWithoutProductInput[]
    createMany?: ProductTagCreateManyProductInputEnvelope
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
  }

  export type RelatedProductUncheckedCreateNestedManyWithoutFromProductInput = {
    create?: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput> | RelatedProductCreateWithoutFromProductInput[] | RelatedProductUncheckedCreateWithoutFromProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutFromProductInput | RelatedProductCreateOrConnectWithoutFromProductInput[]
    createMany?: RelatedProductCreateManyFromProductInputEnvelope
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
  }

  export type RelatedProductUncheckedCreateNestedManyWithoutToProductInput = {
    create?: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput> | RelatedProductCreateWithoutToProductInput[] | RelatedProductUncheckedCreateWithoutToProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutToProductInput | RelatedProductCreateOrConnectWithoutToProductInput[]
    createMany?: RelatedProductCreateManyToProductInputEnvelope
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
  }

  export type WishlistUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput> | WishlistCreateWithoutProductInput[] | WishlistUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput | WishlistCreateOrConnectWithoutProductInput[]
    createMany?: WishlistCreateManyProductInputEnvelope
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductUpdatecategoriesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductUpdatecategoryIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductImageUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type ProductVariantUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ProductAttributeUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput> | ProductAttributeCreateWithoutProductInput[] | ProductAttributeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductInput | ProductAttributeCreateOrConnectWithoutProductInput[]
    upsert?: ProductAttributeUpsertWithWhereUniqueWithoutProductInput | ProductAttributeUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductAttributeCreateManyProductInputEnvelope
    set?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    disconnect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    delete?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    update?: ProductAttributeUpdateWithWhereUniqueWithoutProductInput | ProductAttributeUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductAttributeUpdateManyWithWhereWithoutProductInput | ProductAttributeUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
  }

  export type SizeChartUpdateManyWithoutProductNestedInput = {
    create?: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput> | SizeChartCreateWithoutProductInput[] | SizeChartUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeChartCreateOrConnectWithoutProductInput | SizeChartCreateOrConnectWithoutProductInput[]
    upsert?: SizeChartUpsertWithWhereUniqueWithoutProductInput | SizeChartUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SizeChartCreateManyProductInputEnvelope
    set?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    disconnect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    delete?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    connect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    update?: SizeChartUpdateWithWhereUniqueWithoutProductInput | SizeChartUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SizeChartUpdateManyWithWhereWithoutProductInput | SizeChartUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SizeChartScalarWhereInput | SizeChartScalarWhereInput[]
  }

  export type BrandUpdateOneWithoutProductsNestedInput = {
    create?: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    connectOrCreate?: BrandCreateOrConnectWithoutProductsInput
    upsert?: BrandUpsertWithoutProductsInput
    disconnect?: boolean
    delete?: BrandWhereInput | boolean
    connect?: BrandWhereUniqueInput
    update?: XOR<XOR<BrandUpdateToOneWithWhereWithoutProductsInput, BrandUpdateWithoutProductsInput>, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type ProductDimensionUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDimensionCreateOrConnectWithoutProductInput
    upsert?: ProductDimensionUpsertWithoutProductInput
    disconnect?: ProductDimensionWhereInput | boolean
    delete?: ProductDimensionWhereInput | boolean
    connect?: ProductDimensionWhereUniqueInput
    update?: XOR<XOR<ProductDimensionUpdateToOneWithWhereWithoutProductInput, ProductDimensionUpdateWithoutProductInput>, ProductDimensionUncheckedUpdateWithoutProductInput>
  }

  export type ProductSEOUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductSEOCreateOrConnectWithoutProductInput
    upsert?: ProductSEOUpsertWithoutProductInput
    disconnect?: ProductSEOWhereInput | boolean
    delete?: ProductSEOWhereInput | boolean
    connect?: ProductSEOWhereUniqueInput
    update?: XOR<XOR<ProductSEOUpdateToOneWithWhereWithoutProductInput, ProductSEOUpdateWithoutProductInput>, ProductSEOUncheckedUpdateWithoutProductInput>
  }

  export type ProductTagUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput> | ProductTagCreateWithoutProductInput[] | ProductTagUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutProductInput | ProductTagCreateOrConnectWithoutProductInput[]
    upsert?: ProductTagUpsertWithWhereUniqueWithoutProductInput | ProductTagUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductTagCreateManyProductInputEnvelope
    set?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    disconnect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    delete?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    update?: ProductTagUpdateWithWhereUniqueWithoutProductInput | ProductTagUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductTagUpdateManyWithWhereWithoutProductInput | ProductTagUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
  }

  export type RelatedProductUpdateManyWithoutFromProductNestedInput = {
    create?: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput> | RelatedProductCreateWithoutFromProductInput[] | RelatedProductUncheckedCreateWithoutFromProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutFromProductInput | RelatedProductCreateOrConnectWithoutFromProductInput[]
    upsert?: RelatedProductUpsertWithWhereUniqueWithoutFromProductInput | RelatedProductUpsertWithWhereUniqueWithoutFromProductInput[]
    createMany?: RelatedProductCreateManyFromProductInputEnvelope
    set?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    disconnect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    delete?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    update?: RelatedProductUpdateWithWhereUniqueWithoutFromProductInput | RelatedProductUpdateWithWhereUniqueWithoutFromProductInput[]
    updateMany?: RelatedProductUpdateManyWithWhereWithoutFromProductInput | RelatedProductUpdateManyWithWhereWithoutFromProductInput[]
    deleteMany?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
  }

  export type RelatedProductUpdateManyWithoutToProductNestedInput = {
    create?: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput> | RelatedProductCreateWithoutToProductInput[] | RelatedProductUncheckedCreateWithoutToProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutToProductInput | RelatedProductCreateOrConnectWithoutToProductInput[]
    upsert?: RelatedProductUpsertWithWhereUniqueWithoutToProductInput | RelatedProductUpsertWithWhereUniqueWithoutToProductInput[]
    createMany?: RelatedProductCreateManyToProductInputEnvelope
    set?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    disconnect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    delete?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    update?: RelatedProductUpdateWithWhereUniqueWithoutToProductInput | RelatedProductUpdateWithWhereUniqueWithoutToProductInput[]
    updateMany?: RelatedProductUpdateManyWithWhereWithoutToProductInput | RelatedProductUpdateManyWithWhereWithoutToProductInput[]
    deleteMany?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
  }

  export type WishlistUpdateManyWithoutProductNestedInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput> | WishlistCreateWithoutProductInput[] | WishlistUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput | WishlistCreateOrConnectWithoutProductInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutProductInput | WishlistUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: WishlistCreateManyProductInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutProductInput | WishlistUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutProductInput | WishlistUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type ProductImageUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ProductAttributeUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput> | ProductAttributeCreateWithoutProductInput[] | ProductAttributeUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductInput | ProductAttributeCreateOrConnectWithoutProductInput[]
    upsert?: ProductAttributeUpsertWithWhereUniqueWithoutProductInput | ProductAttributeUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductAttributeCreateManyProductInputEnvelope
    set?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    disconnect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    delete?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    update?: ProductAttributeUpdateWithWhereUniqueWithoutProductInput | ProductAttributeUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductAttributeUpdateManyWithWhereWithoutProductInput | ProductAttributeUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
  }

  export type SizeChartUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput> | SizeChartCreateWithoutProductInput[] | SizeChartUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SizeChartCreateOrConnectWithoutProductInput | SizeChartCreateOrConnectWithoutProductInput[]
    upsert?: SizeChartUpsertWithWhereUniqueWithoutProductInput | SizeChartUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SizeChartCreateManyProductInputEnvelope
    set?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    disconnect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    delete?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    connect?: SizeChartWhereUniqueInput | SizeChartWhereUniqueInput[]
    update?: SizeChartUpdateWithWhereUniqueWithoutProductInput | SizeChartUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SizeChartUpdateManyWithWhereWithoutProductInput | SizeChartUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SizeChartScalarWhereInput | SizeChartScalarWhereInput[]
  }

  export type ProductDimensionUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDimensionCreateOrConnectWithoutProductInput
    upsert?: ProductDimensionUpsertWithoutProductInput
    disconnect?: ProductDimensionWhereInput | boolean
    delete?: ProductDimensionWhereInput | boolean
    connect?: ProductDimensionWhereUniqueInput
    update?: XOR<XOR<ProductDimensionUpdateToOneWithWhereWithoutProductInput, ProductDimensionUpdateWithoutProductInput>, ProductDimensionUncheckedUpdateWithoutProductInput>
  }

  export type ProductSEOUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductSEOCreateOrConnectWithoutProductInput
    upsert?: ProductSEOUpsertWithoutProductInput
    disconnect?: ProductSEOWhereInput | boolean
    delete?: ProductSEOWhereInput | boolean
    connect?: ProductSEOWhereUniqueInput
    update?: XOR<XOR<ProductSEOUpdateToOneWithWhereWithoutProductInput, ProductSEOUpdateWithoutProductInput>, ProductSEOUncheckedUpdateWithoutProductInput>
  }

  export type ProductTagUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput> | ProductTagCreateWithoutProductInput[] | ProductTagUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutProductInput | ProductTagCreateOrConnectWithoutProductInput[]
    upsert?: ProductTagUpsertWithWhereUniqueWithoutProductInput | ProductTagUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductTagCreateManyProductInputEnvelope
    set?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    disconnect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    delete?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    update?: ProductTagUpdateWithWhereUniqueWithoutProductInput | ProductTagUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductTagUpdateManyWithWhereWithoutProductInput | ProductTagUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
  }

  export type RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput = {
    create?: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput> | RelatedProductCreateWithoutFromProductInput[] | RelatedProductUncheckedCreateWithoutFromProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutFromProductInput | RelatedProductCreateOrConnectWithoutFromProductInput[]
    upsert?: RelatedProductUpsertWithWhereUniqueWithoutFromProductInput | RelatedProductUpsertWithWhereUniqueWithoutFromProductInput[]
    createMany?: RelatedProductCreateManyFromProductInputEnvelope
    set?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    disconnect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    delete?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    update?: RelatedProductUpdateWithWhereUniqueWithoutFromProductInput | RelatedProductUpdateWithWhereUniqueWithoutFromProductInput[]
    updateMany?: RelatedProductUpdateManyWithWhereWithoutFromProductInput | RelatedProductUpdateManyWithWhereWithoutFromProductInput[]
    deleteMany?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
  }

  export type RelatedProductUncheckedUpdateManyWithoutToProductNestedInput = {
    create?: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput> | RelatedProductCreateWithoutToProductInput[] | RelatedProductUncheckedCreateWithoutToProductInput[]
    connectOrCreate?: RelatedProductCreateOrConnectWithoutToProductInput | RelatedProductCreateOrConnectWithoutToProductInput[]
    upsert?: RelatedProductUpsertWithWhereUniqueWithoutToProductInput | RelatedProductUpsertWithWhereUniqueWithoutToProductInput[]
    createMany?: RelatedProductCreateManyToProductInputEnvelope
    set?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    disconnect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    delete?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    connect?: RelatedProductWhereUniqueInput | RelatedProductWhereUniqueInput[]
    update?: RelatedProductUpdateWithWhereUniqueWithoutToProductInput | RelatedProductUpdateWithWhereUniqueWithoutToProductInput[]
    updateMany?: RelatedProductUpdateManyWithWhereWithoutToProductInput | RelatedProductUpdateManyWithWhereWithoutToProductInput[]
    deleteMany?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
  }

  export type WishlistUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput> | WishlistCreateWithoutProductInput[] | WishlistUncheckedCreateWithoutProductInput[]
    connectOrCreate?: WishlistCreateOrConnectWithoutProductInput | WishlistCreateOrConnectWithoutProductInput[]
    upsert?: WishlistUpsertWithWhereUniqueWithoutProductInput | WishlistUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: WishlistCreateManyProductInputEnvelope
    set?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    disconnect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    delete?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    connect?: WishlistWhereUniqueInput | WishlistWhereUniqueInput[]
    update?: WishlistUpdateWithWhereUniqueWithoutProductInput | WishlistUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: WishlistUpdateManyWithWhereWithoutProductInput | WishlistUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutRelatedFromInput = {
    create?: XOR<ProductCreateWithoutRelatedFromInput, ProductUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRelatedFromInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutRelatedToInput = {
    create?: XOR<ProductCreateWithoutRelatedToInput, ProductUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRelatedToInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutRelatedFromNestedInput = {
    create?: XOR<ProductCreateWithoutRelatedFromInput, ProductUncheckedCreateWithoutRelatedFromInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRelatedFromInput
    upsert?: ProductUpsertWithoutRelatedFromInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRelatedFromInput, ProductUpdateWithoutRelatedFromInput>, ProductUncheckedUpdateWithoutRelatedFromInput>
  }

  export type ProductUpdateOneRequiredWithoutRelatedToNestedInput = {
    create?: XOR<ProductCreateWithoutRelatedToInput, ProductUncheckedCreateWithoutRelatedToInput>
    connectOrCreate?: ProductCreateOrConnectWithoutRelatedToInput
    upsert?: ProductUpsertWithoutRelatedToInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutRelatedToInput, ProductUpdateWithoutRelatedToInput>, ProductUncheckedUpdateWithoutRelatedToInput>
  }

  export type ProductCreateNestedOneWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    upsert?: ProductUpsertWithoutImagesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutImagesInput, ProductUpdateWithoutImagesInput>, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductCreateNestedOneWithoutWishlistsInput = {
    create?: XOR<ProductCreateWithoutWishlistsInput, ProductUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWishlistsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutWishlistsNestedInput = {
    create?: XOR<ProductCreateWithoutWishlistsInput, ProductUncheckedCreateWithoutWishlistsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutWishlistsInput
    upsert?: ProductUpsertWithoutWishlistsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutWishlistsInput, ProductUpdateWithoutWishlistsInput>, ProductUncheckedUpdateWithoutWishlistsInput>
  }

  export type ProductVariantCreateNestedOneWithoutStockInput = {
    create?: XOR<ProductVariantCreateWithoutStockInput, ProductVariantUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutStockInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductVariantUpdateOneRequiredWithoutStockNestedInput = {
    create?: XOR<ProductVariantCreateWithoutStockInput, ProductVariantUncheckedCreateWithoutStockInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutStockInput
    upsert?: ProductVariantUpsertWithoutStockInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutStockInput, ProductVariantUpdateWithoutStockInput>, ProductVariantUncheckedUpdateWithoutStockInput>
  }

  export type ReservationItemCreateNestedManyWithoutReservationInput = {
    create?: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput> | ReservationItemCreateWithoutReservationInput[] | ReservationItemUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutReservationInput | ReservationItemCreateOrConnectWithoutReservationInput[]
    createMany?: ReservationItemCreateManyReservationInputEnvelope
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
  }

  export type ReservationItemUncheckedCreateNestedManyWithoutReservationInput = {
    create?: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput> | ReservationItemCreateWithoutReservationInput[] | ReservationItemUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutReservationInput | ReservationItemCreateOrConnectWithoutReservationInput[]
    createMany?: ReservationItemCreateManyReservationInputEnvelope
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
  }

  export type ReservationItemUpdateManyWithoutReservationNestedInput = {
    create?: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput> | ReservationItemCreateWithoutReservationInput[] | ReservationItemUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutReservationInput | ReservationItemCreateOrConnectWithoutReservationInput[]
    upsert?: ReservationItemUpsertWithWhereUniqueWithoutReservationInput | ReservationItemUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: ReservationItemCreateManyReservationInputEnvelope
    set?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    disconnect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    delete?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    update?: ReservationItemUpdateWithWhereUniqueWithoutReservationInput | ReservationItemUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: ReservationItemUpdateManyWithWhereWithoutReservationInput | ReservationItemUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
  }

  export type ReservationItemUncheckedUpdateManyWithoutReservationNestedInput = {
    create?: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput> | ReservationItemCreateWithoutReservationInput[] | ReservationItemUncheckedCreateWithoutReservationInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutReservationInput | ReservationItemCreateOrConnectWithoutReservationInput[]
    upsert?: ReservationItemUpsertWithWhereUniqueWithoutReservationInput | ReservationItemUpsertWithWhereUniqueWithoutReservationInput[]
    createMany?: ReservationItemCreateManyReservationInputEnvelope
    set?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    disconnect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    delete?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    update?: ReservationItemUpdateWithWhereUniqueWithoutReservationInput | ReservationItemUpdateWithWhereUniqueWithoutReservationInput[]
    updateMany?: ReservationItemUpdateManyWithWhereWithoutReservationInput | ReservationItemUpdateManyWithWhereWithoutReservationInput[]
    deleteMany?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
  }

  export type ProductVariantCreateNestedOneWithoutReservationItemsInput = {
    create?: XOR<ProductVariantCreateWithoutReservationItemsInput, ProductVariantUncheckedCreateWithoutReservationItemsInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutReservationItemsInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type ReservationCreateNestedOneWithoutItemsInput = {
    create?: XOR<ReservationCreateWithoutItemsInput, ReservationUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutItemsInput
    connect?: ReservationWhereUniqueInput
  }

  export type ProductVariantUpdateOneRequiredWithoutReservationItemsNestedInput = {
    create?: XOR<ProductVariantCreateWithoutReservationItemsInput, ProductVariantUncheckedCreateWithoutReservationItemsInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutReservationItemsInput
    upsert?: ProductVariantUpsertWithoutReservationItemsInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutReservationItemsInput, ProductVariantUpdateWithoutReservationItemsInput>, ProductVariantUncheckedUpdateWithoutReservationItemsInput>
  }

  export type ReservationUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<ReservationCreateWithoutItemsInput, ReservationUncheckedCreateWithoutItemsInput>
    connectOrCreate?: ReservationCreateOrConnectWithoutItemsInput
    upsert?: ReservationUpsertWithoutItemsInput
    connect?: ReservationWhereUniqueInput
    update?: XOR<XOR<ReservationUpdateToOneWithWhereWithoutItemsInput, ReservationUpdateWithoutItemsInput>, ReservationUncheckedUpdateWithoutItemsInput>
  }

  export type ProductVariantCreateattributesIdsInput = {
    set: string[]
  }

  export type ProductVariantCreateimageIdsInput = {
    set: string[]
  }

  export type VariantAttributeCreateNestedManyWithoutVariantInput = {
    create?: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput> | VariantAttributeCreateWithoutVariantInput[] | VariantAttributeUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: VariantAttributeCreateOrConnectWithoutVariantInput | VariantAttributeCreateOrConnectWithoutVariantInput[]
    createMany?: VariantAttributeCreateManyVariantInputEnvelope
    connect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
  }

  export type ProductCreateNestedOneWithoutVariantsInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    connect?: ProductWhereUniqueInput
  }

  export type WarehouseCreateNestedOneWithoutVariantsInput = {
    create?: XOR<WarehouseCreateWithoutVariantsInput, WarehouseUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutVariantsInput
    connect?: WarehouseWhereUniqueInput
  }

  export type StockCreateNestedOneWithoutVariantInput = {
    create?: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
    connectOrCreate?: StockCreateOrConnectWithoutVariantInput
    connect?: StockWhereUniqueInput
  }

  export type ReservationItemCreateNestedManyWithoutVariantInput = {
    create?: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput> | ReservationItemCreateWithoutVariantInput[] | ReservationItemUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutVariantInput | ReservationItemCreateOrConnectWithoutVariantInput[]
    createMany?: ReservationItemCreateManyVariantInputEnvelope
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
  }

  export type VariantAttributeUncheckedCreateNestedManyWithoutVariantInput = {
    create?: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput> | VariantAttributeCreateWithoutVariantInput[] | VariantAttributeUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: VariantAttributeCreateOrConnectWithoutVariantInput | VariantAttributeCreateOrConnectWithoutVariantInput[]
    createMany?: VariantAttributeCreateManyVariantInputEnvelope
    connect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
  }

  export type StockUncheckedCreateNestedOneWithoutVariantInput = {
    create?: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
    connectOrCreate?: StockCreateOrConnectWithoutVariantInput
    connect?: StockWhereUniqueInput
  }

  export type ReservationItemUncheckedCreateNestedManyWithoutVariantInput = {
    create?: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput> | ReservationItemCreateWithoutVariantInput[] | ReservationItemUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutVariantInput | ReservationItemCreateOrConnectWithoutVariantInput[]
    createMany?: ReservationItemCreateManyVariantInputEnvelope
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
  }

  export type ProductVariantUpdateattributesIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductVariantUpdateimageIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VariantAttributeUpdateManyWithoutVariantNestedInput = {
    create?: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput> | VariantAttributeCreateWithoutVariantInput[] | VariantAttributeUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: VariantAttributeCreateOrConnectWithoutVariantInput | VariantAttributeCreateOrConnectWithoutVariantInput[]
    upsert?: VariantAttributeUpsertWithWhereUniqueWithoutVariantInput | VariantAttributeUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: VariantAttributeCreateManyVariantInputEnvelope
    set?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    disconnect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    delete?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    connect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    update?: VariantAttributeUpdateWithWhereUniqueWithoutVariantInput | VariantAttributeUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: VariantAttributeUpdateManyWithWhereWithoutVariantInput | VariantAttributeUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: VariantAttributeScalarWhereInput | VariantAttributeScalarWhereInput[]
  }

  export type ProductUpdateOneRequiredWithoutVariantsNestedInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    upsert?: ProductUpsertWithoutVariantsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutVariantsInput, ProductUpdateWithoutVariantsInput>, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type WarehouseUpdateOneRequiredWithoutVariantsNestedInput = {
    create?: XOR<WarehouseCreateWithoutVariantsInput, WarehouseUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutVariantsInput
    upsert?: WarehouseUpsertWithoutVariantsInput
    connect?: WarehouseWhereUniqueInput
    update?: XOR<XOR<WarehouseUpdateToOneWithWhereWithoutVariantsInput, WarehouseUpdateWithoutVariantsInput>, WarehouseUncheckedUpdateWithoutVariantsInput>
  }

  export type StockUpdateOneWithoutVariantNestedInput = {
    create?: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
    connectOrCreate?: StockCreateOrConnectWithoutVariantInput
    upsert?: StockUpsertWithoutVariantInput
    disconnect?: StockWhereInput | boolean
    delete?: StockWhereInput | boolean
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutVariantInput, StockUpdateWithoutVariantInput>, StockUncheckedUpdateWithoutVariantInput>
  }

  export type ReservationItemUpdateManyWithoutVariantNestedInput = {
    create?: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput> | ReservationItemCreateWithoutVariantInput[] | ReservationItemUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutVariantInput | ReservationItemCreateOrConnectWithoutVariantInput[]
    upsert?: ReservationItemUpsertWithWhereUniqueWithoutVariantInput | ReservationItemUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: ReservationItemCreateManyVariantInputEnvelope
    set?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    disconnect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    delete?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    update?: ReservationItemUpdateWithWhereUniqueWithoutVariantInput | ReservationItemUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: ReservationItemUpdateManyWithWhereWithoutVariantInput | ReservationItemUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
  }

  export type VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput = {
    create?: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput> | VariantAttributeCreateWithoutVariantInput[] | VariantAttributeUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: VariantAttributeCreateOrConnectWithoutVariantInput | VariantAttributeCreateOrConnectWithoutVariantInput[]
    upsert?: VariantAttributeUpsertWithWhereUniqueWithoutVariantInput | VariantAttributeUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: VariantAttributeCreateManyVariantInputEnvelope
    set?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    disconnect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    delete?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    connect?: VariantAttributeWhereUniqueInput | VariantAttributeWhereUniqueInput[]
    update?: VariantAttributeUpdateWithWhereUniqueWithoutVariantInput | VariantAttributeUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: VariantAttributeUpdateManyWithWhereWithoutVariantInput | VariantAttributeUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: VariantAttributeScalarWhereInput | VariantAttributeScalarWhereInput[]
  }

  export type StockUncheckedUpdateOneWithoutVariantNestedInput = {
    create?: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
    connectOrCreate?: StockCreateOrConnectWithoutVariantInput
    upsert?: StockUpsertWithoutVariantInput
    disconnect?: StockWhereInput | boolean
    delete?: StockWhereInput | boolean
    connect?: StockWhereUniqueInput
    update?: XOR<XOR<StockUpdateToOneWithWhereWithoutVariantInput, StockUpdateWithoutVariantInput>, StockUncheckedUpdateWithoutVariantInput>
  }

  export type ReservationItemUncheckedUpdateManyWithoutVariantNestedInput = {
    create?: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput> | ReservationItemCreateWithoutVariantInput[] | ReservationItemUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ReservationItemCreateOrConnectWithoutVariantInput | ReservationItemCreateOrConnectWithoutVariantInput[]
    upsert?: ReservationItemUpsertWithWhereUniqueWithoutVariantInput | ReservationItemUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: ReservationItemCreateManyVariantInputEnvelope
    set?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    disconnect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    delete?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    connect?: ReservationItemWhereUniqueInput | ReservationItemWhereUniqueInput[]
    update?: ReservationItemUpdateWithWhereUniqueWithoutVariantInput | ReservationItemUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: ReservationItemUpdateManyWithWhereWithoutVariantInput | ReservationItemUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
  }

  export type ProductVariantCreateNestedOneWithoutAttributesInput = {
    create?: XOR<ProductVariantCreateWithoutAttributesInput, ProductVariantUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutAttributesInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type ProductVariantUpdateOneRequiredWithoutAttributesNestedInput = {
    create?: XOR<ProductVariantCreateWithoutAttributesInput, ProductVariantUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutAttributesInput
    upsert?: ProductVariantUpsertWithoutAttributesInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutAttributesInput, ProductVariantUpdateWithoutAttributesInput>, ProductVariantUncheckedUpdateWithoutAttributesInput>
  }

  export type ProductAttributeCreatevaluesInput = {
    set: string[]
  }

  export type ProductCreateNestedOneWithoutAttributesInput = {
    create?: XOR<ProductCreateWithoutAttributesInput, ProductUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutAttributesInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductAttributeUpdatevaluesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductUpdateOneRequiredWithoutAttributesNestedInput = {
    create?: XOR<ProductCreateWithoutAttributesInput, ProductUncheckedCreateWithoutAttributesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutAttributesInput
    upsert?: ProductUpsertWithoutAttributesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutAttributesInput, ProductUpdateWithoutAttributesInput>, ProductUncheckedUpdateWithoutAttributesInput>
  }

  export type ProductCreateNestedOneWithoutSizeChartsInput = {
    create?: XOR<ProductCreateWithoutSizeChartsInput, ProductUncheckedCreateWithoutSizeChartsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSizeChartsInput
    connect?: ProductWhereUniqueInput
  }

  export type SizeChartColumnCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput> | SizeChartColumnCreateWithoutSizeChartInput[] | SizeChartColumnUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartColumnCreateOrConnectWithoutSizeChartInput | SizeChartColumnCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartColumnCreateManySizeChartInputEnvelope
    connect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
  }

  export type SizeChartRowCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput> | SizeChartRowCreateWithoutSizeChartInput[] | SizeChartRowUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartRowCreateOrConnectWithoutSizeChartInput | SizeChartRowCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartRowCreateManySizeChartInputEnvelope
    connect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
  }

  export type SizeChartImageCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput> | SizeChartImageCreateWithoutSizeChartInput[] | SizeChartImageUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartImageCreateOrConnectWithoutSizeChartInput | SizeChartImageCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartImageCreateManySizeChartInputEnvelope
    connect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
  }

  export type SizeChartColumnUncheckedCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput> | SizeChartColumnCreateWithoutSizeChartInput[] | SizeChartColumnUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartColumnCreateOrConnectWithoutSizeChartInput | SizeChartColumnCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartColumnCreateManySizeChartInputEnvelope
    connect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
  }

  export type SizeChartRowUncheckedCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput> | SizeChartRowCreateWithoutSizeChartInput[] | SizeChartRowUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartRowCreateOrConnectWithoutSizeChartInput | SizeChartRowCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartRowCreateManySizeChartInputEnvelope
    connect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
  }

  export type SizeChartImageUncheckedCreateNestedManyWithoutSizeChartInput = {
    create?: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput> | SizeChartImageCreateWithoutSizeChartInput[] | SizeChartImageUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartImageCreateOrConnectWithoutSizeChartInput | SizeChartImageCreateOrConnectWithoutSizeChartInput[]
    createMany?: SizeChartImageCreateManySizeChartInputEnvelope
    connect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutSizeChartsNestedInput = {
    create?: XOR<ProductCreateWithoutSizeChartsInput, ProductUncheckedCreateWithoutSizeChartsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSizeChartsInput
    upsert?: ProductUpsertWithoutSizeChartsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSizeChartsInput, ProductUpdateWithoutSizeChartsInput>, ProductUncheckedUpdateWithoutSizeChartsInput>
  }

  export type SizeChartColumnUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput> | SizeChartColumnCreateWithoutSizeChartInput[] | SizeChartColumnUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartColumnCreateOrConnectWithoutSizeChartInput | SizeChartColumnCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartColumnUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartColumnUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartColumnCreateManySizeChartInputEnvelope
    set?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    disconnect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    delete?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    connect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    update?: SizeChartColumnUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartColumnUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartColumnUpdateManyWithWhereWithoutSizeChartInput | SizeChartColumnUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartColumnScalarWhereInput | SizeChartColumnScalarWhereInput[]
  }

  export type SizeChartRowUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput> | SizeChartRowCreateWithoutSizeChartInput[] | SizeChartRowUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartRowCreateOrConnectWithoutSizeChartInput | SizeChartRowCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartRowUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartRowUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartRowCreateManySizeChartInputEnvelope
    set?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    disconnect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    delete?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    connect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    update?: SizeChartRowUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartRowUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartRowUpdateManyWithWhereWithoutSizeChartInput | SizeChartRowUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartRowScalarWhereInput | SizeChartRowScalarWhereInput[]
  }

  export type SizeChartImageUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput> | SizeChartImageCreateWithoutSizeChartInput[] | SizeChartImageUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartImageCreateOrConnectWithoutSizeChartInput | SizeChartImageCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartImageUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartImageUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartImageCreateManySizeChartInputEnvelope
    set?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    disconnect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    delete?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    connect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    update?: SizeChartImageUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartImageUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartImageUpdateManyWithWhereWithoutSizeChartInput | SizeChartImageUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartImageScalarWhereInput | SizeChartImageScalarWhereInput[]
  }

  export type SizeChartColumnUncheckedUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput> | SizeChartColumnCreateWithoutSizeChartInput[] | SizeChartColumnUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartColumnCreateOrConnectWithoutSizeChartInput | SizeChartColumnCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartColumnUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartColumnUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartColumnCreateManySizeChartInputEnvelope
    set?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    disconnect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    delete?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    connect?: SizeChartColumnWhereUniqueInput | SizeChartColumnWhereUniqueInput[]
    update?: SizeChartColumnUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartColumnUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartColumnUpdateManyWithWhereWithoutSizeChartInput | SizeChartColumnUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartColumnScalarWhereInput | SizeChartColumnScalarWhereInput[]
  }

  export type SizeChartRowUncheckedUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput> | SizeChartRowCreateWithoutSizeChartInput[] | SizeChartRowUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartRowCreateOrConnectWithoutSizeChartInput | SizeChartRowCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartRowUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartRowUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartRowCreateManySizeChartInputEnvelope
    set?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    disconnect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    delete?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    connect?: SizeChartRowWhereUniqueInput | SizeChartRowWhereUniqueInput[]
    update?: SizeChartRowUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartRowUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartRowUpdateManyWithWhereWithoutSizeChartInput | SizeChartRowUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartRowScalarWhereInput | SizeChartRowScalarWhereInput[]
  }

  export type SizeChartImageUncheckedUpdateManyWithoutSizeChartNestedInput = {
    create?: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput> | SizeChartImageCreateWithoutSizeChartInput[] | SizeChartImageUncheckedCreateWithoutSizeChartInput[]
    connectOrCreate?: SizeChartImageCreateOrConnectWithoutSizeChartInput | SizeChartImageCreateOrConnectWithoutSizeChartInput[]
    upsert?: SizeChartImageUpsertWithWhereUniqueWithoutSizeChartInput | SizeChartImageUpsertWithWhereUniqueWithoutSizeChartInput[]
    createMany?: SizeChartImageCreateManySizeChartInputEnvelope
    set?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    disconnect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    delete?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    connect?: SizeChartImageWhereUniqueInput | SizeChartImageWhereUniqueInput[]
    update?: SizeChartImageUpdateWithWhereUniqueWithoutSizeChartInput | SizeChartImageUpdateWithWhereUniqueWithoutSizeChartInput[]
    updateMany?: SizeChartImageUpdateManyWithWhereWithoutSizeChartInput | SizeChartImageUpdateManyWithWhereWithoutSizeChartInput[]
    deleteMany?: SizeChartImageScalarWhereInput | SizeChartImageScalarWhereInput[]
  }

  export type SizeChartCreateNestedOneWithoutColumnsInput = {
    create?: XOR<SizeChartCreateWithoutColumnsInput, SizeChartUncheckedCreateWithoutColumnsInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutColumnsInput
    connect?: SizeChartWhereUniqueInput
  }

  export type SizeChartUpdateOneRequiredWithoutColumnsNestedInput = {
    create?: XOR<SizeChartCreateWithoutColumnsInput, SizeChartUncheckedCreateWithoutColumnsInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutColumnsInput
    upsert?: SizeChartUpsertWithoutColumnsInput
    connect?: SizeChartWhereUniqueInput
    update?: XOR<XOR<SizeChartUpdateToOneWithWhereWithoutColumnsInput, SizeChartUpdateWithoutColumnsInput>, SizeChartUncheckedUpdateWithoutColumnsInput>
  }

  export type SizeChartCreateNestedOneWithoutRowsInput = {
    create?: XOR<SizeChartCreateWithoutRowsInput, SizeChartUncheckedCreateWithoutRowsInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutRowsInput
    connect?: SizeChartWhereUniqueInput
  }

  export type SizeChartUpdateOneRequiredWithoutRowsNestedInput = {
    create?: XOR<SizeChartCreateWithoutRowsInput, SizeChartUncheckedCreateWithoutRowsInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutRowsInput
    upsert?: SizeChartUpsertWithoutRowsInput
    connect?: SizeChartWhereUniqueInput
    update?: XOR<XOR<SizeChartUpdateToOneWithWhereWithoutRowsInput, SizeChartUpdateWithoutRowsInput>, SizeChartUncheckedUpdateWithoutRowsInput>
  }

  export type SizeChartCreateNestedOneWithoutImagesInput = {
    create?: XOR<SizeChartCreateWithoutImagesInput, SizeChartUncheckedCreateWithoutImagesInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutImagesInput
    connect?: SizeChartWhereUniqueInput
  }

  export type SizeChartUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<SizeChartCreateWithoutImagesInput, SizeChartUncheckedCreateWithoutImagesInput>
    connectOrCreate?: SizeChartCreateOrConnectWithoutImagesInput
    upsert?: SizeChartUpsertWithoutImagesInput
    connect?: SizeChartWhereUniqueInput
    update?: XOR<XOR<SizeChartUpdateToOneWithWhereWithoutImagesInput, SizeChartUpdateWithoutImagesInput>, SizeChartUncheckedUpdateWithoutImagesInput>
  }

  export type ProductCreateNestedOneWithoutDimensionsInput = {
    create?: XOR<ProductCreateWithoutDimensionsInput, ProductUncheckedCreateWithoutDimensionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDimensionsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutDimensionsNestedInput = {
    create?: XOR<ProductCreateWithoutDimensionsInput, ProductUncheckedCreateWithoutDimensionsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDimensionsInput
    upsert?: ProductUpsertWithoutDimensionsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutDimensionsInput, ProductUpdateWithoutDimensionsInput>, ProductUncheckedUpdateWithoutDimensionsInput>
  }

  export type ProductCreateNestedOneWithoutSeoInput = {
    create?: XOR<ProductCreateWithoutSeoInput, ProductUncheckedCreateWithoutSeoInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSeoInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutSeoNestedInput = {
    create?: XOR<ProductCreateWithoutSeoInput, ProductUncheckedCreateWithoutSeoInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSeoInput
    upsert?: ProductUpsertWithoutSeoInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSeoInput, ProductUpdateWithoutSeoInput>, ProductUncheckedUpdateWithoutSeoInput>
  }

  export type CategoryCreateproductIdsInput = {
    set: string[]
  }

  export type CategoryUpdateproductIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductTagCreateNestedManyWithoutTagInput = {
    create?: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput> | ProductTagCreateWithoutTagInput[] | ProductTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutTagInput | ProductTagCreateOrConnectWithoutTagInput[]
    createMany?: ProductTagCreateManyTagInputEnvelope
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
  }

  export type ProductTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput> | ProductTagCreateWithoutTagInput[] | ProductTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutTagInput | ProductTagCreateOrConnectWithoutTagInput[]
    createMany?: ProductTagCreateManyTagInputEnvelope
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
  }

  export type ProductTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput> | ProductTagCreateWithoutTagInput[] | ProductTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutTagInput | ProductTagCreateOrConnectWithoutTagInput[]
    upsert?: ProductTagUpsertWithWhereUniqueWithoutTagInput | ProductTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProductTagCreateManyTagInputEnvelope
    set?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    disconnect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    delete?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    update?: ProductTagUpdateWithWhereUniqueWithoutTagInput | ProductTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProductTagUpdateManyWithWhereWithoutTagInput | ProductTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
  }

  export type ProductTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput> | ProductTagCreateWithoutTagInput[] | ProductTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: ProductTagCreateOrConnectWithoutTagInput | ProductTagCreateOrConnectWithoutTagInput[]
    upsert?: ProductTagUpsertWithWhereUniqueWithoutTagInput | ProductTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: ProductTagCreateManyTagInputEnvelope
    set?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    disconnect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    delete?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    connect?: ProductTagWhereUniqueInput | ProductTagWhereUniqueInput[]
    update?: ProductTagUpdateWithWhereUniqueWithoutTagInput | ProductTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: ProductTagUpdateManyWithWhereWithoutTagInput | ProductTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutProductTagsInput = {
    create?: XOR<ProductCreateWithoutProductTagsInput, ProductUncheckedCreateWithoutProductTagsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductTagsInput
    connect?: ProductWhereUniqueInput
  }

  export type TagCreateNestedOneWithoutProductTagsInput = {
    create?: XOR<TagCreateWithoutProductTagsInput, TagUncheckedCreateWithoutProductTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProductTagsInput
    connect?: TagWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutProductTagsNestedInput = {
    create?: XOR<ProductCreateWithoutProductTagsInput, ProductUncheckedCreateWithoutProductTagsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductTagsInput
    upsert?: ProductUpsertWithoutProductTagsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductTagsInput, ProductUpdateWithoutProductTagsInput>, ProductUncheckedUpdateWithoutProductTagsInput>
  }

  export type TagUpdateOneRequiredWithoutProductTagsNestedInput = {
    create?: XOR<TagCreateWithoutProductTagsInput, TagUncheckedCreateWithoutProductTagsInput>
    connectOrCreate?: TagCreateOrConnectWithoutProductTagsInput
    upsert?: TagUpsertWithoutProductTagsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutProductTagsInput, TagUpdateWithoutProductTagsInput>, TagUncheckedUpdateWithoutProductTagsInput>
  }

  export type ProductCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutBrandInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutBrandNestedInput = {
    create?: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput> | ProductCreateWithoutBrandInput[] | ProductUncheckedCreateWithoutBrandInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutBrandInput | ProductCreateOrConnectWithoutBrandInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutBrandInput | ProductUpsertWithWhereUniqueWithoutBrandInput[]
    createMany?: ProductCreateManyBrandInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutBrandInput | ProductUpdateWithWhereUniqueWithoutBrandInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutBrandInput | ProductUpdateManyWithWhereWithoutBrandInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type WarehouseCreatelocationInput = {
    set: string[]
  }

  export type ProductVariantCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput> | ProductVariantCreateWithoutWarehouseInput[] | ProductVariantUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutWarehouseInput | ProductVariantCreateOrConnectWithoutWarehouseInput[]
    createMany?: ProductVariantCreateManyWarehouseInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput> | ProductVariantCreateWithoutWarehouseInput[] | ProductVariantUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutWarehouseInput | ProductVariantCreateOrConnectWithoutWarehouseInput[]
    createMany?: ProductVariantCreateManyWarehouseInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type WarehouseUpdatelocationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProductVariantUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput> | ProductVariantCreateWithoutWarehouseInput[] | ProductVariantUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutWarehouseInput | ProductVariantCreateOrConnectWithoutWarehouseInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutWarehouseInput | ProductVariantUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: ProductVariantCreateManyWarehouseInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutWarehouseInput | ProductVariantUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutWarehouseInput | ProductVariantUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput> | ProductVariantCreateWithoutWarehouseInput[] | ProductVariantUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutWarehouseInput | ProductVariantCreateOrConnectWithoutWarehouseInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutWarehouseInput | ProductVariantUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: ProductVariantCreateManyWarehouseInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutWarehouseInput | ProductVariantUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutWarehouseInput | ProductVariantUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type ProductImageCreateWithoutProductInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    createdAt?: Date | string
  }

  export type ProductImageUncheckedCreateWithoutProductInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    createdAt?: Date | string
  }

  export type ProductImageCreateOrConnectWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageCreateManyProductInputEnvelope = {
    data: ProductImageCreateManyProductInput | ProductImageCreateManyProductInput[]
  }

  export type ProductVariantCreateWithoutProductInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeCreateNestedManyWithoutVariantInput
    warehouse: WarehouseCreateNestedOneWithoutVariantsInput
    stock?: StockCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutProductInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeUncheckedCreateNestedManyWithoutVariantInput
    stock?: StockUncheckedCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantCreateManyProductInputEnvelope = {
    data: ProductVariantCreateManyProductInput | ProductVariantCreateManyProductInput[]
  }

  export type ProductAttributeCreateWithoutProductInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductAttributeUncheckedCreateWithoutProductInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductAttributeCreateOrConnectWithoutProductInput = {
    where: ProductAttributeWhereUniqueInput
    create: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput>
  }

  export type ProductAttributeCreateManyProductInputEnvelope = {
    data: ProductAttributeCreateManyProductInput | ProductAttributeCreateManyProductInput[]
  }

  export type SizeChartCreateWithoutProductInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columns?: SizeChartColumnCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUncheckedCreateWithoutProductInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    columns?: SizeChartColumnUncheckedCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowUncheckedCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageUncheckedCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartCreateOrConnectWithoutProductInput = {
    where: SizeChartWhereUniqueInput
    create: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput>
  }

  export type SizeChartCreateManyProductInputEnvelope = {
    data: SizeChartCreateManyProductInput | SizeChartCreateManyProductInput[]
  }

  export type BrandCreateWithoutProductsInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    logo?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BrandCreateOrConnectWithoutProductsInput = {
    where: BrandWhereUniqueInput
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
  }

  export type ProductDimensionCreateWithoutProductInput = {
    id?: string
    length: number
    width: number
    height: number
    weight: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductDimensionUncheckedCreateWithoutProductInput = {
    id?: string
    length: number
    width: number
    height: number
    weight: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductDimensionCreateOrConnectWithoutProductInput = {
    where: ProductDimensionWhereUniqueInput
    create: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
  }

  export type ProductSEOCreateWithoutProductInput = {
    id?: string
    title: string
    description: string
    keywords: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSEOUncheckedCreateWithoutProductInput = {
    id?: string
    title: string
    description: string
    keywords: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSEOCreateOrConnectWithoutProductInput = {
    where: ProductSEOWhereUniqueInput
    create: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
  }

  export type ProductTagCreateWithoutProductInput = {
    id?: string
    createdAt?: Date | string
    tag: TagCreateNestedOneWithoutProductTagsInput
  }

  export type ProductTagUncheckedCreateWithoutProductInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
  }

  export type ProductTagCreateOrConnectWithoutProductInput = {
    where: ProductTagWhereUniqueInput
    create: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput>
  }

  export type ProductTagCreateManyProductInputEnvelope = {
    data: ProductTagCreateManyProductInput | ProductTagCreateManyProductInput[]
  }

  export type RelatedProductCreateWithoutFromProductInput = {
    id?: string
    toProduct: ProductCreateNestedOneWithoutRelatedToInput
  }

  export type RelatedProductUncheckedCreateWithoutFromProductInput = {
    id?: string
    toProductId: string
  }

  export type RelatedProductCreateOrConnectWithoutFromProductInput = {
    where: RelatedProductWhereUniqueInput
    create: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput>
  }

  export type RelatedProductCreateManyFromProductInputEnvelope = {
    data: RelatedProductCreateManyFromProductInput | RelatedProductCreateManyFromProductInput[]
  }

  export type RelatedProductCreateWithoutToProductInput = {
    id?: string
    fromProduct: ProductCreateNestedOneWithoutRelatedFromInput
  }

  export type RelatedProductUncheckedCreateWithoutToProductInput = {
    id?: string
    fromProductId: string
  }

  export type RelatedProductCreateOrConnectWithoutToProductInput = {
    where: RelatedProductWhereUniqueInput
    create: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput>
  }

  export type RelatedProductCreateManyToProductInputEnvelope = {
    data: RelatedProductCreateManyToProductInput | RelatedProductCreateManyToProductInput[]
  }

  export type WishlistCreateWithoutProductInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistUncheckedCreateWithoutProductInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WishlistCreateOrConnectWithoutProductInput = {
    where: WishlistWhereUniqueInput
    create: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
  }

  export type WishlistCreateManyProductInputEnvelope = {
    data: WishlistCreateManyProductInput | WishlistCreateManyProductInput[]
  }

  export type ProductImageUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    update: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    data: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
  }

  export type ProductImageUpdateManyWithWhereWithoutProductInput = {
    where: ProductImageScalarWhereInput
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductImageScalarWhereInput = {
    AND?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    OR?: ProductImageScalarWhereInput[]
    NOT?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    id?: StringFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    blurhash?: StringFilter<"ProductImage"> | string
    isMain?: BoolFilter<"ProductImage"> | boolean
    productId?: StringFilter<"ProductImage"> | string
    createdAt?: DateTimeFilter<"ProductImage"> | Date | string
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutProductInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductVariantScalarWhereInput = {
    AND?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    OR?: ProductVariantScalarWhereInput[]
    NOT?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    id?: StringFilter<"ProductVariant"> | string
    name?: StringFilter<"ProductVariant"> | string
    sku?: StringFilter<"ProductVariant"> | string
    price?: FloatFilter<"ProductVariant"> | number
    lowStockThreshold?: IntFilter<"ProductVariant"> | number
    colorValue?: StringNullableFilter<"ProductVariant"> | string | null
    colorName?: StringNullableFilter<"ProductVariant"> | string | null
    attributesIds?: StringNullableListFilter<"ProductVariant">
    imageIds?: StringNullableListFilter<"ProductVariant">
    productId?: StringFilter<"ProductVariant"> | string
    warehouseId?: StringFilter<"ProductVariant"> | string
    createdAt?: DateTimeFilter<"ProductVariant"> | Date | string
    updatedAt?: DateTimeFilter<"ProductVariant"> | Date | string
  }

  export type ProductAttributeUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductAttributeWhereUniqueInput
    update: XOR<ProductAttributeUpdateWithoutProductInput, ProductAttributeUncheckedUpdateWithoutProductInput>
    create: XOR<ProductAttributeCreateWithoutProductInput, ProductAttributeUncheckedCreateWithoutProductInput>
  }

  export type ProductAttributeUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductAttributeWhereUniqueInput
    data: XOR<ProductAttributeUpdateWithoutProductInput, ProductAttributeUncheckedUpdateWithoutProductInput>
  }

  export type ProductAttributeUpdateManyWithWhereWithoutProductInput = {
    where: ProductAttributeScalarWhereInput
    data: XOR<ProductAttributeUpdateManyMutationInput, ProductAttributeUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductAttributeScalarWhereInput = {
    AND?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
    OR?: ProductAttributeScalarWhereInput[]
    NOT?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
    id?: StringFilter<"ProductAttribute"> | string
    name?: StringFilter<"ProductAttribute"> | string
    required?: BoolFilter<"ProductAttribute"> | boolean
    visible?: BoolFilter<"ProductAttribute"> | boolean
    variantable?: BoolFilter<"ProductAttribute"> | boolean
    filterable?: BoolFilter<"ProductAttribute"> | boolean
    searchable?: BoolFilter<"ProductAttribute"> | boolean
    displayOrder?: IntFilter<"ProductAttribute"> | number
    values?: StringNullableListFilter<"ProductAttribute">
    productId?: StringFilter<"ProductAttribute"> | string
    createdAt?: DateTimeFilter<"ProductAttribute"> | Date | string
    updatedAt?: DateTimeFilter<"ProductAttribute"> | Date | string
  }

  export type SizeChartUpsertWithWhereUniqueWithoutProductInput = {
    where: SizeChartWhereUniqueInput
    update: XOR<SizeChartUpdateWithoutProductInput, SizeChartUncheckedUpdateWithoutProductInput>
    create: XOR<SizeChartCreateWithoutProductInput, SizeChartUncheckedCreateWithoutProductInput>
  }

  export type SizeChartUpdateWithWhereUniqueWithoutProductInput = {
    where: SizeChartWhereUniqueInput
    data: XOR<SizeChartUpdateWithoutProductInput, SizeChartUncheckedUpdateWithoutProductInput>
  }

  export type SizeChartUpdateManyWithWhereWithoutProductInput = {
    where: SizeChartScalarWhereInput
    data: XOR<SizeChartUpdateManyMutationInput, SizeChartUncheckedUpdateManyWithoutProductInput>
  }

  export type SizeChartScalarWhereInput = {
    AND?: SizeChartScalarWhereInput | SizeChartScalarWhereInput[]
    OR?: SizeChartScalarWhereInput[]
    NOT?: SizeChartScalarWhereInput | SizeChartScalarWhereInput[]
    id?: StringFilter<"SizeChart"> | string
    name?: StringFilter<"SizeChart"> | string
    category?: StringFilter<"SizeChart"> | string
    description?: StringNullableFilter<"SizeChart"> | string | null
    productId?: StringFilter<"SizeChart"> | string
    createdAt?: DateTimeFilter<"SizeChart"> | Date | string
    updatedAt?: DateTimeFilter<"SizeChart"> | Date | string
  }

  export type BrandUpsertWithoutProductsInput = {
    update: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
    create: XOR<BrandCreateWithoutProductsInput, BrandUncheckedCreateWithoutProductsInput>
    where?: BrandWhereInput
  }

  export type BrandUpdateToOneWithWhereWithoutProductsInput = {
    where?: BrandWhereInput
    data: XOR<BrandUpdateWithoutProductsInput, BrandUncheckedUpdateWithoutProductsInput>
  }

  export type BrandUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BrandUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductDimensionUpsertWithoutProductInput = {
    update: XOR<ProductDimensionUpdateWithoutProductInput, ProductDimensionUncheckedUpdateWithoutProductInput>
    create: XOR<ProductDimensionCreateWithoutProductInput, ProductDimensionUncheckedCreateWithoutProductInput>
    where?: ProductDimensionWhereInput
  }

  export type ProductDimensionUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductDimensionWhereInput
    data: XOR<ProductDimensionUpdateWithoutProductInput, ProductDimensionUncheckedUpdateWithoutProductInput>
  }

  export type ProductDimensionUpdateWithoutProductInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductDimensionUncheckedUpdateWithoutProductInput = {
    length?: FloatFieldUpdateOperationsInput | number
    width?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSEOUpsertWithoutProductInput = {
    update: XOR<ProductSEOUpdateWithoutProductInput, ProductSEOUncheckedUpdateWithoutProductInput>
    create: XOR<ProductSEOCreateWithoutProductInput, ProductSEOUncheckedCreateWithoutProductInput>
    where?: ProductSEOWhereInput
  }

  export type ProductSEOUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductSEOWhereInput
    data: XOR<ProductSEOUpdateWithoutProductInput, ProductSEOUncheckedUpdateWithoutProductInput>
  }

  export type ProductSEOUpdateWithoutProductInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSEOUncheckedUpdateWithoutProductInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    keywords?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductTagWhereUniqueInput
    update: XOR<ProductTagUpdateWithoutProductInput, ProductTagUncheckedUpdateWithoutProductInput>
    create: XOR<ProductTagCreateWithoutProductInput, ProductTagUncheckedCreateWithoutProductInput>
  }

  export type ProductTagUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductTagWhereUniqueInput
    data: XOR<ProductTagUpdateWithoutProductInput, ProductTagUncheckedUpdateWithoutProductInput>
  }

  export type ProductTagUpdateManyWithWhereWithoutProductInput = {
    where: ProductTagScalarWhereInput
    data: XOR<ProductTagUpdateManyMutationInput, ProductTagUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductTagScalarWhereInput = {
    AND?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
    OR?: ProductTagScalarWhereInput[]
    NOT?: ProductTagScalarWhereInput | ProductTagScalarWhereInput[]
    id?: StringFilter<"ProductTag"> | string
    productId?: StringFilter<"ProductTag"> | string
    tagId?: StringFilter<"ProductTag"> | string
    createdAt?: DateTimeFilter<"ProductTag"> | Date | string
  }

  export type RelatedProductUpsertWithWhereUniqueWithoutFromProductInput = {
    where: RelatedProductWhereUniqueInput
    update: XOR<RelatedProductUpdateWithoutFromProductInput, RelatedProductUncheckedUpdateWithoutFromProductInput>
    create: XOR<RelatedProductCreateWithoutFromProductInput, RelatedProductUncheckedCreateWithoutFromProductInput>
  }

  export type RelatedProductUpdateWithWhereUniqueWithoutFromProductInput = {
    where: RelatedProductWhereUniqueInput
    data: XOR<RelatedProductUpdateWithoutFromProductInput, RelatedProductUncheckedUpdateWithoutFromProductInput>
  }

  export type RelatedProductUpdateManyWithWhereWithoutFromProductInput = {
    where: RelatedProductScalarWhereInput
    data: XOR<RelatedProductUpdateManyMutationInput, RelatedProductUncheckedUpdateManyWithoutFromProductInput>
  }

  export type RelatedProductScalarWhereInput = {
    AND?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
    OR?: RelatedProductScalarWhereInput[]
    NOT?: RelatedProductScalarWhereInput | RelatedProductScalarWhereInput[]
    id?: StringFilter<"RelatedProduct"> | string
    fromProductId?: StringFilter<"RelatedProduct"> | string
    toProductId?: StringFilter<"RelatedProduct"> | string
  }

  export type RelatedProductUpsertWithWhereUniqueWithoutToProductInput = {
    where: RelatedProductWhereUniqueInput
    update: XOR<RelatedProductUpdateWithoutToProductInput, RelatedProductUncheckedUpdateWithoutToProductInput>
    create: XOR<RelatedProductCreateWithoutToProductInput, RelatedProductUncheckedCreateWithoutToProductInput>
  }

  export type RelatedProductUpdateWithWhereUniqueWithoutToProductInput = {
    where: RelatedProductWhereUniqueInput
    data: XOR<RelatedProductUpdateWithoutToProductInput, RelatedProductUncheckedUpdateWithoutToProductInput>
  }

  export type RelatedProductUpdateManyWithWhereWithoutToProductInput = {
    where: RelatedProductScalarWhereInput
    data: XOR<RelatedProductUpdateManyMutationInput, RelatedProductUncheckedUpdateManyWithoutToProductInput>
  }

  export type WishlistUpsertWithWhereUniqueWithoutProductInput = {
    where: WishlistWhereUniqueInput
    update: XOR<WishlistUpdateWithoutProductInput, WishlistUncheckedUpdateWithoutProductInput>
    create: XOR<WishlistCreateWithoutProductInput, WishlistUncheckedCreateWithoutProductInput>
  }

  export type WishlistUpdateWithWhereUniqueWithoutProductInput = {
    where: WishlistWhereUniqueInput
    data: XOR<WishlistUpdateWithoutProductInput, WishlistUncheckedUpdateWithoutProductInput>
  }

  export type WishlistUpdateManyWithWhereWithoutProductInput = {
    where: WishlistScalarWhereInput
    data: XOR<WishlistUpdateManyMutationInput, WishlistUncheckedUpdateManyWithoutProductInput>
  }

  export type WishlistScalarWhereInput = {
    AND?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    OR?: WishlistScalarWhereInput[]
    NOT?: WishlistScalarWhereInput | WishlistScalarWhereInput[]
    id?: StringFilter<"Wishlist"> | string
    userId?: StringFilter<"Wishlist"> | string
    productId?: StringFilter<"Wishlist"> | string
    createdAt?: DateTimeFilter<"Wishlist"> | Date | string
    updatedAt?: DateTimeFilter<"Wishlist"> | Date | string
  }

  export type ProductCreateWithoutRelatedFromInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutRelatedFromInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutRelatedFromInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRelatedFromInput, ProductUncheckedCreateWithoutRelatedFromInput>
  }

  export type ProductCreateWithoutRelatedToInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutRelatedToInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutRelatedToInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutRelatedToInput, ProductUncheckedCreateWithoutRelatedToInput>
  }

  export type ProductUpsertWithoutRelatedFromInput = {
    update: XOR<ProductUpdateWithoutRelatedFromInput, ProductUncheckedUpdateWithoutRelatedFromInput>
    create: XOR<ProductCreateWithoutRelatedFromInput, ProductUncheckedCreateWithoutRelatedFromInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutRelatedFromInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutRelatedFromInput, ProductUncheckedUpdateWithoutRelatedFromInput>
  }

  export type ProductUpdateWithoutRelatedFromInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutRelatedFromInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUpsertWithoutRelatedToInput = {
    update: XOR<ProductUpdateWithoutRelatedToInput, ProductUncheckedUpdateWithoutRelatedToInput>
    create: XOR<ProductCreateWithoutRelatedToInput, ProductUncheckedCreateWithoutRelatedToInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutRelatedToInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutRelatedToInput, ProductUncheckedUpdateWithoutRelatedToInput>
  }

  export type ProductUpdateWithoutRelatedToInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutRelatedToInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutImagesInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutImagesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpsertWithoutImagesInput = {
    update: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutImagesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutWishlistsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
  }

  export type ProductUncheckedCreateWithoutWishlistsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
  }

  export type ProductCreateOrConnectWithoutWishlistsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutWishlistsInput, ProductUncheckedCreateWithoutWishlistsInput>
  }

  export type ProductUpsertWithoutWishlistsInput = {
    update: XOR<ProductUpdateWithoutWishlistsInput, ProductUncheckedUpdateWithoutWishlistsInput>
    create: XOR<ProductCreateWithoutWishlistsInput, ProductUncheckedCreateWithoutWishlistsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutWishlistsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutWishlistsInput, ProductUncheckedUpdateWithoutWishlistsInput>
  }

  export type ProductUpdateWithoutWishlistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutWishlistsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
  }

  export type ProductVariantCreateWithoutStockInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeCreateNestedManyWithoutVariantInput
    product: ProductCreateNestedOneWithoutVariantsInput
    warehouse: WarehouseCreateNestedOneWithoutVariantsInput
    reservationItems?: ReservationItemCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutStockInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeUncheckedCreateNestedManyWithoutVariantInput
    reservationItems?: ReservationItemUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutStockInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutStockInput, ProductVariantUncheckedCreateWithoutStockInput>
  }

  export type ProductVariantUpsertWithoutStockInput = {
    update: XOR<ProductVariantUpdateWithoutStockInput, ProductVariantUncheckedUpdateWithoutStockInput>
    create: XOR<ProductVariantCreateWithoutStockInput, ProductVariantUncheckedCreateWithoutStockInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutStockInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutStockInput, ProductVariantUncheckedUpdateWithoutStockInput>
  }

  export type ProductVariantUpdateWithoutStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUpdateManyWithoutVariantNestedInput
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutVariantsNestedInput
    reservationItems?: ReservationItemUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutStockInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput
    reservationItems?: ReservationItemUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ReservationItemCreateWithoutReservationInput = {
    id?: string
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    variant: ProductVariantCreateNestedOneWithoutReservationItemsInput
  }

  export type ReservationItemUncheckedCreateWithoutReservationInput = {
    id?: string
    quantity: number
    variantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationItemCreateOrConnectWithoutReservationInput = {
    where: ReservationItemWhereUniqueInput
    create: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput>
  }

  export type ReservationItemCreateManyReservationInputEnvelope = {
    data: ReservationItemCreateManyReservationInput | ReservationItemCreateManyReservationInput[]
  }

  export type ReservationItemUpsertWithWhereUniqueWithoutReservationInput = {
    where: ReservationItemWhereUniqueInput
    update: XOR<ReservationItemUpdateWithoutReservationInput, ReservationItemUncheckedUpdateWithoutReservationInput>
    create: XOR<ReservationItemCreateWithoutReservationInput, ReservationItemUncheckedCreateWithoutReservationInput>
  }

  export type ReservationItemUpdateWithWhereUniqueWithoutReservationInput = {
    where: ReservationItemWhereUniqueInput
    data: XOR<ReservationItemUpdateWithoutReservationInput, ReservationItemUncheckedUpdateWithoutReservationInput>
  }

  export type ReservationItemUpdateManyWithWhereWithoutReservationInput = {
    where: ReservationItemScalarWhereInput
    data: XOR<ReservationItemUpdateManyMutationInput, ReservationItemUncheckedUpdateManyWithoutReservationInput>
  }

  export type ReservationItemScalarWhereInput = {
    AND?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
    OR?: ReservationItemScalarWhereInput[]
    NOT?: ReservationItemScalarWhereInput | ReservationItemScalarWhereInput[]
    id?: StringFilter<"ReservationItem"> | string
    quantity?: IntFilter<"ReservationItem"> | number
    variantId?: StringFilter<"ReservationItem"> | string
    reservationId?: StringFilter<"ReservationItem"> | string
    createdAt?: DateTimeFilter<"ReservationItem"> | Date | string
    updatedAt?: DateTimeFilter<"ReservationItem"> | Date | string
  }

  export type ProductVariantCreateWithoutReservationItemsInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeCreateNestedManyWithoutVariantInput
    product: ProductCreateNestedOneWithoutVariantsInput
    warehouse: WarehouseCreateNestedOneWithoutVariantsInput
    stock?: StockCreateNestedOneWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutReservationItemsInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeUncheckedCreateNestedManyWithoutVariantInput
    stock?: StockUncheckedCreateNestedOneWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutReservationItemsInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutReservationItemsInput, ProductVariantUncheckedCreateWithoutReservationItemsInput>
  }

  export type ReservationCreateWithoutItemsInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationUncheckedCreateWithoutItemsInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationCreateOrConnectWithoutItemsInput = {
    where: ReservationWhereUniqueInput
    create: XOR<ReservationCreateWithoutItemsInput, ReservationUncheckedCreateWithoutItemsInput>
  }

  export type ProductVariantUpsertWithoutReservationItemsInput = {
    update: XOR<ProductVariantUpdateWithoutReservationItemsInput, ProductVariantUncheckedUpdateWithoutReservationItemsInput>
    create: XOR<ProductVariantCreateWithoutReservationItemsInput, ProductVariantUncheckedCreateWithoutReservationItemsInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutReservationItemsInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutReservationItemsInput, ProductVariantUncheckedUpdateWithoutReservationItemsInput>
  }

  export type ProductVariantUpdateWithoutReservationItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUpdateManyWithoutVariantNestedInput
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutVariantsNestedInput
    stock?: StockUpdateOneWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutReservationItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput
    stock?: StockUncheckedUpdateOneWithoutVariantNestedInput
  }

  export type ReservationUpsertWithoutItemsInput = {
    update: XOR<ReservationUpdateWithoutItemsInput, ReservationUncheckedUpdateWithoutItemsInput>
    create: XOR<ReservationCreateWithoutItemsInput, ReservationUncheckedCreateWithoutItemsInput>
    where?: ReservationWhereInput
  }

  export type ReservationUpdateToOneWithWhereWithoutItemsInput = {
    where?: ReservationWhereInput
    data: XOR<ReservationUpdateWithoutItemsInput, ReservationUncheckedUpdateWithoutItemsInput>
  }

  export type ReservationUpdateWithoutItemsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationUncheckedUpdateWithoutItemsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VariantAttributeCreateWithoutVariantInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
  }

  export type VariantAttributeUncheckedCreateWithoutVariantInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
  }

  export type VariantAttributeCreateOrConnectWithoutVariantInput = {
    where: VariantAttributeWhereUniqueInput
    create: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput>
  }

  export type VariantAttributeCreateManyVariantInputEnvelope = {
    data: VariantAttributeCreateManyVariantInput | VariantAttributeCreateManyVariantInput[]
  }

  export type ProductCreateWithoutVariantsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutVariantsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutVariantsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
  }

  export type WarehouseCreateWithoutVariantsInput = {
    id?: string
    name: string
    code: string
    location?: WarehouseCreatelocationInput | string[]
    address: string
    manager: string
    contact: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseUncheckedCreateWithoutVariantsInput = {
    id?: string
    name: string
    code: string
    location?: WarehouseCreatelocationInput | string[]
    address: string
    manager: string
    contact: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WarehouseCreateOrConnectWithoutVariantsInput = {
    where: WarehouseWhereUniqueInput
    create: XOR<WarehouseCreateWithoutVariantsInput, WarehouseUncheckedCreateWithoutVariantsInput>
  }

  export type StockCreateWithoutVariantInput = {
    id?: string
    quantity?: number
    reserved?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockUncheckedCreateWithoutVariantInput = {
    id?: string
    quantity?: number
    reserved?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StockCreateOrConnectWithoutVariantInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
  }

  export type ReservationItemCreateWithoutVariantInput = {
    id?: string
    quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reservation: ReservationCreateNestedOneWithoutItemsInput
  }

  export type ReservationItemUncheckedCreateWithoutVariantInput = {
    id?: string
    quantity: number
    reservationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationItemCreateOrConnectWithoutVariantInput = {
    where: ReservationItemWhereUniqueInput
    create: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput>
  }

  export type ReservationItemCreateManyVariantInputEnvelope = {
    data: ReservationItemCreateManyVariantInput | ReservationItemCreateManyVariantInput[]
  }

  export type VariantAttributeUpsertWithWhereUniqueWithoutVariantInput = {
    where: VariantAttributeWhereUniqueInput
    update: XOR<VariantAttributeUpdateWithoutVariantInput, VariantAttributeUncheckedUpdateWithoutVariantInput>
    create: XOR<VariantAttributeCreateWithoutVariantInput, VariantAttributeUncheckedCreateWithoutVariantInput>
  }

  export type VariantAttributeUpdateWithWhereUniqueWithoutVariantInput = {
    where: VariantAttributeWhereUniqueInput
    data: XOR<VariantAttributeUpdateWithoutVariantInput, VariantAttributeUncheckedUpdateWithoutVariantInput>
  }

  export type VariantAttributeUpdateManyWithWhereWithoutVariantInput = {
    where: VariantAttributeScalarWhereInput
    data: XOR<VariantAttributeUpdateManyMutationInput, VariantAttributeUncheckedUpdateManyWithoutVariantInput>
  }

  export type VariantAttributeScalarWhereInput = {
    AND?: VariantAttributeScalarWhereInput | VariantAttributeScalarWhereInput[]
    OR?: VariantAttributeScalarWhereInput[]
    NOT?: VariantAttributeScalarWhereInput | VariantAttributeScalarWhereInput[]
    id?: StringFilter<"VariantAttribute"> | string
    name?: StringFilter<"VariantAttribute"> | string
    value?: StringFilter<"VariantAttribute"> | string
    extraValue?: StringNullableFilter<"VariantAttribute"> | string | null
    variantId?: StringFilter<"VariantAttribute"> | string
  }

  export type ProductUpsertWithoutVariantsInput = {
    update: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutVariantsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type ProductUpdateWithoutVariantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutVariantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type WarehouseUpsertWithoutVariantsInput = {
    update: XOR<WarehouseUpdateWithoutVariantsInput, WarehouseUncheckedUpdateWithoutVariantsInput>
    create: XOR<WarehouseCreateWithoutVariantsInput, WarehouseUncheckedCreateWithoutVariantsInput>
    where?: WarehouseWhereInput
  }

  export type WarehouseUpdateToOneWithWhereWithoutVariantsInput = {
    where?: WarehouseWhereInput
    data: XOR<WarehouseUpdateWithoutVariantsInput, WarehouseUncheckedUpdateWithoutVariantsInput>
  }

  export type WarehouseUpdateWithoutVariantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WarehouseUncheckedUpdateWithoutVariantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    location?: WarehouseUpdatelocationInput | string[]
    address?: StringFieldUpdateOperationsInput | string
    manager?: StringFieldUpdateOperationsInput | string
    contact?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUpsertWithoutVariantInput = {
    update: XOR<StockUpdateWithoutVariantInput, StockUncheckedUpdateWithoutVariantInput>
    create: XOR<StockCreateWithoutVariantInput, StockUncheckedCreateWithoutVariantInput>
    where?: StockWhereInput
  }

  export type StockUpdateToOneWithWhereWithoutVariantInput = {
    where?: StockWhereInput
    data: XOR<StockUpdateWithoutVariantInput, StockUncheckedUpdateWithoutVariantInput>
  }

  export type StockUpdateWithoutVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StockUncheckedUpdateWithoutVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reserved?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemUpsertWithWhereUniqueWithoutVariantInput = {
    where: ReservationItemWhereUniqueInput
    update: XOR<ReservationItemUpdateWithoutVariantInput, ReservationItemUncheckedUpdateWithoutVariantInput>
    create: XOR<ReservationItemCreateWithoutVariantInput, ReservationItemUncheckedCreateWithoutVariantInput>
  }

  export type ReservationItemUpdateWithWhereUniqueWithoutVariantInput = {
    where: ReservationItemWhereUniqueInput
    data: XOR<ReservationItemUpdateWithoutVariantInput, ReservationItemUncheckedUpdateWithoutVariantInput>
  }

  export type ReservationItemUpdateManyWithWhereWithoutVariantInput = {
    where: ReservationItemScalarWhereInput
    data: XOR<ReservationItemUpdateManyMutationInput, ReservationItemUncheckedUpdateManyWithoutVariantInput>
  }

  export type ProductVariantCreateWithoutAttributesInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutVariantsInput
    warehouse: WarehouseCreateNestedOneWithoutVariantsInput
    stock?: StockCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutAttributesInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    stock?: StockUncheckedCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutAttributesInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutAttributesInput, ProductVariantUncheckedCreateWithoutAttributesInput>
  }

  export type ProductVariantUpsertWithoutAttributesInput = {
    update: XOR<ProductVariantUpdateWithoutAttributesInput, ProductVariantUncheckedUpdateWithoutAttributesInput>
    create: XOR<ProductVariantCreateWithoutAttributesInput, ProductVariantUncheckedCreateWithoutAttributesInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutAttributesInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutAttributesInput, ProductVariantUncheckedUpdateWithoutAttributesInput>
  }

  export type ProductVariantUpdateWithoutAttributesInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutVariantsNestedInput
    stock?: StockUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutAttributesInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    stock?: StockUncheckedUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductCreateWithoutAttributesInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutAttributesInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutAttributesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutAttributesInput, ProductUncheckedCreateWithoutAttributesInput>
  }

  export type ProductUpsertWithoutAttributesInput = {
    update: XOR<ProductUpdateWithoutAttributesInput, ProductUncheckedUpdateWithoutAttributesInput>
    create: XOR<ProductCreateWithoutAttributesInput, ProductUncheckedCreateWithoutAttributesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutAttributesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutAttributesInput, ProductUncheckedUpdateWithoutAttributesInput>
  }

  export type ProductUpdateWithoutAttributesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutAttributesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutSizeChartsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSizeChartsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSizeChartsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSizeChartsInput, ProductUncheckedCreateWithoutSizeChartsInput>
  }

  export type SizeChartColumnCreateWithoutSizeChartInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    createdAt?: Date | string
  }

  export type SizeChartColumnUncheckedCreateWithoutSizeChartInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    createdAt?: Date | string
  }

  export type SizeChartColumnCreateOrConnectWithoutSizeChartInput = {
    where: SizeChartColumnWhereUniqueInput
    create: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartColumnCreateManySizeChartInputEnvelope = {
    data: SizeChartColumnCreateManySizeChartInput | SizeChartColumnCreateManySizeChartInput[]
  }

  export type SizeChartRowCreateWithoutSizeChartInput = {
    id?: string
    name: string
    values: InputJsonValue
    createdAt?: Date | string
  }

  export type SizeChartRowUncheckedCreateWithoutSizeChartInput = {
    id?: string
    name: string
    values: InputJsonValue
    createdAt?: Date | string
  }

  export type SizeChartRowCreateOrConnectWithoutSizeChartInput = {
    where: SizeChartRowWhereUniqueInput
    create: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartRowCreateManySizeChartInputEnvelope = {
    data: SizeChartRowCreateManySizeChartInput | SizeChartRowCreateManySizeChartInput[]
  }

  export type SizeChartImageCreateWithoutSizeChartInput = {
    id?: string
    url: string
    name: string
    createdAt?: Date | string
  }

  export type SizeChartImageUncheckedCreateWithoutSizeChartInput = {
    id?: string
    url: string
    name: string
    createdAt?: Date | string
  }

  export type SizeChartImageCreateOrConnectWithoutSizeChartInput = {
    where: SizeChartImageWhereUniqueInput
    create: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartImageCreateManySizeChartInputEnvelope = {
    data: SizeChartImageCreateManySizeChartInput | SizeChartImageCreateManySizeChartInput[]
  }

  export type ProductUpsertWithoutSizeChartsInput = {
    update: XOR<ProductUpdateWithoutSizeChartsInput, ProductUncheckedUpdateWithoutSizeChartsInput>
    create: XOR<ProductCreateWithoutSizeChartsInput, ProductUncheckedCreateWithoutSizeChartsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSizeChartsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSizeChartsInput, ProductUncheckedUpdateWithoutSizeChartsInput>
  }

  export type ProductUpdateWithoutSizeChartsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSizeChartsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SizeChartColumnUpsertWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartColumnWhereUniqueInput
    update: XOR<SizeChartColumnUpdateWithoutSizeChartInput, SizeChartColumnUncheckedUpdateWithoutSizeChartInput>
    create: XOR<SizeChartColumnCreateWithoutSizeChartInput, SizeChartColumnUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartColumnUpdateWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartColumnWhereUniqueInput
    data: XOR<SizeChartColumnUpdateWithoutSizeChartInput, SizeChartColumnUncheckedUpdateWithoutSizeChartInput>
  }

  export type SizeChartColumnUpdateManyWithWhereWithoutSizeChartInput = {
    where: SizeChartColumnScalarWhereInput
    data: XOR<SizeChartColumnUpdateManyMutationInput, SizeChartColumnUncheckedUpdateManyWithoutSizeChartInput>
  }

  export type SizeChartColumnScalarWhereInput = {
    AND?: SizeChartColumnScalarWhereInput | SizeChartColumnScalarWhereInput[]
    OR?: SizeChartColumnScalarWhereInput[]
    NOT?: SizeChartColumnScalarWhereInput | SizeChartColumnScalarWhereInput[]
    id?: StringFilter<"SizeChartColumn"> | string
    name?: StringFilter<"SizeChartColumn"> | string
    type?: StringFilter<"SizeChartColumn"> | string
    unit?: StringNullableFilter<"SizeChartColumn"> | string | null
    sizeChartId?: StringFilter<"SizeChartColumn"> | string
    createdAt?: DateTimeFilter<"SizeChartColumn"> | Date | string
  }

  export type SizeChartRowUpsertWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartRowWhereUniqueInput
    update: XOR<SizeChartRowUpdateWithoutSizeChartInput, SizeChartRowUncheckedUpdateWithoutSizeChartInput>
    create: XOR<SizeChartRowCreateWithoutSizeChartInput, SizeChartRowUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartRowUpdateWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartRowWhereUniqueInput
    data: XOR<SizeChartRowUpdateWithoutSizeChartInput, SizeChartRowUncheckedUpdateWithoutSizeChartInput>
  }

  export type SizeChartRowUpdateManyWithWhereWithoutSizeChartInput = {
    where: SizeChartRowScalarWhereInput
    data: XOR<SizeChartRowUpdateManyMutationInput, SizeChartRowUncheckedUpdateManyWithoutSizeChartInput>
  }

  export type SizeChartRowScalarWhereInput = {
    AND?: SizeChartRowScalarWhereInput | SizeChartRowScalarWhereInput[]
    OR?: SizeChartRowScalarWhereInput[]
    NOT?: SizeChartRowScalarWhereInput | SizeChartRowScalarWhereInput[]
    id?: StringFilter<"SizeChartRow"> | string
    name?: StringFilter<"SizeChartRow"> | string
    values?: JsonFilter<"SizeChartRow">
    sizeChartId?: StringFilter<"SizeChartRow"> | string
    createdAt?: DateTimeFilter<"SizeChartRow"> | Date | string
  }

  export type SizeChartImageUpsertWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartImageWhereUniqueInput
    update: XOR<SizeChartImageUpdateWithoutSizeChartInput, SizeChartImageUncheckedUpdateWithoutSizeChartInput>
    create: XOR<SizeChartImageCreateWithoutSizeChartInput, SizeChartImageUncheckedCreateWithoutSizeChartInput>
  }

  export type SizeChartImageUpdateWithWhereUniqueWithoutSizeChartInput = {
    where: SizeChartImageWhereUniqueInput
    data: XOR<SizeChartImageUpdateWithoutSizeChartInput, SizeChartImageUncheckedUpdateWithoutSizeChartInput>
  }

  export type SizeChartImageUpdateManyWithWhereWithoutSizeChartInput = {
    where: SizeChartImageScalarWhereInput
    data: XOR<SizeChartImageUpdateManyMutationInput, SizeChartImageUncheckedUpdateManyWithoutSizeChartInput>
  }

  export type SizeChartImageScalarWhereInput = {
    AND?: SizeChartImageScalarWhereInput | SizeChartImageScalarWhereInput[]
    OR?: SizeChartImageScalarWhereInput[]
    NOT?: SizeChartImageScalarWhereInput | SizeChartImageScalarWhereInput[]
    id?: StringFilter<"SizeChartImage"> | string
    url?: StringFilter<"SizeChartImage"> | string
    name?: StringFilter<"SizeChartImage"> | string
    sizeChartId?: StringFilter<"SizeChartImage"> | string
    createdAt?: DateTimeFilter<"SizeChartImage"> | Date | string
  }

  export type SizeChartCreateWithoutColumnsInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSizeChartsInput
    rows?: SizeChartRowCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUncheckedCreateWithoutColumnsInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rows?: SizeChartRowUncheckedCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageUncheckedCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartCreateOrConnectWithoutColumnsInput = {
    where: SizeChartWhereUniqueInput
    create: XOR<SizeChartCreateWithoutColumnsInput, SizeChartUncheckedCreateWithoutColumnsInput>
  }

  export type SizeChartUpsertWithoutColumnsInput = {
    update: XOR<SizeChartUpdateWithoutColumnsInput, SizeChartUncheckedUpdateWithoutColumnsInput>
    create: XOR<SizeChartCreateWithoutColumnsInput, SizeChartUncheckedCreateWithoutColumnsInput>
    where?: SizeChartWhereInput
  }

  export type SizeChartUpdateToOneWithWhereWithoutColumnsInput = {
    where?: SizeChartWhereInput
    data: XOR<SizeChartUpdateWithoutColumnsInput, SizeChartUncheckedUpdateWithoutColumnsInput>
  }

  export type SizeChartUpdateWithoutColumnsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSizeChartsNestedInput
    rows?: SizeChartRowUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateWithoutColumnsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rows?: SizeChartRowUncheckedUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUncheckedUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartCreateWithoutRowsInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSizeChartsInput
    columns?: SizeChartColumnCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUncheckedCreateWithoutRowsInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    columns?: SizeChartColumnUncheckedCreateNestedManyWithoutSizeChartInput
    images?: SizeChartImageUncheckedCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartCreateOrConnectWithoutRowsInput = {
    where: SizeChartWhereUniqueInput
    create: XOR<SizeChartCreateWithoutRowsInput, SizeChartUncheckedCreateWithoutRowsInput>
  }

  export type SizeChartUpsertWithoutRowsInput = {
    update: XOR<SizeChartUpdateWithoutRowsInput, SizeChartUncheckedUpdateWithoutRowsInput>
    create: XOR<SizeChartCreateWithoutRowsInput, SizeChartUncheckedCreateWithoutRowsInput>
    where?: SizeChartWhereInput
  }

  export type SizeChartUpdateToOneWithWhereWithoutRowsInput = {
    where?: SizeChartWhereInput
    data: XOR<SizeChartUpdateWithoutRowsInput, SizeChartUncheckedUpdateWithoutRowsInput>
  }

  export type SizeChartUpdateWithoutRowsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSizeChartsNestedInput
    columns?: SizeChartColumnUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateWithoutRowsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: SizeChartColumnUncheckedUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUncheckedUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartCreateWithoutImagesInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSizeChartsInput
    columns?: SizeChartColumnCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    columns?: SizeChartColumnUncheckedCreateNestedManyWithoutSizeChartInput
    rows?: SizeChartRowUncheckedCreateNestedManyWithoutSizeChartInput
  }

  export type SizeChartCreateOrConnectWithoutImagesInput = {
    where: SizeChartWhereUniqueInput
    create: XOR<SizeChartCreateWithoutImagesInput, SizeChartUncheckedCreateWithoutImagesInput>
  }

  export type SizeChartUpsertWithoutImagesInput = {
    update: XOR<SizeChartUpdateWithoutImagesInput, SizeChartUncheckedUpdateWithoutImagesInput>
    create: XOR<SizeChartCreateWithoutImagesInput, SizeChartUncheckedCreateWithoutImagesInput>
    where?: SizeChartWhereInput
  }

  export type SizeChartUpdateToOneWithWhereWithoutImagesInput = {
    where?: SizeChartWhereInput
    data: XOR<SizeChartUpdateWithoutImagesInput, SizeChartUncheckedUpdateWithoutImagesInput>
  }

  export type SizeChartUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSizeChartsNestedInput
    columns?: SizeChartColumnUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: SizeChartColumnUncheckedUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUncheckedUpdateManyWithoutSizeChartNestedInput
  }

  export type ProductCreateWithoutDimensionsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutDimensionsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutDimensionsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutDimensionsInput, ProductUncheckedCreateWithoutDimensionsInput>
  }

  export type ProductUpsertWithoutDimensionsInput = {
    update: XOR<ProductUpdateWithoutDimensionsInput, ProductUncheckedUpdateWithoutDimensionsInput>
    create: XOR<ProductCreateWithoutDimensionsInput, ProductUncheckedCreateWithoutDimensionsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutDimensionsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutDimensionsInput, ProductUncheckedUpdateWithoutDimensionsInput>
  }

  export type ProductUpdateWithoutDimensionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutDimensionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutSeoInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSeoInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSeoInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSeoInput, ProductUncheckedCreateWithoutSeoInput>
  }

  export type ProductUpsertWithoutSeoInput = {
    update: XOR<ProductUpdateWithoutSeoInput, ProductUncheckedUpdateWithoutSeoInput>
    create: XOR<ProductCreateWithoutSeoInput, ProductUncheckedCreateWithoutSeoInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSeoInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSeoInput, ProductUncheckedUpdateWithoutSeoInput>
  }

  export type ProductUpdateWithoutSeoInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSeoInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductTagCreateWithoutTagInput = {
    id?: string
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutProductTagsInput
  }

  export type ProductTagUncheckedCreateWithoutTagInput = {
    id?: string
    productId: string
    createdAt?: Date | string
  }

  export type ProductTagCreateOrConnectWithoutTagInput = {
    where: ProductTagWhereUniqueInput
    create: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput>
  }

  export type ProductTagCreateManyTagInputEnvelope = {
    data: ProductTagCreateManyTagInput | ProductTagCreateManyTagInput[]
  }

  export type ProductTagUpsertWithWhereUniqueWithoutTagInput = {
    where: ProductTagWhereUniqueInput
    update: XOR<ProductTagUpdateWithoutTagInput, ProductTagUncheckedUpdateWithoutTagInput>
    create: XOR<ProductTagCreateWithoutTagInput, ProductTagUncheckedCreateWithoutTagInput>
  }

  export type ProductTagUpdateWithWhereUniqueWithoutTagInput = {
    where: ProductTagWhereUniqueInput
    data: XOR<ProductTagUpdateWithoutTagInput, ProductTagUncheckedUpdateWithoutTagInput>
  }

  export type ProductTagUpdateManyWithWhereWithoutTagInput = {
    where: ProductTagScalarWhereInput
    data: XOR<ProductTagUpdateManyMutationInput, ProductTagUncheckedUpdateManyWithoutTagInput>
  }

  export type ProductCreateWithoutProductTagsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    brand?: BrandCreateNestedOneWithoutProductsInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductTagsInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    brandId?: string | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductTagsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductTagsInput, ProductUncheckedCreateWithoutProductTagsInput>
  }

  export type TagCreateWithoutProductTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagUncheckedCreateWithoutProductTagsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TagCreateOrConnectWithoutProductTagsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutProductTagsInput, TagUncheckedCreateWithoutProductTagsInput>
  }

  export type ProductUpsertWithoutProductTagsInput = {
    update: XOR<ProductUpdateWithoutProductTagsInput, ProductUncheckedUpdateWithoutProductTagsInput>
    create: XOR<ProductCreateWithoutProductTagsInput, ProductUncheckedCreateWithoutProductTagsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductTagsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductTagsInput, ProductUncheckedUpdateWithoutProductTagsInput>
  }

  export type ProductUpdateWithoutProductTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    brand?: BrandUpdateOneWithoutProductsNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    brandId?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type TagUpsertWithoutProductTagsInput = {
    update: XOR<TagUpdateWithoutProductTagsInput, TagUncheckedUpdateWithoutProductTagsInput>
    create: XOR<TagCreateWithoutProductTagsInput, TagUncheckedCreateWithoutProductTagsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutProductTagsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutProductTagsInput, TagUncheckedUpdateWithoutProductTagsInput>
  }

  export type TagUpdateWithoutProductTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TagUncheckedUpdateWithoutProductTagsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionCreateNestedOneWithoutProductInput
    seo?: ProductSEOCreateNestedOneWithoutProductInput
    productTags?: ProductTagCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductCreateNestedManyWithoutToProductInput
    wishlists?: WishlistCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBrandInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    attributes?: ProductAttributeUncheckedCreateNestedManyWithoutProductInput
    sizeCharts?: SizeChartUncheckedCreateNestedManyWithoutProductInput
    dimensions?: ProductDimensionUncheckedCreateNestedOneWithoutProductInput
    seo?: ProductSEOUncheckedCreateNestedOneWithoutProductInput
    productTags?: ProductTagUncheckedCreateNestedManyWithoutProductInput
    relatedFrom?: RelatedProductUncheckedCreateNestedManyWithoutFromProductInput
    relatedTo?: RelatedProductUncheckedCreateNestedManyWithoutToProductInput
    wishlists?: WishlistUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBrandInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductCreateManyBrandInputEnvelope = {
    data: ProductCreateManyBrandInput | ProductCreateManyBrandInput[]
  }

  export type ProductUpsertWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
    create: XOR<ProductCreateWithoutBrandInput, ProductUncheckedCreateWithoutBrandInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutBrandInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutBrandInput, ProductUncheckedUpdateWithoutBrandInput>
  }

  export type ProductUpdateManyWithWhereWithoutBrandInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutBrandInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    costPrice?: FloatFilter<"Product"> | number
    basePrice?: FloatFilter<"Product"> | number
    sku?: StringFilter<"Product"> | string
    barcode?: StringNullableFilter<"Product"> | string | null
    featured?: BoolFilter<"Product"> | boolean
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    taxable?: BoolFilter<"Product"> | boolean
    shippable?: BoolFilter<"Product"> | boolean
    categories?: StringNullableListFilter<"Product">
    categoryIds?: StringNullableListFilter<"Product">
    brandId?: StringNullableFilter<"Product"> | string | null
  }

  export type ProductVariantCreateWithoutWarehouseInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeCreateNestedManyWithoutVariantInput
    product: ProductCreateNestedOneWithoutVariantsInput
    stock?: StockCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutWarehouseInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    attributes?: VariantAttributeUncheckedCreateNestedManyWithoutVariantInput
    stock?: StockUncheckedCreateNestedOneWithoutVariantInput
    reservationItems?: ReservationItemUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutWarehouseInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput>
  }

  export type ProductVariantCreateManyWarehouseInputEnvelope = {
    data: ProductVariantCreateManyWarehouseInput | ProductVariantCreateManyWarehouseInput[]
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutWarehouseInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutWarehouseInput, ProductVariantUncheckedUpdateWithoutWarehouseInput>
    create: XOR<ProductVariantCreateWithoutWarehouseInput, ProductVariantUncheckedCreateWithoutWarehouseInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutWarehouseInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutWarehouseInput, ProductVariantUncheckedUpdateWithoutWarehouseInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutWarehouseInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutWarehouseInput>
  }

  export type ProductImageCreateManyProductInput = {
    id?: string
    url: string
    blurhash: string
    isMain?: boolean
    createdAt?: Date | string
  }

  export type ProductVariantCreateManyProductInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    warehouseId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductAttributeCreateManyProductInput = {
    id?: string
    name: string
    required?: boolean
    visible?: boolean
    variantable?: boolean
    filterable?: boolean
    searchable?: boolean
    displayOrder?: number
    values?: ProductAttributeCreatevaluesInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SizeChartCreateManyProductInput = {
    id?: string
    name: string
    category: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductTagCreateManyProductInput = {
    id?: string
    tagId: string
    createdAt?: Date | string
  }

  export type RelatedProductCreateManyFromProductInput = {
    id?: string
    toProductId: string
  }

  export type RelatedProductCreateManyToProductInput = {
    id?: string
    fromProductId: string
  }

  export type WishlistCreateManyProductInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductImageUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductImageUncheckedUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductImageUncheckedUpdateManyWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    blurhash?: StringFieldUpdateOperationsInput | string
    isMain?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUpdateManyWithoutVariantNestedInput
    warehouse?: WarehouseUpdateOneRequiredWithoutVariantsNestedInput
    stock?: StockUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput
    stock?: StockUncheckedUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    warehouseId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeUncheckedUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeUncheckedUpdateManyWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    required?: BoolFieldUpdateOperationsInput | boolean
    visible?: BoolFieldUpdateOperationsInput | boolean
    variantable?: BoolFieldUpdateOperationsInput | boolean
    filterable?: BoolFieldUpdateOperationsInput | boolean
    searchable?: BoolFieldUpdateOperationsInput | boolean
    displayOrder?: IntFieldUpdateOperationsInput | number
    values?: ProductAttributeUpdatevaluesInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: SizeChartColumnUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    columns?: SizeChartColumnUncheckedUpdateManyWithoutSizeChartNestedInput
    rows?: SizeChartRowUncheckedUpdateManyWithoutSizeChartNestedInput
    images?: SizeChartImageUncheckedUpdateManyWithoutSizeChartNestedInput
  }

  export type SizeChartUncheckedUpdateManyWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tag?: TagUpdateOneRequiredWithoutProductTagsNestedInput
  }

  export type ProductTagUncheckedUpdateWithoutProductInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagUncheckedUpdateManyWithoutProductInput = {
    tagId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RelatedProductUpdateWithoutFromProductInput = {
    toProduct?: ProductUpdateOneRequiredWithoutRelatedToNestedInput
  }

  export type RelatedProductUncheckedUpdateWithoutFromProductInput = {
    toProductId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedProductUncheckedUpdateManyWithoutFromProductInput = {
    toProductId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedProductUpdateWithoutToProductInput = {
    fromProduct?: ProductUpdateOneRequiredWithoutRelatedFromNestedInput
  }

  export type RelatedProductUncheckedUpdateWithoutToProductInput = {
    fromProductId?: StringFieldUpdateOperationsInput | string
  }

  export type RelatedProductUncheckedUpdateManyWithoutToProductInput = {
    fromProductId?: StringFieldUpdateOperationsInput | string
  }

  export type WishlistUpdateWithoutProductInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateWithoutProductInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WishlistUncheckedUpdateManyWithoutProductInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemCreateManyReservationInput = {
    id?: string
    quantity: number
    variantId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReservationItemUpdateWithoutReservationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variant?: ProductVariantUpdateOneRequiredWithoutReservationItemsNestedInput
  }

  export type ReservationItemUncheckedUpdateWithoutReservationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemUncheckedUpdateManyWithoutReservationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    variantId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VariantAttributeCreateManyVariantInput = {
    id?: string
    name: string
    value: string
    extraValue?: string | null
  }

  export type ReservationItemCreateManyVariantInput = {
    id?: string
    quantity: number
    reservationId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VariantAttributeUpdateWithoutVariantInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VariantAttributeUncheckedUpdateWithoutVariantInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VariantAttributeUncheckedUpdateManyWithoutVariantInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    extraValue?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReservationItemUpdateWithoutVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reservation?: ReservationUpdateOneRequiredWithoutItemsNestedInput
  }

  export type ReservationItemUncheckedUpdateWithoutVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reservationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReservationItemUncheckedUpdateManyWithoutVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    reservationId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnCreateManySizeChartInput = {
    id?: string
    name: string
    type: string
    unit?: string | null
    createdAt?: Date | string
  }

  export type SizeChartRowCreateManySizeChartInput = {
    id?: string
    name: string
    values: InputJsonValue
    createdAt?: Date | string
  }

  export type SizeChartImageCreateManySizeChartInput = {
    id?: string
    url: string
    name: string
    createdAt?: Date | string
  }

  export type SizeChartColumnUpdateWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnUncheckedUpdateWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartColumnUncheckedUpdateManyWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    unit?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowUpdateWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowUncheckedUpdateWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartRowUncheckedUpdateManyWithoutSizeChartInput = {
    name?: StringFieldUpdateOperationsInput | string
    values?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageUpdateWithoutSizeChartInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageUncheckedUpdateWithoutSizeChartInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizeChartImageUncheckedUpdateManyWithoutSizeChartInput = {
    url?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagCreateManyTagInput = {
    id?: string
    productId: string
    createdAt?: Date | string
  }

  export type ProductTagUpdateWithoutTagInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutProductTagsNestedInput
  }

  export type ProductTagUncheckedUpdateWithoutTagInput = {
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductTagUncheckedUpdateManyWithoutTagInput = {
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyBrandInput = {
    id?: string
    name: string
    slug: string
    description: string
    costPrice: number
    basePrice: number
    sku: string
    barcode?: string | null
    featured?: boolean
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    taxable?: boolean
    shippable?: boolean
    categories?: ProductCreatecategoriesInput | string[]
    categoryIds?: ProductCreatecategoryIdsInput | string[]
  }

  export type ProductUpdateWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    attributes?: ProductAttributeUncheckedUpdateManyWithoutProductNestedInput
    sizeCharts?: SizeChartUncheckedUpdateManyWithoutProductNestedInput
    dimensions?: ProductDimensionUncheckedUpdateOneWithoutProductNestedInput
    seo?: ProductSEOUncheckedUpdateOneWithoutProductNestedInput
    productTags?: ProductTagUncheckedUpdateManyWithoutProductNestedInput
    relatedFrom?: RelatedProductUncheckedUpdateManyWithoutFromProductNestedInput
    relatedTo?: RelatedProductUncheckedUpdateManyWithoutToProductNestedInput
    wishlists?: WishlistUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutBrandInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    costPrice?: FloatFieldUpdateOperationsInput | number
    basePrice?: FloatFieldUpdateOperationsInput | number
    sku?: StringFieldUpdateOperationsInput | string
    barcode?: NullableStringFieldUpdateOperationsInput | string | null
    featured?: BoolFieldUpdateOperationsInput | boolean
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    taxable?: BoolFieldUpdateOperationsInput | boolean
    shippable?: BoolFieldUpdateOperationsInput | boolean
    categories?: ProductUpdatecategoriesInput | string[]
    categoryIds?: ProductUpdatecategoryIdsInput | string[]
  }

  export type ProductVariantCreateManyWarehouseInput = {
    id?: string
    name: string
    sku: string
    price: number
    lowStockThreshold: number
    colorValue?: string | null
    colorName?: string | null
    attributesIds?: ProductVariantCreateattributesIdsInput | string[]
    imageIds?: ProductVariantCreateimageIdsInput | string[]
    productId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductVariantUpdateWithoutWarehouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUpdateManyWithoutVariantNestedInput
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    stock?: StockUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutWarehouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attributes?: VariantAttributeUncheckedUpdateManyWithoutVariantNestedInput
    stock?: StockUncheckedUpdateOneWithoutVariantNestedInput
    reservationItems?: ReservationItemUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateManyWithoutWarehouseInput = {
    name?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    lowStockThreshold?: IntFieldUpdateOperationsInput | number
    colorValue?: NullableStringFieldUpdateOperationsInput | string | null
    colorName?: NullableStringFieldUpdateOperationsInput | string | null
    attributesIds?: ProductVariantUpdateattributesIdsInput | string[]
    imageIds?: ProductVariantUpdateimageIdsInput | string[]
    productId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}