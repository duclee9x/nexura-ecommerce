syntax = "proto3";

package nexuraTelemetry;

service AddressService {
    rpc GetCountries (Empty) returns (GetCountriesResponse);
    rpc GetProvincesByCountry (GetProvincesByCountryRequest) returns (GetProvincesResponse);
    rpc GetDistrictsByProvince (GetDistrictsByProvinceRequest) returns (GetDistrictsResponse);
    rpc GetWardsByDistrict (GetWardsByDistrictRequest) returns (GetWardsResponse);
    rpc AddAddress (AddAddressRequest) returns (AddressResponse);
    rpc UpdateAddress (UpdateAddressRequest) returns (AddressResponse);
    rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressResponse);
    rpc GetAddresses (GetAddressesRequest) returns (GetAddressesResponse);
}

message GetAddressesRequest {
  string userId = 1;
}

message GetAddressesResponse {
  bool success = 1;
  string message = 2;
  repeated ExtendedAddress addresses = 3;
}

message GetCountriesResponse {
  bool success = 1;
  string message = 2;
  repeated Country countries = 3;
}
message GetProvincesByCountryRequest {
  string countryId = 1;
}

message GetProvincesResponse {
  bool success = 1;
  string message = 2;
  repeated Province provinces = 3;
}

message GetDistrictsByProvinceRequest {
  string provinceId = 1;
}

message GetDistrictsResponse {
  bool success = 1;
  string message = 2;
  repeated District districts = 3;
}

message GetWardsByDistrictRequest {
  string districtId = 1;
}

message GetWardsResponse {
  bool success = 1;
  string message = 2;
  repeated Ward wards = 3;
}
message AddAddressRequest {
  string userId = 1;
  Address address = 2;
}

message UpdateAddressRequest {
  string userId = 1;
  ExtendedAddress address = 2;
}

message DeleteAddressRequest {
  string userId = 1;
  string addressId = 2;
}

message AddressResponse {
  bool success = 1;
  string message = 2;
  Address address = 3;
}

message DeleteAddressResponse {
  bool success = 1;
  string message = 2;
}
message Country {
  string id = 1;
  string name = 2;
  string codeName = 3;
}

message Province {
  string id = 1;
  string name = 2;
  string nameEn = 3;
  string fullName = 4;
  string fullNameEn = 5;
  string administrativeUnitId = 6;
  string administrativeRegionId = 7;
  string countryId = 8;
}

message District {
  string id = 1;
  string name = 2;
  string nameEn = 3;
  string fullName = 4;
  string fullNameEn = 5;
  string provinceId = 6;
  string administrativeUnitId = 7;
}

message Ward {
  string id = 1;
  string name = 2;
  string nameEn = 3;
  string fullName = 4;
  string fullNameEn = 5;
  string districtId = 6;
  string administrativeUnitId = 7;
}

// -----------------User service-----------------

service UserService {
    rpc GetUser (GetUserRequest) returns (GetUserResponse);
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse);
    rpc RegisterUser (RegisterUserRequest) returns (RegisterUserResponse);
    rpc LoginUser (LoginUserRequest) returns (LoginUserResponse);
    rpc ForgotPassword (ForgotPasswordRequest) returns (ForgotPasswordResponse);
    rpc ValidateOTP (ValidateOTPRequest) returns (ValidateOTPResponse);
    rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordResponse);
    rpc VerifyAccount (VerifyAccountRequest) returns (VerifyAccountResponse);
  }
 
  message ForgotPasswordRequest {
    string email = 1;
  }
  message ForgotPasswordResponse {
    bool success = 1;
    string message = 2;
  }
  
  message ValidateOTPRequest {
    string email = 1;
    string otp = 2;
  }
  message ValidateOTPResponse {
    bool success = 1;
    string message = 2;
  }
  
  message ResetPasswordRequest {
    string email = 1;
    string new_password = 2;
  }
  message ResetPasswordResponse {
    bool success = 1;
    string message = 2;
  }
  message GetUserRequest {
    string id = 1;
  }

  message UpdateUserResponse {
    bool success = 1;
    string message = 2;
    User user = 3;
  }

  message GetUserResponse {
    bool success = 1;
    string message = 2;
    User user = 3;
  }
  
  message DeleteUserRequest {
    string id = 1; 
  }

  message UpdateUserRequest {
    string id = 1;
    User user = 2;
    string currentPassword = 3;
    string newPassword = 4;
  }
  
  message RegisterUserRequest {
    string firstName = 1;
    string lastName = 2;
    string email = 3;
    string password = 4;
  }
  
  message RegisterUserResponse {
    bool success = 1;
    string message = 2;
  }

  message LoginUserRequest {
    string email = 1;
    string password = 2;
  }
  
  message LoginUserResponse {
    bool success = 1;
    string message = 2;
    string accessToken = 3;
    string refreshToken = 4;
    User user = 5;
  }
  
  message User {
    string id = 1;
    string firstName = 2;
    string lastName = 3;
    string email = 4;
    string phone = 5;
    string createdAt = 6;
    string dateOfBirth = 7;
    string gender = 8;
    string updatedAt = 9;
    bool isActive = 10;
    bool isVerified = 11;
    string role = 12;
    string lastLogin = 13;
    string permissions = 14;
    string profilePictureUrl = 15;
  }

  message ExtendedAddress {
    string id = 1;
    string name = 2;
    string street = 3;
    string city = 4;
    string state = 5;
    string countryId = 6;
    string countryName = 7;
    string zip = 8;
    string vnProvinceId = 9;
    string vnProvinceName = 10;
    string vnDistrictId = 11;
    string vnDistrictName = 12;
    string vnWardId = 13;
    string vnWardName = 14;
    bool isDefault = 15;
    string createdAt = 16;
    string updatedAt = 17;
  }
  message Address {
    string id = 1;
    string name = 2;
    string street = 3;
    string city = 4;
    string state = 5;
    string countryId = 6;
    string zip = 7;
    string vnProvinceId = 8;
    string vnDistrictId = 9;
    string vnWardId = 10;
    bool isDefault = 11;
    string createdAt = 12;
    string updatedAt = 13;
  }
 
  
  message DeleteUserResponse {
    bool success = 1;
    string message = 2;
  } 
  
  message VerifyAccountRequest {
    string token = 1;
  }
  
  message VerifyAccountResponse {
    bool success = 1;
    string message = 2;
  }
// -----------------Cart service-----------------

service CartService {
  rpc GetCart(GetCartRequest) returns (GetCartResponse) {}
  rpc AddItem(AddItemRequest) returns (AddItemResponse) {}
  rpc UpdateItem(UpdateItemRequest) returns (UpdateItemResponse) {}
  rpc RemoveItem(RemoveItemRequest) returns (RemoveItemResponse) {}
  rpc ClearCart(ClearCartRequest) returns (ClearCartResponse) {}
  rpc ValidateCart(ValidateCartRequest) returns (ValidateCartResponse);
 
}

message GetCartRequest {
  string user_id = 1;
}

message GetCartResponse {
  Cart cart = 1;
}

message AddItemRequest {
  string user_id = 1;
  string product_id = 2;
  string variant_id = 3;
  int32 quantity = 4;
  string image = 5;
  string currency_code = 6;
}

message AddItemResponse {
  Cart cart = 1;
}

message UpdateItemRequest {
  string user_id = 1;
  string product_id = 2;
  string variant_id = 3;
  int32 quantity = 4;
  string image = 5;
}

message UpdateItemResponse {
  Cart cart = 1;
}

message RemoveItemRequest {
  string user_id = 1;
  string product_id = 2;
  string variant_id = 3;
}

message RemoveItemResponse {
  Cart cart = 1;
}

message ClearCartRequest {
  string user_id = 1;
}

message ClearCartResponse {
  bool success = 1;
}

message Cart {
  string id = 1;
  string user_id = 2;
  repeated CartItem items = 3;
  string created_at = 4;
  string updated_at = 5;
  string currency_code = 6;
}

message CartItem {
  string id = 1;
  string product_id = 2;
  string variant_id = 3;
  string image = 4;
  int32 quantity = 5;
  string created_at = 6;
  string updated_at = 7;
}

message ValidateCartRequest {
  string user_id = 1;
}


message ValidateCartResponse {
  bool valid = 1;
  string message = 2;
  repeated CartItem items = 3;
  repeated string issues = 4;
}

// ---------------Recommendation service----------

service RecommendationService {
  rpc ListRecommendations(ListRecommendationsRequest) returns (ListRecommendationsResponse){}
}

message ListRecommendationsRequest {
    string user_id = 1;
    repeated string product_ids = 2;
}

message ListRecommendationsResponse {
    repeated string product_ids = 1;
}

// ---------------Product Catalog----------------
message Empty {}

service ProductCatalogService {
    rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse) {}
    rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse) {}
    rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse) {}
    rpc CreateVariant(CreateVariantRequest) returns (CreateVariantResponse) {}
    rpc GetProductById(GetProductByIdRequest) returns (GetProductResponse) {}
    rpc GetProductBySlug(GetProductBySlugRequest) returns (GetProductResponse) {}
    rpc ListProducts(ListProductsRequest) returns (ListProductsResponse) {}
    rpc CreateBrand(CreateBrandRequest) returns (CreateBrandResponse) {}
    rpc NewBrand(NewBrandRequest) returns (NewBrandResponse) {}
    rpc RemoveBrand(RemoveBrandRequest) returns (RemoveBrandResponse) {}
    rpc GetAllBrand(Empty) returns (GetAllBrandResponse) {}
    rpc GetVariantsForCart(GetVariantsForCartRequest) returns (GetVariantsForCartResponse) {}
    
    rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {}
    rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {}
    rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {}
    rpc GetAllCategory(Empty) returns (GetAllCategoryResponse) {}

    rpc GetProductAttributes(GetProductAttributesRequest) returns (GetProductAttributesResponse) {}
    rpc UpdateProductAttributes(UpdateProductAttributesRequest) returns (UpdateProductAttributesResponse) {}
    rpc DeleteProductAttributes(DeleteProductAttributesRequest) returns (DeleteProductAttributesResponse) {}
    rpc CreateProductAttribute(CreateProductAttributeRequest) returns (CreateProductAttributeResponse) {}

    rpc GetWarehouses(Empty) returns (GetWarehousesResponse) {}
    rpc ValidateAndReserve(ValidateAndReserveRequest) returns (ValidateAndReserveResponse);
    rpc ReleaseReservation(ReleaseReservationRequest) returns (ReleaseReservationResponse);
    rpc CommitReservation(CommitReservationRequest) returns (CommitReservationResponse);
  }

message GetVariantsForCartRequest {
  repeated string variant_ids = 1;
}

message GetVariantsForCartResponse {
  repeated VariantCart variants = 1;
}

message VariantCart {
  string id = 1;
  float price = 2;
  string image = 3;
  optional Stock stock = 4;
  string variant_name = 5;
  string product_name = 6;
  string product_slug = 7;
  repeated VariantAttribute attributes = 8;
}
message GetProductAttributesRequest {
    string product_id = 1;
}

message GetProductAttributesResponse {
    repeated ProductAttribute attributes = 1;
}

message UpdateProductAttributesRequest {
    ProductAttribute attribute = 1;
}

message UpdateProductAttributesResponse {
    ProductAttribute attribute = 1;
}

message DeleteProductAttributesRequest {
    string attribute_id = 1;
}

message DeleteProductAttributesResponse {
    string attribute_id = 1;
}

message CreateProductAttributeRequest {
    ProductAttribute attribute = 1;
}

message CreateProductAttributeResponse {
    ProductAttribute attribute = 1;
}

message ProductAttribute {
    string id = 1;
    string name = 2;
    bool required = 3;
    bool visible = 4;
    repeated string values = 5;
    string productId = 6;
    bool variantable = 7;
    bool filterable = 8;
    bool searchable = 9;
    int32 displayOrder = 10;
}

message Product {
    string id = 1;
    string name = 2;
    string slug = 3;
    string description = 4;
    float costPrice = 5;
    float basePrice = 6;
    string sku = 7;
    string barcode = 8;
    string brandId = 9;
    bool featured = 10;
    string status = 11;
    string createdAt = 12;
    string updatedAt = 13;
    Seo seo = 14;
    bool taxable = 15;
    bool shippable = 16;
    repeated string categories = 17;
    repeated ProductTag productTags = 18;
    repeated Image images = 19;
    repeated ProductAttribute attributes = 20;
    repeated ProductVariant variants = 21;
    Dimensions dimensions = 22;
    repeated SizeChart sizeCharts = 23;
}

message SizeChart {
  string id = 1;
  string name = 2;
  string category = 3;
  optional string description = 4;
  string productId = 5;
  repeated SizeChartColumn columns = 6;
  repeated SizeChartRow rows = 7;
  repeated SizeChartImage images = 8;
  string createdAt = 9;
  string updatedAt = 10;
}
message SizeChartColumn {
  string id = 1;
  string name = 2;
  string type = 3;
  optional string unit = 4;
  string sizeChartId = 5;
  string createdAt = 6;
}

message SizeChartRow {
    string id = 1;
    string name = 2;
    repeated SizeChartCell cells = 3;
}

message SizeChartCell {
    string id = 1;
    string value = 2;
}

message SizeChartImage {
  string id = 1;
  string url = 2;
  string name = 3;
  string sizeChartId = 4;
  string createdAt = 5;
}

message ProductTag {
    string id = 1;
    Tag tag = 2;
    string productId = 3;
}

message Tag {
    string id = 1;
    string name = 2;
    string createdAt = 3;
    string updatedAt = 4;
}

message Dimensions {
    float length = 1;
    float width = 2;
    float height = 3;
    float weight = 4;
}

message Seo {
    string title = 1;
    string description = 2;
    string keywords = 3;
}

message ProductVariant {
    string id = 1;
    string sku = 2;
    float price = 3;
    float lowStockThreshold = 4;
    Stock stock = 5;
    string warehouseId = 6;
    repeated string imageIds = 7;
    repeated VariantAttribute attributes = 8;
}

message Stock {
    int32 quantity = 1;
    int32 reserved = 2;
}

message VariantAttribute {
    string id = 1;
    string name = 2;
    string value = 3;
    string extraValue = 4;
}

message Image {
    string id = 1;
    string url = 2;
    string blurhash = 3;
    bool isMain = 4;
}

message CreateProductRequest {
    Product product = 1;
}

message CreateProductResponse {
    Product product = 1;
}

message UpdateProductRequest {
    Product product = 1;
}

message UpdateProductResponse {
    Product product = 1;
}

message DeleteProductRequest {
    string id = 1;
}

message DeleteProductResponse {
    string id = 1;
}

message CreateVariantRequest {
    ProductVariant variant = 1;
}

message CreateVariantResponse {
    ProductVariant variant = 1;
}

message CreateBrandRequest {
    Brand brand = 1;
}

message CreateBrandResponse {
    Brand brand = 1;
}

message GetAllCategoryResponse {
  repeated Category categories = 1;
}

message CreateCategoryRequest {
    Category category = 1;
}

message CreateCategoryResponse {
    Category category = 1;
}

message UpdateCategoryRequest {
    Category category = 1;
}

message UpdateCategoryResponse {
    Category category = 1;
}

message DeleteCategoryRequest {
    string id = 1;
}

message DeleteCategoryResponse {
    string id = 1;
}
message CreateImageRequest {
    Image image = 1;
}

message CreateImageResponse {
    Image image = 1;
}
    
message ListProductsResponse {
    repeated Product products = 1;
}

message ListProductsRequest {
}

message GetProductByIdRequest {
    string id = 1;
}

message GetProductBySlugRequest {
    string slug = 1;
}


message GetProductResponse {
    Product product = 1;
}


message Brand {
    string id = 1;
    string name = 2;
    string logo = 3;
}

message Category {
    string id = 1;
    string name = 2;
    string parentId = 3;
}

message GetWarehousesResponse {
    repeated Warehouse warehouses = 1;
}

message Warehouse {
    string id = 1;
    string name = 2;
    string code = 3;
    repeated string location = 4;
    string address = 5;
    string manager = 6;
    string contact = 7;
    string status = 8;
    string createdAt = 9;
    string updatedAt = 10;
}
    
message SearchProductsRequest {
    string query = 1;
}

message SearchProductsResponse {
    repeated Product results = 1;
}



// -------------Email service-----------------

service EmailService {
    // rpc SendOrderConfirmation(SendOrderConfirmationRequest) returns (Empty) {}
    rpc SendOTPResetPassword (SendOTPResetPasswordRequest) returns (SendOTPResetPasswordResponse) {}
    rpc SendWelcomeEmail (SendWelcomeEmailRequest) returns (SendWelcomeEmailResponse) {}
}




message SendOTPResetPasswordRequest {
    string email = 1;
    string verification_code = 2;
  }
  
  message SendOTPResetPasswordResponse {
    bool success = 1;
    string message = 2;
  }
    
  message SendWelcomeEmailRequest {
    string email = 1;
    string name = 2;
    string token = 3;
  }
  
  message SendWelcomeEmailResponse {
    bool success = 1;
    string message = 2;
  } 

// ------------Ad service------------------

service AdService {
    rpc GetAds(AdRequest) returns (AdResponse) {}
}

message AdRequest {
    // List of important key words from the current page describing the context.
    repeated string context_keys = 1;
}

message AdResponse {
    repeated Ad ads = 1;
}

message Ad {
    // url to redirect to when an ad is clicked.
    string redirect_url = 1;

    // short advertisement text to display.
    string text = 2;
}


message NewBrandRequest {
    Brand brand = 1;
}

message NewBrandResponse {
    bool success = 1;
    string message = 2;
    Brand brand = 3;
}

message RemoveBrandRequest {
    string id = 1;
}

message RemoveBrandResponse {
    bool success = 1;
    string message = 2;
}


message GetAllBrandResponse {
    bool success = 1;
    string message = 2;
    repeated Brand brands = 3;
}

// Health service definition
service HealthService {
  // Check is the health checking method for all services
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  // Watch is for watching health status changes
  rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

message HealthCheckRequest {
  string service = 1;  // The name of the service to check
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used when the requested service is not known
  }
  ServingStatus status = 1;
}

// Service names for health checks
enum ServiceName {
  UNSPECIFIED = 0;
  CART_SERVICE = 1;
  USER_SERVICE = 2;
  PRODUCT_CATALOG_SERVICE = 3;
  RECOMMENDATION_SERVICE = 4;
  SHIPPING_SERVICE = 5;
  CURRENCY_SERVICE = 6;
  PAYMENT_SERVICE = 7;
  EMAIL_SERVICE = 8;
  CHECKOUT_SERVICE = 9;
  AD_SERVICE = 10;
  FEATURE_FLAG_SERVICE = 11;
  ADDRESS_SERVICE = 12;
  ORDER_SERVICE = 13;
  ORCHESTRATOR_SERVICE = 14;
}

// ---------------Order service-----------------

service OrderService {
  rpc createOrder (CreateOrderRequest) returns (CreateOrderResponse) {}
  rpc GetOrderStatus(GetOrderStatusRequest) returns (GetOrderStatusResponse) {}
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse) {}
  rpc CancelOrder(CancelOrderRequest) returns (CancelOrderResponse) {}
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse) {}
}

message CreateOrderRequest {
  string user_id = 1;
  string cart_id = 2;
  repeated OrderItem items = 3;
  string payment_method = 4;
  double payment_amount = 5;
  string payment_currency = 6;
  ExtendedAddress shipping_address = 7;
  string shipping_method = 8;
  double shipping_cost = 9;
  double subtotal = 10;
  repeated Coupon coupons = 11;
  double total = 12;
  string currency_code = 13;
}

message CreateOrderResponse {
  string order_id = 1;
}

message GetOrderStatusRequest {
  string order_id = 1;
}

message GetOrderStatusResponse {
  OrderStatus status = 1;
}

message GetOrderRequest {
  string order_id = 1;
}

message GetOrderResponse {
  Order order = 1;
}
message Order {
  string id = 1;
  string userId = 2;
  string status = 3;
  double totalAmount = 4;
  string shippingAddressId = 5;
  repeated OrderItem items = 6;
  string paymentId = 7;
  string createdAt = 8;
  string updatedAt = 9;
}

message UpdateOrderStatusRequest {
  string order_id = 1;
  OrderStatus status = 2;
}

message UpdateOrderStatusResponse {
  string order_id = 1;
  OrderStatus status = 2;
  repeated OrderStep steps = 3;
  string message = 4;
}

message CancelOrderRequest {
  string order_id = 1;
}

message CancelOrderResponse {
  string order_id = 1;
  OrderStatus status = 2;
  string message = 3;
}

message OrderStep {
  string service = 1;
  StepStatus status = 2;
  string error = 3;
  string timestamp = 4;
}

enum OrderStatus {
  ORDER_PENDING = 0;
  ORDER_PROCESSING = 1;
  ORDER_SHIPPED = 2;
  ORDER_COMPENSATING = 3;
  ORDER_DELIVERED = 4;
  ORDER_CANCELLED = 5;
  ORDER_COMPLETED = 6;
  ORDER_FAILED = 7;
  ORDER_REFUNDED = 8;
  ORDER_EXPIRED = 9;
  ORDER_ON_HOLD = 10;
}

enum StepStatus {
  STEP_PENDING = 0;
  STEP_STARTED = 1;
  STEP_COMPLETED = 2;
  STEP_FAILED = 3;
  STEP_COMPENSATED = 4;
}

message ValidateAndReserveRequest {
  string user_id = 1;
  repeated ProductVariant variants = 2;
}

message ValidateAndReserveResponse {
  bool success = 1;
  string reservation_id = 2;
  repeated ValidationError validation_errors = 3;
}

message ValidationError {
  string variant_id = 1;
  string error = 2;
}

message ReleaseReservationRequest {
  string reservation_id = 1;
}

message ReleaseReservationResponse {
  bool success = 1;
  string message = 2;
}

message CommitReservationRequest {
  string reservation_id = 1;
}

message CommitReservationResponse {
  bool success = 1;
  string message = 2;
}

// ---------------Payment service-----------------

service PaymentService {
  rpc InitiatePayment(InitiatePaymentRequest) returns (InitiatePaymentResponse);
  rpc VerifyPayment(VerifyPaymentRequest) returns (VerifyPaymentResponse);
  rpc CancelPayment(CancelPaymentRequest) returns (CancelPaymentResponse);
  rpc RefundPayment(RefundPaymentRequest) returns (RefundPaymentResponse);
  rpc GetPaymentStatus(GetPaymentStatusRequest) returns (GetPaymentStatusResponse);
}

enum PaymentProvider {
  STRIPE = 0;
  PAYPAL = 1;
  VNPAY = 2;
}

enum PaymentStatus {
  PENDING = 0;
  PAID = 1;
  FAILED = 2;
  CANCELLED = 3;
  REFUNDED = 4;
}

message InitiatePaymentRequest {
  string orderId = 1;
  double amount = 2;
  PaymentProvider provider = 3;
  string currency = 4;
}

message InitiatePaymentResponse {
  string paymentId = 1;
  string redirectUrl = 2;
  PaymentStatus status = 3;
}

message VerifyPaymentRequest {
  string paymentId = 1;
}

message VerifyPaymentResponse {
  PaymentStatus status = 1;
}

message CancelPaymentRequest {
  string paymentId = 1;
}

message CancelPaymentResponse {
  bool success = 1;
}

message RefundPaymentRequest {
  string paymentId = 1;
}

message RefundPaymentResponse {
  bool success = 1;
}

message GetPaymentStatusRequest {
  string paymentId = 1;
}

message GetPaymentStatusResponse {
  PaymentStatus status = 1;
}


service OrchestratorService {
  rpc CreateSagaOrder(CreateSagaOrderRequest) returns (CreateSagaOrderResponse) {}
}

message CreateSagaOrderRequest {
  string user_id = 1;
  string cart_id = 2;
  repeated OrderItem items = 3;
  string payment_method = 4;
  double payment_amount = 5;
  string payment_currency = 6;
  ExtendedAddress shipping_address = 7;
  string shipping_method = 8;
  double shipping_cost = 9;
  double subtotal = 10;
  repeated Coupon coupons = 11;
  double total = 12;
  string currency_code = 13;
}

message CreateSagaOrderResponse {
  string order_id = 1;
  OrderStatus status = 2;
}

message OrderItem {
  string product_id = 1;
  string variant_id = 2;
  int32 quantity = 3;
  double price = 4;
}

message Coupon {
  string code = 1;
  double discount = 2;
}