services:
  mysql:
    image: mysql:8.0
    environment:
      TZ: "UTC"
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: user_service
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword" ]
      interval: 5s
      timeout: 5s
      retries: 5
  
  # user-service:
  #   build: .
  #   ports:
  #     - "50051:50051"
  #   depends_on:
  #     mysql:
  #       condition: service_healthy
  #     otel-collector:
  #       condition: service_started
  #   environment:
  #     - NODE_ENV=development
  #     - DATABASE_USER=root
  #     - DATABASE_PASSWORD=password
  #     - DATABASE_HOST=mysql
  #     - DATABASE_PORT=3306
  #     - DATABASE_NAME=user_service
  #     - DATABASE_URL=mysql://root:password@mysql:3306/user_service
  #     - JWT_ACCESS_SECRET=your-super-secret-access-key
  #     - JWT_REFRESH_SECRET=your-super-secret-refresh-key
  #     - JWT_ACCESS_EXPIRATION=15m
  #     - JWT_REFRESH_EXPIRATION=7d
  #     - GRPC_SERVER_PORT=50051
  #     - OTEL_EXPORTER_OTLP_ENDPOINT=localhost:4318/v1/traces
  #     - LOG_LEVEL=info
  #     - OTEL_RESOURCE_ATTRIBUTES=service.version=1.0.0,service.name=user-microservice,service.namespace=nexura
      
  #   volumes:
  #     - ./src:/app/src # Mount source code for hot-reloading
  #     - ./proto:/app/proto # Mount proto files
  #     - ./prisma:/app/prisma # Mount prisma schema
  #     - ./node_modules:/app/node_modules # Mount node_modules to avoid rebuilding
  #     - ./logs:/app/logs # Mount logs directory
  #   healthcheck:
  #     test: ["CMD","grpc_health_probe", "-addr","localhost:50051"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 40s
  #     start_interval: 5s
  #   develop:
  #     watch:
  #       - path: ./
  #         action: restart
  #         target: /app/src
  #         ignore:
  #           - node_modules
  #           - prisma
  #           - dist
  #           - logs

    # command: >
    #   sh -c "npx prisma generate && npx prisma migrate deploy && yarn build && yarn start"

  grpcui:
    image: fullstorydev/grpcui:latest
    ports:
      - "8080:8080"
    # depends_on:
    #   user-service:
    #     condition: service_healthy
    command: [ "-plaintext", "localhost:50051" ]

  otel-collector:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.120.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    depends_on:
      - jaeger
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension

  # Jaeger for visualization
  jaeger:
    image: jaegertracing/all-in-one:1.66.0
    # command: ["--set", "receivers.otlp.protocols.http.endpoint=0.0.0.0:4318", "--set", "receivers.otlp.protocols.grpc.endpoint=0.0.0.0:4317"]
    ports:
      - 5778:5778
      - 16686:16686
      - 14250:14250
      - 14268:14268
      - 9411:9411
    environment:
      - COLLECTOR_OTLP_ENABLED=true


volumes:
  mysql-data:
  logs-data:
